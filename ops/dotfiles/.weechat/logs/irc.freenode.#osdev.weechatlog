2020-12-19 11:23:03	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-19 11:23:03	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-19 11:23:03	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-19 11:23:03	--	Channel #osdev: 284 nicks (1 op, 0 voices, 283 normals)
2020-12-19 11:23:05	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-19 11:23:13	geist	i think the same feature that lets you get 52 bit (or is it 56?) virtual space but only if using 64k page granules
2020-12-19 11:23:13	mrvn	Kind of makes little sense without a board that has 4TB ram.
2020-12-19 11:23:57	geist	clearly some sort of server level feature, probably for nvdimm style storage i guess
2020-12-19 11:24:24	mrvn	16 + 13 + 13 + 13 = 55
2020-12-19 11:25:02	geist	there's *another* feature where you can declare that the top level page table is instead of adding another layer, two contiguous page tables
2020-12-19 11:25:06	mrvn	16 + 13 + 13 = 42. Anything above 42bit address space could have 4TB pages.
2020-12-19 11:25:07	geist	the whole thing is so complicated
2020-12-19 11:25:33	<--	uplime (nchambers@learnprogramming/staff/nchambers) has quit (Ping timeout: 260 seconds)
2020-12-19 11:25:33	<--	kuldeep (~kuldeep@unaffiliated/kuldeepdhaka) has quit (Ping timeout: 260 seconds)
2020-12-19 11:25:34	mrvn	urgs, so 16+13+14?
2020-12-19 11:25:43	geist	so you can do something like 12 + 9 + 9 + 2 by saying the top level is 4 consequetive 4K pages
2020-12-19 11:26:02	geist	and thus work around the 4 entry thing to get to 2 level page tables for 32bits
2020-12-19 11:26:08	-->	kuldeep (~kuldeep@unaffiliated/kuldeepdhaka) has joined #osdev
2020-12-19 11:26:09	-->	uplime (nchambers@learnprogramming/staff/nchambers) has joined #osdev
2020-12-19 11:26:29	geist	no idea if anyone uses that feature, but its yet another configurability bit, with some limitations
2020-12-19 11:26:41	geist	like only up to 4 more bits of extension or something
2020-12-19 11:26:50	geist	and probably power of 2
2020-12-19 11:27:14	mrvn	You have that on ARM with the 16k page tables. So probably carries over to ARM64 because they already need that logic for backward compatibility.
2020-12-19 11:29:06	mrvn	I will probably just pick 4K pages for ARM64 because every arch so far has that.
2020-12-19 11:31:12	-->	diwyjukjt5nwbmz (~mvQSMXPj~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-19 11:32:38	geist	yah. have to double check if 4K is optional on arm. if there's ever going to be a core that drops it it'll be apple silicon, since they run at 16k
2020-12-19 11:35:14	<--	regreg_ (~regreg@2a02:2f01:8e17:5500:c018:c4d7:5cd:c368) has quit (Read error: Connection reset by peer)
2020-12-19 11:42:41	chopical	the x86 platform seems like a series of mistakes that nobody wanted to fix because ... 'but mu backwards compatibility'
2020-12-19 11:43:19	chopical	i wonder if arm is like this XD
2020-12-19 11:43:49	chopical	or if they where smart enough to do away with all these silly little things.
2020-12-19 11:44:32	jimbzy	4,16, or 64kb iirc
2020-12-19 11:45:26	geist	i think it's mostly because they play a long architecture game and design things 5 or 10 years out through a series of architectural steps
2020-12-19 11:45:41	CrystalMath	chopical: backwards compatibility is good
2020-12-19 11:45:43	geist	where they can deprecate something now then actually remove it in N ticks of the architecture
2020-12-19 11:45:48	CrystalMath	and a sign of good engineering
2020-12-19 11:45:59	CrystalMath	as is forwards compatibility
2020-12-19 11:46:06	geist	so 1k paging is a good example. it was marked deprecated, please dont use this, in armv7, and then remove in armv8
2020-12-19 11:46:28	CrystalMath	geist: personally i find that bad
2020-12-19 11:46:32	CrystalMath	although it's not exactly poor engineering
2020-12-19 11:46:40	CrystalMath	i think forced upgrades are nasty
2020-12-19 11:46:49	geist	it was because 1k was nice in the 80s and no longer is
2020-12-19 11:46:56	CrystalMath	so what?
2020-12-19 11:46:58	geist	so they basically are saying 'look move your stuff on'
2020-12-19 11:47:00	CrystalMath	why not leave it?
2020-12-19 11:47:11	CrystalMath	if something still needs it
2020-12-19 11:47:12	geist	because it affects the entire design of everything end to end
2020-12-19 11:47:16	geist	TLB has to deal with it, etc etc
2020-12-19 11:47:29	geist	that's a fundamental decision that dramatically affects the design later on
2020-12-19 11:47:33	CrystalMath	there are solutions
2020-12-19 11:47:39	CrystalMath	like, you can make them slow
2020-12-19 11:47:42	geist	also just, removing 32bit support entirely. newer arm cores are 64bit only
2020-12-19 11:47:42	CrystalMath	but still working
2020-12-19 11:47:53	chopical	well it would only effect the old systems in that way but they could uhm.. just not change those systems
2020-12-19 11:48:02	geist	not page sizes, thats *really* tough to do since it has drmatic caching/TLB ramifications
2020-12-19 11:48:15	CrystalMath	geist: yeah but you can still make them slow instead of failing to work
2020-12-19 11:48:23	geist	CrystalMath: not that one.
2020-12-19 11:48:35	geist	if there's anything that would be difficult it's 1k paging
2020-12-19 11:48:44	geist	hence why it's one of the few ones that's just straight up removed
2020-12-19 11:48:48	-->	Goplat (~Goplat@reactos/developer/Goplat) has joined #osdev
2020-12-19 11:49:07	geist	of course the entire 32bit ISA s optional and basically gone in future ISAs too
2020-12-19 11:49:08	<--	benjif (~benjif@cpe-24-211-187-168.nc.res.rr.com) has quit (Quit: Leaving)
2020-12-19 11:49:08	chopical	sounds like i should be programming on arm instead of x86 if they are just 64 bit
2020-12-19 11:49:30	CrystalMath	i like backwards compatibility, i think we should always keep it
2020-12-19 11:49:34	CrystalMath	even though it's hard
2020-12-19 11:49:45	CrystalMath	let engineering be hard, and let users be less forced to upgrade
2020-12-19 11:49:45	geist	it presupposes theres something worth being backwards compatible with
2020-12-19 11:49:55	chopical	i think we should virtualize backward compatibility
2020-12-19 11:50:04	geist	there's no DOS or windows or whatnot you'd want to run on newer hardware. there's no single platform that sticks around for 40 years (IBM PC)
2020-12-19 11:50:13	CrystalMath	sure i run DOS
2020-12-19 11:50:14	geist	(in the arm world)
2020-12-19 11:50:21	CrystalMath	plenty of people run DOS
2020-12-19 11:50:24	geist	what i mean is the whole x86 PC thing is an amberration
2020-12-19 11:50:33	superleaf1995	>PSE-26
2020-12-19 11:50:36	superleaf1995	i mean 36
2020-12-19 11:50:38	geist	unique to the PC world. the second closest is the whole IBM 360/370 stuff
2020-12-19 11:50:47	CrystalMath	geist: yeah, good design
2020-12-19 11:50:50	CrystalMath	hard to find nowadays
2020-12-19 11:50:54	geist	which of course they maintain religoiusly too via newer designs that run the whole thing
2020-12-19 11:51:26	geist	but really outside of those two cases theres no single platform that has existed for a long time that is worth maintaining full bakcwards compatibility with
2020-12-19 11:51:34	geist	hence ARM doesn't have to and they can clean up their design over time
2020-12-19 11:51:41	geist	or POWER, or riscv, or whatnot
2020-12-19 11:52:38	geist	only way it'd work for ARM is if for example someone took original Acorn machines and kept making newer and newer versions
2020-12-19 11:53:05	geist	and then it bcomes a huge juggernaut like the PC world where everyone is cloning it and no one company can force everything through an upgrade (like Apple does)
2020-12-19 11:53:36	-->	camelCaser (~camela@152.89.163.20) has joined #osdev
2020-12-19 11:53:50	chopical	so i guess that is it then :) ... time to start researching aarch64 .
2020-12-19 11:53:58	geist	as a side note, for the most part all of the things that i'm talking about ARM removing and whatnot is on the system side
2020-12-19 11:54:06	CrystalMath	i know
2020-12-19 11:54:11	geist	ie, it's assumed that kernels and whatnot are at least generally aware of newer things
2020-12-19 11:54:11	CrystalMath	it prevents running old operating systems
2020-12-19 11:54:16	<--	ccamel (~camela@152.89.163.20) has quit (Read error: Connection reset by peer)
2020-12-19 11:54:17	geist	in the ISA side of it it's a different story
2020-12-19 11:54:25	CrystalMath	but i mean, eggheads often have no clue how many stores in mexico absolutely depend on MS-DOS
2020-12-19 11:54:38	geist	aside from large changes like adding arm64 vs arm32 or whatnot they maintain fairly large compatiblity
2020-12-19 11:54:49	CrystalMath	i suppose nobody depends on ARMv1
2020-12-19 11:55:01	geist	right, exactly, no one remembers the old 26 bit original ARM architecture
2020-12-19 11:55:05	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-19 11:55:08	geist	it switched to 32bit in ARMv3 I believe
2020-12-19 11:55:48	--	irc: disconnected from server
2020-12-19 11:57:31	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-19 11:57:31	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-19 11:57:31	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-19 11:57:31	--	Channel #osdev: 285 nicks (1 op, 0 voices, 284 normals)
2020-12-19 11:57:47	CrystalMath	yeah but it kinda sucks to make an OS that can only run in an emulator
2020-12-19 11:57:50	chopical	yes virtualization would be good . screw hardware level backwards compatibility. that is just making everything so messy
2020-12-19 11:58:04	CrystalMath	i'm coding a DOS right now
2020-12-19 11:58:04	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-19 11:58:20	geist	sure, but sucks and can't do it at all are two completely differne't universes
2020-12-19 11:58:34	geist	i run dos stuff all the time, but i just run it in dosbox, faster than the original by a lot
2020-12-19 11:58:48	geist	sooo yeah i guess it doesn't have the same zing to it, but it works fine
2020-12-19 11:58:54	CrystalMath	yes but i mean i'm coding a DOS kernel
2020-12-19 11:59:05	CrystalMath	although i suppose
2020-12-19 11:59:12	CrystalMath	x86 emulators still need something to boot
2020-12-19 11:59:14	CrystalMath	:P
2020-12-19 11:59:22	geist	thats your choice of course, and yah you can run it on x86 emulators all day long
2020-12-19 11:59:38	CrystalMath	i can also run it on this machien
2020-12-19 11:59:40	CrystalMath	*machine
2020-12-19 11:59:46	CrystalMath	and even machines from 2020
2020-12-19 11:59:52	CrystalMath	idk about 2030
2020-12-19 12:00:00	geist	sure. but basically you're explicitly targetting legacy modes that happen to be there, so it's kidna circular logic
2020-12-19 12:00:17	CrystalMath	on this machine, it's the only mode
2020-12-19 12:00:21	CrystalMath	no UEFI, no GPT
2020-12-19 12:00:39	CrystalMath	and the hardware i'll be buying from now on will be used hardware from the last of the BIOS era
2020-12-19 12:00:43	geist	as in you're artifically generating the situation (need legacy cpu modes on modern hardware) and then complaining that other arches dont let you do that
2020-12-19 12:00:44	CrystalMath	at least for myself
2020-12-19 12:01:18	geist	suit yourself!
2020-12-19 12:01:34	chopical	well you could always just stick with having the old hardware and let the new hardware be new
2020-12-19 12:01:35	geist	at some point it might be that some random ARM cpu runs in emulation faster than your current machine
2020-12-19 12:01:45	clever	CrystalMath: you can still use gpt and legacy boot on non-efi firmware
2020-12-19 12:01:46	-->	avega (~Thunderbi@188.162.64.168) has joined #osdev
2020-12-19 12:01:57	<--	avega (~Thunderbi@188.162.64.168) has quit (Client Quit)
2020-12-19 12:02:04	clever	CrystalMath: GPT has a protective MBR header, and that MBR can still contain the normal MBR bootloader code
2020-12-19 12:02:19	CrystalMath	right
2020-12-19 12:02:24	CrystalMath	but i prefer MBR
2020-12-19 12:02:42	CrystalMath	after all, would i be like this if i didn't at least wish to live in the past a little bit
2020-12-19 12:03:05	Kazinsal	I too like not being able to use more than 2 TB of my drives
2020-12-19 12:03:07	geist	yah you should get old hardware for tht
2020-12-19 12:03:24	CrystalMath	i don't have drives that big
2020-12-19 12:03:25	<--	diwyjukjt5nwbmz (~mvQSMXPj~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-19 12:03:29	CrystalMath	i have a 1 TB drive
2020-12-19 12:03:35	CrystalMath	i haven't managed to use more than 100 GB
2020-12-19 12:03:38	clever	Kazinsal: i bumped into a guy with a working MBR 4tb drive in #raspberrypi a few days ago
2020-12-19 12:03:51	clever	Kazinsal: turns out, he has 4096 byte sectors, so MBR's limit had raised to 16tb
2020-12-19 12:04:06	Kazinsal	interesting
2020-12-19 12:04:11	clever	but the problem, is that the pi4 usb-boot firmware, only supports 512 byte sectors
2020-12-19 12:04:16	clever	so it refused to read the disk
2020-12-19 12:04:16	Kazinsal	I was expecting some kind of secondary disklabel hack
2020-12-19 12:04:31	clever	he found a WD util to force the controller into an XP compatability mode
2020-12-19 12:04:35	geist	yah as well as DOS i assume. i'm guessing MSDOS can't deal with non 512 byte disks
2020-12-19 12:04:45	geist	though, dunno maybe PCDOS or something modern does
2020-12-19 12:04:45	CrystalMath	hmm
2020-12-19 12:05:02	CrystalMath	i'm coding a DOS bootsector right now and it should work for non-512
2020-12-19 12:05:05	geist	i actually dugh around trying to figure out how to put one of my samsung nvmes in 4k mode, but alas their consumer ones don't let you low level format them
2020-12-19 12:05:08	geist	some of them
2020-12-19 12:05:10	Kazinsal	eg. the MBR says "yeah disk's a big chungus 2 TB, one big flat partition, no worries mate" and then the partition starts with a secondary header of some kind that goes "oi yah nah mate she's a right 4 TB beaut"
2020-12-19 12:05:12	geist	some of them do, just not samsungs
2020-12-19 12:05:44	geist	that being said i looked up to see if there were any benchmarks showing that 512 vs 4k nvme makes a difference and predictably the answer is no real difference
2020-12-19 12:06:01	Kazinsal	argh. friggin e1000s have no link status register in the MAC, just in the PHY
2020-12-19 12:06:07	geist	it's kinda like jumbo frames. would matter if cpus weren't so overpowered anyway, and probably does in very specific situations but otherwise no one cares
2020-12-19 12:06:22	CrystalMath	i see no reason for a DOS not to work with 4K sectors
2020-12-19 12:06:23	CrystalMath	tbh
2020-12-19 12:06:27	Kazinsal	guess it's time to write some PHY code...
2020-12-19 12:06:30	CrystalMath	i see no reason for a DOS not to work with UEFI
2020-12-19 12:06:34	CrystalMath	BIOS calls can be emulated
2020-12-19 12:06:51	clever	geist: i recently learned about performance issues with zfs, the pool is operating on 4k blocks, so a single stripe is 8k of data, and 4k of parity
2020-12-19 12:06:56	-->	di6mbav (~hjqRwbTq~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-19 12:06:57	CrystalMath	heck, there could even be a modern OS that emulates DOS
2020-12-19 12:07:00	CrystalMath	as its main thing
2020-12-19 12:07:01	geist	the later FATs can handle non 512 byte sectors i think, though i dunno if all drivers can
2020-12-19 12:07:13	clever	geist: except, my zfs volume for iscsi stuff, had 4k blocks, so that was 4k of data, and 4k of parity, and waste everywhere!
2020-12-19 12:07:33	geist	clever: side note are you able to get reasonable iscsi performance?
2020-12-19 12:07:44	geist	i've tried a few times to want to use it for my VMs but the performance just blows so bad
2020-12-19 12:07:50	clever	geist: between 20mb/sec and 100mb/sec, depending on other factors
2020-12-19 12:07:53	<--	CryptoDavid (uid14990@gateway/web/irccloud.com/x-tarruugflcmcjjat) has quit (Quit: Connection closed for inactivity)
2020-12-19 12:07:54	clever	over gigabit
2020-12-19 12:08:02	clever	switching the tgtd to aio mode helped massively
2020-12-19 12:08:04	geist	otoh it's entirely possible it has everything to do with my synology box having bad iscsi implementation or something
2020-12-19 12:08:34	clever	i suspect the server end isnt strong enough
2020-12-19 12:08:45	clever	dual-core server, 8-core client
2020-12-19 12:08:46	<--	dumenci (~lucid_0x8@188.253.235.217) has quit (Ping timeout: 256 seconds)
2020-12-19 12:08:47	geist	that's my guess, and/or it's doing iscsi on top of a fs, etc etc
2020-12-19 12:08:56	geist	vs say iscsi directly exposing a LVM partition
2020-12-19 12:09:16	geist	i've been told that works pretty well, and you can even do snapshotting and whatnot in LVM
2020-12-19 12:09:28	clever	by default, tgtd was using read/write syscalls in a blocking manner, on the same thread as the network protocol
2020-12-19 12:09:38	clever	so when the real disk io hangs, the network protocol hangs
2020-12-19 12:09:43	geist	what is tgtd? is that the iscsi server?
2020-12-19 12:09:46	clever	yeah
2020-12-19 12:09:53	clever	the client scsi layer then thinks the sata disk is hung, and tries to issue resets
2020-12-19 12:10:17	geist	so surprisingly what ended up working a lot bettter was just putting the vm files on NFS and using them directly
2020-12-19 12:10:18	clever	but i switched tgtd over to aio mode, so all write syscalls go into a queue, and it gets completion events later
2020-12-19 12:10:23	geist	ESXi and also qemu. *shrug*
2020-12-19 12:10:30	clever	i suspect that translates directly to scsi NCQ
2020-12-19 12:10:39	clever	so the client is aware that its pending, and the protocol is still responding
2020-12-19 12:11:11	clever	ive had a range of problems with nfs
2020-12-19 12:11:17	geist	though it's also possible the nfs stuff is mega unsafe because of caching and async writebacks end to end
2020-12-19 12:11:38	clever	1: if any disk claims >1tb free space, steam claims you have no free space
2020-12-19 12:11:49	clever	nfs into a multi-tb nas blows that limit several times over
2020-12-19 12:12:10	clever	2: steam has trouble with lock files on nfs
2020-12-19 12:12:24	geist	at the moment i just switched to running my VMs off a local nvme drive with btrfs for snapshotting. seems to work well enough. the disk images are mega fragmented because of COW, but then they seem to perform pretty well so shrug
2020-12-19 12:12:29	clever	3: a 32bit nfs client cant put 64bit inode's into a readdir() reply, EOVERFLOW
2020-12-19 12:12:41	clever	i use iscsi to get around all 3 of those bugs
2020-12-19 12:12:51	geist	makes sense
2020-12-19 12:13:09	clever	but only 1 of those is truely nfs's fault
2020-12-19 12:13:25	<--	di6mbav (~hjqRwbTq~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-19 12:13:27	clever	1 could happen if i ran steam directly on the nas
2020-12-19 12:13:43	clever	3 could happen if i was crazy enough to run a 32bit userland on a machine with xfs and >2tb
2020-12-19 12:14:14	geist	i've also been looking for some reason to buy some 10gbe gear, but i just haven't yet found one
2020-12-19 12:14:16	-->	doug16k (~dougx@198-91-149-79.cpe.distributel.net) has joined #osdev
2020-12-19 12:14:25	clever	nfs allows the storage to be on a decent machine, and the client to be crap
2020-12-19 12:14:27	geist	only real thing i can think of us 10gbe to the file serer
2020-12-19 12:14:40	clever	my LAN is a mess lately
2020-12-19 12:14:48	geist	doug16k: sup, havent seen ya in a while
2020-12-19 12:14:50	clever	the main gigabit switch died due to a power failure
2020-12-19 12:15:02	clever	but i have a second gigabit switch, that was only splitting a cord for the pi + desktop
2020-12-19 12:15:16	clever	ive wired the nas into that second switch, so desktop<->nas is full speed
2020-12-19 12:15:25	doug16k	hey, working on qemu info tlb a bit more. now showing all the levels: https://gist.github.com/doug65536/b30ab900473869d6afc4e8c5c047d6b5
2020-12-19 12:15:25	clever	but the internet still goes thru the 100mbit bottleneck
2020-12-19 12:15:26	bslsk05	​gist.github.com: gist:b30ab900473869d6afc4e8c5c047d6b5 · GitHub
2020-12-19 12:15:42	doug16k	you hate those names right geist?
2020-12-19 12:16:31	geist	heh yeah, but that's what intel calls em so there ya go!
2020-12-19 12:16:32	doug16k	PML4/PDPT/PD/PT
2020-12-19 12:16:37	geist	at least they're unambiguous, just icky
2020-12-19 12:16:50	geist	i like to say L0, L1, L2, etc but.... then you have to define the coordinate system
2020-12-19 12:16:54	doug16k	this supports PML5 too (la57)
2020-12-19 12:17:05	geist	hmm, what's the 5th one called?
2020-12-19 12:17:07	doug16k	which end is 0? the giant end?
2020-12-19 12:17:10	geist	PML5. oh yeah
2020-12-19 12:17:23	geist	arm numbers them 0 -> starting at the root
2020-12-19 12:17:36	geist	makes sense, in one way, since there's always a L0
2020-12-19 12:17:57	doug16k	ya I extended info tlb so you can force it to interpret them how you say. -2 -3 -4- -5 means no-pae, pae32, pae48, pae57
2020-12-19 12:17:57	clever	i think x86 was wanting to keep the size of a given layer the same?
2020-12-19 12:17:59	-->	bcos (~bcos@101.174.0.47) has joined #osdev
2020-12-19 12:18:05	geist	and since there can be a variable level of page tables based on all sorts of factors i guess its the only thing that makes sense
2020-12-19 12:18:07	clever	and extend it in the other direction, rather then renaming things
2020-12-19 12:18:41	geist	clever: i think the decision was made when they added PAE and then they were stuck with extending it
2020-12-19 12:18:42	doug16k	nopae/pae32/la48/la57 correspond to 2, 3, 4, 5 levels of tables
2020-12-19 12:19:00	geist	AMD was the one that started using numbers with PML4 so really they're the one that broke the pattern
2020-12-19 12:19:20	doug16k	so PML4 would be L0 on LA48 and it would be L1 on LA57?
2020-12-19 12:19:26	geist	right
2020-12-19 12:19:28	clever	geist: yeah, PAE would explain it, any non-PAE kernel uses the old names/sizes, and PAE is just wrapping and extending it
2020-12-19 12:19:34	doug16k	isn't that kind of bad though?
2020-12-19 12:19:49	geist	well that's my point. it's bad on one hand but consistent on another
2020-12-19 12:19:52	doug16k	shouldn't the small end be the fixed end?
2020-12-19 12:20:08	geist	from the hardwares point of view it starts at a root (0) and walks down
2020-12-19 12:20:13	doug16k	I see what you mean though yeah
2020-12-19 12:20:19	geist	so i think from an architecture point of view L0 -> L1 etc makes sense
2020-12-19 12:20:32	geist	and given a variable number of page table levels you always start at 0
2020-12-19 12:20:32	doug16k	the first fetch in a complete miss walk is L0
2020-12-19 12:20:52	clever	and doesnt arm have 2 L0's?
2020-12-19 12:20:55	clever	for userland and kernel
2020-12-19 12:20:58	geist	also i guess if you think of a large page as say terminating at L1 or L2, it doesn't really matter how many levels are below it
2020-12-19 12:21:03	geist	it's simply a L1 or L2 page
2020-12-19 12:21:24	geist	in arm those are called terminal page table entries
2020-12-19 12:21:26	doug16k	would you just understand by looking at my info tlb output what is going on?
2020-12-19 12:21:27	clever	arm's 2 L0 tables are also slightly complex in terms of alignment
2020-12-19 12:22:12	geist	and yeah arm has two of them. in 32bit arm it's not mandatory, you can define one covering the whole thing, but in 64bit if you want to access negative address space you *must* use the other page table
2020-12-19 12:22:44	geist	that's a case where conceptually the 64bit stuff is cleaner. there are simple two page table structures, one for both halves
2020-12-19 12:22:44	clever	i think the alignment rules, are to treat both L0 tables as being full size, and align the base correctly
2020-12-19 12:22:55	clever	but only the bottom-half of userland, and top-half of the kernel tables get used
2020-12-19 12:23:01	clever	so you can then reuse the other half of the table
2020-12-19 12:23:14	geist	clever: need to be more precise there, that's 32bit arm. doesn't work the same way on 64bit
2020-12-19 12:23:18	<--	bcos (~bcos@101.174.0.47) has quit (Ping timeout: 260 seconds)
2020-12-19 12:23:19	clever	so its more like aligning the kernel table to X + y
2020-12-19 12:23:36	clever	yeah, with the sheer size of 64bit, i can see them having to rewrite those rules
2020-12-19 12:23:57	geist	well, the rules are the same, but the two address spaces aren't contiguous in 64bit
2020-12-19 12:24:04	geist	so they dont have the 'one stops here other starts there' thing
2020-12-19 12:24:41	geist	what happens is the rule is broken down further. for example o 4k page granules if youhave set it to have a full 48 bit address space for user space
2020-12-19 12:24:58	geist	then the L0 user page table is 'full'. ie all 512 entries are occupied
2020-12-19 12:25:22	geist	if you configured it for say 47 bits then only half of the 512 are used. the others are simply never referenced
2020-12-19 12:25:36	geist	and so on. 46 bit, 1/4 of L0 page table is used, etc
2020-12-19 12:25:38	clever	can userland be 48bit, but kernel be 47bit?
2020-12-19 12:25:48	-->	Jayprakash12345 (~jayprakas@wikimedia/Jayprakash12345) has joined #osdev
2020-12-19 12:25:50	clever	or less, depending on needs
2020-12-19 12:25:51	geist	right. now... kernel can have a different size
2020-12-19 12:25:58	geist	they are completely independently configured
2020-12-19 12:26:22	geist	though same thing, if you have say a 48 bit kernel space, then the entire L0 table is used
2020-12-19 12:26:26	clever	and due to the hw being say 48bit based, there is a giant hole between user and kernel, that nobody can map
2020-12-19 12:26:28	geist	but if you have a 47 bit one, then half the table is used
2020-12-19 12:26:33	geist	but... it's the *second* half of the table
2020-12-19 12:26:38	clever	ahh
2020-12-19 12:26:43	clever	so you could reuse that first half
2020-12-19 12:26:52	clever	which makes the alignment tricky like 32bit
2020-12-19 12:26:55	geist	yah. of coruse there's really no reason at all to do that
2020-12-19 12:27:10	geist	generally you configure the size of the address space to fully utilize the page tables
2020-12-19 12:27:25	geist	so, 48, 39, 30 for example. no real reason to configure something for 45 or 42 bits or so
2020-12-19 12:27:30	clever	so 64bit can fully use that table
2020-12-19 12:27:42	clever	but 32bit will half part of the table free due to the split
2020-12-19 12:27:53	geist	*shrug*? I guess?
2020-12-19 12:27:58	geist	like, i dunno what you'd actually do with that
2020-12-19 12:28:15	clever	ive heard that you can put the task struct and pagetable into the same 4096 byte page
2020-12-19 12:28:30	geist	i guess? seems like a layering violation
2020-12-19 12:28:31	clever	and due to the split, the MMU never reads the area with the struct
2020-12-19 12:28:34	doug16k	what about speculation though
2020-12-19 12:29:01	clever	if the split says the lower 3gig used the userland tables, and the upper 1gig is kernel tables
2020-12-19 12:29:06	doug16k	I wouldn't want anything weird in address space, even if I believed it never accessed it
2020-12-19 12:29:10	clever	then you can never read from the upper 1/4th of the page table
2020-12-19 12:29:15	clever	userland page table
2020-12-19 12:29:17	geist	yeah sure, on 32bit arm
2020-12-19 12:29:32	geist	then yeah. on 64bit there's no real reason to not utilize the full address space, basically
2020-12-19 12:29:42	clever	yeah
2020-12-19 12:29:43	geist	er utilize the full L0 page table
2020-12-19 12:29:44	doug16k	if the hardware enforced it, then that's great
2020-12-19 12:30:02	geist	where it gets odd is say you have a 64bit kernel with a 32bit user space
2020-12-19 12:30:22	geist	well, you can and probably shold configure each process for 32 bits aspace, since the code will not fault outside of that so no point with the extra levels
2020-12-19 12:30:25	clever	geist: oh, could that allow the full 4gig range for userland?
2020-12-19 12:30:39	geist	but... that gets you 3 levels of page table, with the top one having 4 entries... just like PAE on x86
2020-12-19 12:31:05	geist	and snce the page tables have to be 12 bit aligned all the time you end up with this wasted space
2020-12-19 12:31:33	geist	ideally you can say configure it for 1GB user, then you can configure the address space for 30 bits, which lines up perfectly with a 2 level page table
2020-12-19 12:31:38	geist	12 + 9 + 9 == 30
2020-12-19 12:31:55	geist	may well be that's precisely what linux does by default when running a 32bit process under a 64bit kernel
2020-12-19 12:32:36	geist	so that's neat, you actually get less page table fetches when running 32bit code and whatnot
2020-12-19 12:32:40	doug16k	they give up half the address space for that?
2020-12-19 12:32:53	geist	also something that's wasted on x86, since when running a 32bit process the cpu just simply never fetches outside of 0-4GB
2020-12-19 12:33:07	-->	di6mbav4pephrgjd (~uunLgRSB~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-19 12:33:07	doug16k	or give up 3/4 if you want to look at it less generously
2020-12-19 12:33:17	geist	doug16k: i have no idea, but you could
2020-12-19 12:33:29	clever	another problematic area is the read cache
2020-12-19 12:33:45	clever	i think 32bit linux keeps large chunks of the read cache unmapped, even to kernel space
2020-12-19 12:33:46	geist	would have one less level of page table fetches. or you can allocate a top L0 level and only use 4 entries in it, just like PAE
2020-12-19 12:33:54	clever	because the read cache doesnt fit in the 1gig kernel split
2020-12-19 12:34:00	doug16k	isn't that upper level cached so aggressively it hardly even counts?
2020-12-19 12:34:22	geist	doug16k: probably yeah. seems a waste of a perfectly good page
2020-12-19 12:34:23	doug16k	the 4 entries in PAE I mean
2020-12-19 12:34:26	clever	doug16k: i mean the disk io cache
2020-12-19 12:34:32	geist	what arm *does* let you do is define the L0 as up to N contiguous pages
2020-12-19 12:34:45	clever	zfs then has major trouble on 32bit, because it expects the whole read cache to be mapped
2020-12-19 12:35:00	geist	so you can do this: 32 bits of address space, where the top level page table is actually 4 consequetive 4K pages, and thus a single 16K L0 page table
2020-12-19 12:35:21	geist	provided you can allocate 16K physical that avoids one level of page table traversal, but gets you the same thing
2020-12-19 12:35:34	geist	so it looks like 12 + 9 + (9 + 2)
2020-12-19 12:35:55	geist	i think arm calls that 'combined page table'
2020-12-19 12:36:23	geist	only works at the L0 page table, and only up to i think 16 , but it gets you up to 4 more bits of reach without using another level
2020-12-19 12:36:35	geist	could be linux does that
2020-12-19 12:38:28	geist	seems easy enough to find out. just need to trap linux in qemu while running some 32bit process and inspect the control regs
2020-12-19 12:42:45	<--	Sheilong (uid293653@gateway/web/irccloud.com/x-lgxaqgimsgvlotpk) has quit
2020-12-19 12:47:54	--	irc: disconnected from server
2020-12-20 03:36:55	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-20 03:36:55	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-20 03:36:55	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-20 03:36:55	--	Channel #osdev: 283 nicks (1 op, 0 voices, 282 normals)
2020-12-20 03:37:19	-->	sangoma (~zeus@102.82.175.206) has joined #osdev
2020-12-20 03:37:28	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-20 03:37:58	doug16k	yeah my partition probe code doesn't care really what device it is. I can mount iso on a disk drive, and fat32 on a cdrom
2020-12-20 03:38:27	doug16k	why would it care?
2020-12-20 03:39:00	doug16k	fat32 with 2K sectors is pretty weird but should work
2020-12-20 03:41:57	doug16k	ha, if we had optical drives as boot, the limit would be 4x higher, 8TB reach with UINT32_MAX LBA
2020-12-20 03:43:00	doug16k	too bad optical drives aren't even close to that size
2020-12-20 03:43:34	doug16k	it's the curse of 512 still with us
2020-12-20 03:44:59	doug16k	so we get whatever bits, plus nine, for the foreseeable future
2020-12-20 03:49:21	mrvn	Some systems still can't both with harddisks with 4k logical sectors.
2020-12-20 03:50:03	mrvn	And optical disks could be 2516 byte sectors or something. That gets really strange.
2020-12-20 03:53:53	-->	attah (~attah@h-158-174-22-49.NA.cust.bahnhof.se) has joined #osdev
2020-12-20 04:06:45	<--	Dreg (~Dreg@fr33project.org) has quit (Read error: Connection reset by peer)
2020-12-20 04:06:46	-->	S_Gautam (uid286066@gateway/web/irccloud.com/x-xnaqwtbolfwqehqq) has joined #osdev
2020-12-20 04:07:55	-->	Dreg (~Dreg@fr33project.org) has joined #osdev
2020-12-20 04:10:57	zxq2	'low-level systems programming' -- is there a common term used in job listings for software engineers that designates this skillset, other than the one i listed?
2020-12-20 04:14:48	GeDaMo	Embedded programming?
2020-12-20 04:17:30	zxq2	yeah, kind of. seems best to search for low-level languages to find jobs that fall into this category, like C or rust, etc.
2020-12-20 04:20:45	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Ping timeout: 240 seconds)
2020-12-20 04:34:15	<--	sangoma (~zeus@102.82.175.206) has quit (Ping timeout: 264 seconds)
2020-12-20 04:43:46	<--	Halofreak1990 (~FooBar247@84-24-167-61.cable.dynamic.v4.ziggo.nl) has quit (Ping timeout: 240 seconds)
2020-12-20 05:03:40	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-20 05:22:11	-->	spareproject (b018826b@unaffiliated/spareproject) has joined #osdev
2020-12-20 05:40:22	-->	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has joined #osdev
2020-12-20 05:46:04	-->	lordyod (~lordyod@c-67-169-144-132.hsd1.ca.comcast.net) has joined #osdev
2020-12-20 05:49:30	<--	johnjay (~pi@38.120.10.99) has quit (Ping timeout: 256 seconds)
2020-12-20 05:53:16	<--	spareproject (b018826b@unaffiliated/spareproject) has quit (Remote host closed the connection)
2020-12-20 05:54:24	--	irc: disconnected from server
2020-12-20 05:54:58	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-20 05:54:58	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-20 05:54:58	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-20 05:54:58	--	Channel #osdev: 285 nicks (1 op, 0 voices, 284 normals)
2020-12-20 05:55:33	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-20 05:58:41	<--	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has quit (Quit: adu)
2020-12-20 06:00:41	--	irc: disconnected from server
2020-12-20 06:18:28	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-20 06:18:28	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-20 06:18:28	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-20 06:18:28	--	Channel #osdev: 285 nicks (1 op, 0 voices, 284 normals)
2020-12-20 06:19:01	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-20 16:45:14	--	irc: disconnected from server
2020-12-20 16:45:50	--	irc: disconnected from server
2020-12-20 16:46:46	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-20 16:46:46	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-20 16:46:46	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-20 16:46:46	--	Channel #osdev: 280 nicks (1 op, 0 voices, 279 normals)
2020-12-20 16:47:34	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-20 16:49:04	<--	Goplat (~Goplat@reactos/developer/Goplat) has quit (Remote host closed the connection)
2020-12-20 16:58:35	--	irc: disconnected from server
2020-12-20 16:59:35	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-20 16:59:35	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-20 16:59:35	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-20 16:59:35	--	Channel #osdev: 279 nicks (1 op, 0 voices, 278 normals)
2020-12-20 17:00:08	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-20 17:03:20	--	irc: disconnected from server
2020-12-20 17:03:50	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-20 17:03:50	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-20 17:03:50	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-20 17:03:50	--	Channel #osdev: 279 nicks (1 op, 0 voices, 278 normals)
2020-12-20 17:04:24	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-20 17:06:21	-->	GeDaMo (~GeDaMo@unaffiliated/gedamo) has joined #osdev
2020-12-20 17:09:04	<--	knebulae (~nebulae@c-73-145-147-252.hsd1.mi.comcast.net) has quit (Read error: Connection reset by peer)
2020-12-20 17:21:01	<--	superleaf1995 (bdb3cb73@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.203.115) has quit (Quit: Connection closed)
2020-12-20 17:27:27	<--	CrystalMath (~coderain@reactos/developer/theflash) has quit (Quit: May we live long and die out | http://vhemt.org/)
2020-12-20 17:51:58	pitust	my kernel has a race
2020-12-20 17:52:02	<--	pitust (~pitust@37.228.231.89) has quit (Quit: Reconnecting)
2020-12-20 17:52:17	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-20 17:57:58	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-20 18:06:22	<--	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has quit (Quit: adu)
2020-12-20 18:11:16	pitust	how to force section alignments in ld?
2020-12-20 18:11:21	<--	pitust (~pitust@37.228.231.89) has quit (Quit: leaving)
2020-12-20 18:11:40	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-20 18:11:49	pitust	how to force alignment in ld?
2020-12-20 18:13:05	pitust	to make the loads actually 4k-aligned
2020-12-20 18:13:40	geist	on an output section you can add an ALIGN(N) directive
2020-12-20 18:13:43	geist	iirc it looks somehting like
2020-12-20 18:13:49	geist	.text : ALIGN(4096) { ....
2020-12-20 18:14:16	pitust	oh thanks a lot
2020-12-20 18:14:19	geist	i think that's what you are talking baout? or is it just a single data structure
2020-12-20 18:14:29	geist	if you just wnt some single data sturcture aligned you can simply request that
2020-12-20 18:14:33	geist	per variable
2020-12-20 18:16:29	geist	that's almost certainly what you actually want. aligning output data structures is usually only useful for ELF loaders and whatnot
2020-12-20 18:17:42	<--	sprocklem (~sprocklem@unaffiliated/sprocklem) has quit (Ping timeout: 256 seconds)
2020-12-20 18:23:33	clever	note to self, dont use arm32 strace on arm64 binaries
2020-12-20 18:23:42	clever	it names every syscall the wrong way
2020-12-20 18:24:02	-->	attah (~attah@h-158-174-22-49.NA.cust.bahnhof.se) has joined #osdev
2020-12-20 18:35:09	moon-child	at one point, it was possible to use the legacy form 'int 0x80' on amd64 linux.  But strace got all the syscalls wrong
2020-12-20 18:36:42	clever	moon-child: i have also heard of using int 0x80 syscalls, in a windows binary, then trapping the exception
2020-12-20 18:36:49	pitust	wow
2020-12-20 18:36:51	clever	but if that binary was ran under wine, the syscall would actually work
2020-12-20 18:36:59	pitust	heh
2020-12-20 18:37:08	clever	but you dont even need such hacks
2020-12-20 18:37:17	pitust	so you can make macos-style fat binaries
2020-12-20 18:37:21	pitust	win32/linux
2020-12-20 18:37:26	clever	the win32 function to query a symbol in a binary, leaks the existance (and address) of linux symbols
2020-12-20 18:37:38	clever	so you can already interface with linux functions like that
2020-12-20 18:37:58	clever	winelib also lets you create things that are technically linux binaries, but link into wine at compile time
2020-12-20 18:38:05	clever	so you can still use the win32 api
2020-12-20 18:38:26	clever	i think the teamviewer client is based on that
2020-12-20 18:41:46	moon-child	pitust: I guess the main purpose was to detect if you were running under wine
2020-12-20 18:42:04	moon-child	even if the leak were actively plugged
2020-12-20 18:42:40	moon-child	there was a recent patch proposed for linux, basically to let wine efficiently trap windows programs that performed syscalls.  They aren't supposed to (supposed to go through ntdll), but some did it anyway
2020-12-20 18:43:58	clever	moon-child: ive heard that both darwin and windows dont have a fixed syscall table
2020-12-20 18:44:05	clever	and they renumber syscalls whenever they feel like it
2020-12-20 18:44:15	moon-child	clever: that is correct
2020-12-20 18:44:26	clever	but if your using the proper ntdll.dll (from system32), youll never notice
2020-12-20 18:44:42	clever	ive also heard that at one time, buffer size checks was done in userland, within ndtll.dll
2020-12-20 18:44:52	clever	so if you ran the syscall directly, you could trivially buffer overflow the kernel
2020-12-20 18:45:01	moon-child	ntdll is not technically supported or stable.  But in practice it doesn't change.  Syscall numbers do
2020-12-20 18:45:11	moon-child	which means that apps that perform syscalls directly don't work on most versions of windows
2020-12-20 18:45:26	clever	totally different from linux, where you can take a static binary from the 2.4 era, and still run it
2020-12-20 18:46:17	geist	fwiw zircon doesn't either. the syscall mechanism is 100% systemcontrolled
2020-12-20 18:46:40	moon-child	clever: in theory yeah.  In practice there's a bunch of userspace stuff that you need that's broken compat
2020-12-20 18:46:46	moon-child	opengl, libc...
2020-12-20 18:46:46	geist	in fact you cannot emit your own syscall or svc instruction, the originating PC must be in the vdso, which is a piece of kenrel provided code
2020-12-20 18:46:56	moon-child	geist: openbsd does the same thing
2020-12-20 18:46:57	clever	moon-child: static binary, all of that is in the program
2020-12-20 18:47:15	moon-child	clever: graphics driver can't be linked in
2020-12-20 18:47:16	geist	yah, it greatly frees the implementatoin to do what it needs to
2020-12-20 18:47:19	clever	geist: heh, nice way to enforce that!
2020-12-20 18:47:36	geist	it's not pefect since nothing keeps you from branching into the vdso at the right spot
2020-12-20 18:47:39	clever	moon-child: it would have to lack gpu accel, but text-only stuff is more common i would think
2020-12-20 18:47:49	geist	but it at least keeps programs from embedding their own syscalls
2020-12-20 18:48:02	clever	geist: ah yeah, setup all of the args then jump to the syscall opcode in the vdso, fugly!
2020-12-20 18:48:30	geist	sice the vdso is mapped into a random spot in the binary every time you'd hvae to at least do it all dynamically too
2020-12-20 18:48:40	moon-child	clever: e.g. lots of old loki ported games are difficult to get working nowadays (though not impossible).  I agree text-only stuff is mroe common, but text-only stuff is also more frequently opensource so it's easier to just recompile
2020-12-20 18:49:17	clever	https://github.com/raspberrypi/rpi-eeprom/blob/master/firmware/vl805
2020-12-20 18:49:19	bslsk05	​github.com: rpi-eeprom/vl805 at master · raspberrypi/rpi-eeprom · GitHub
2020-12-20 18:49:26	clever	moon-child: the only example i can think of right now
2020-12-20 18:49:42	clever	a static armv7 binary, that will poke at pci registers to re-flash the vl805 spi chip
2020-12-20 18:49:45	clever	closed-source
2020-12-20 18:50:16	moon-child	another example: https://checkra.in/
2020-12-20 18:50:16	bslsk05	​checkra.in: checkra1n
2020-12-20 18:50:27	clever	as long as the basic io syscalls, and pci api are the same, it will continue to work
2020-12-20 18:50:33	clever	until arm32 support is removed
2020-12-20 18:50:43	clever	however, i have one report, that it even works under qemu-user-arm, lol
2020-12-20 18:50:51	clever	on an x86 machine, with a vl805 on a pcie slot!
2020-12-20 18:51:07	moon-child	that's probably never.  32-bit x86 will be gone pretty soon, but arm is big for embedded and you don't need 64bit
2020-12-20 18:51:18	moon-child	s/and/where/
2020-12-20 18:51:35	clever	some chips are throwing away arm32 in kernel space
2020-12-20 18:51:44	clever	and many aarch64 servers you can rent online, lack arm32 entirely
2020-12-20 20:58:23	--	irc: disconnected from server
2020-12-20 20:59:32	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-20 20:59:32	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-20 20:59:32	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-20 20:59:33	--	Channel #osdev: 276 nicks (1 op, 0 voices, 275 normals)
2020-12-20 21:00:21	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-20 21:03:41	<--	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has quit (Quit: WeeChat 3.0)
2020-12-20 21:07:52	-->	pitust (~pitust@89.19.88.76) has joined #osdev
2020-12-20 21:23:02	-->	isaacwoods (~isaacwood@host109-146-213-228.range109-146.btcentralplus.com) has joined #osdev
2020-12-20 21:29:03	-->	bcos_ (~bcos@101.174.155.148) has joined #osdev
2020-12-20 21:32:31	sortie	Ah yes, a non-canonical retcon
2020-12-20 21:50:44	<--	pitust (~pitust@89.19.88.76) has quit (Ping timeout: 246 seconds)
2020-12-20 21:54:48	<--	sangoma (~zeus@102.82.175.206) has quit (Quit: WeeChat 2.9)
2020-12-20 21:59:54	doug16k	if you dump memory at 0, you will see 0xf000ff53f000e2c3 is at address 8. you probably have a null stack pointer, or close to it
2020-12-20 22:00:17	geist	also a good reason to endeavor to make 0 not mapped
2020-12-20 22:00:40	doug16k	yes
2020-12-20 22:01:02	geist	that looks like an instruction though i think
2020-12-20 22:01:08	geist	stuff with f0 in it is one of them prefixes
2020-12-20 22:01:31	mawk	in armv7-m, in my C code I have ((void (*)(void))p)(); as a means to jump somewhere; but then when I debug my target it's like this:
2020-12-20 22:01:33	mawk	=> 0xe6e72:     ldmia.w sp!, {r4, r5, r6, lr}
2020-12-20 22:01:35	mawk	   0xe6e76:     bx      r12
2020-12-20 22:01:37	mawk	why would the ldmia come here
2020-12-20 22:02:19	geist	it's tail calling your function so that whatever you call returns back to the caller of this function
2020-12-20 22:02:25	geist	clever compilers basically
2020-12-20 22:02:30	mawk	too clever then
2020-12-20 22:02:33	mawk	it's not supposed to do that
2020-12-20 22:02:38	-->	dennis95 (~dennis95@mue-88-130-62-169.dsl.tropolys.de) has joined #osdev
2020-12-20 22:02:41	mawk	there's no stack at this point
2020-12-20 22:02:43	mawk	thanks
2020-12-20 22:02:43	geist	basically if the last thing a function does is call another function it does a tail call, where it can directly branch to it
2020-12-20 22:02:50	mawk	I'll do it in assembly directly
2020-12-20 22:02:58	geist	waaait okay, so what ar eyou doing here?
2020-12-20 22:03:05	geist	running C code without stack is *not* legal
2020-12-20 22:03:17	geist	i mean okay, yeah doing it in asm is probably the solution
2020-12-20 22:03:28	mawk	it's not really without stack, it's just after setting a brand new stack at the very top of the ram
2020-12-20 22:03:36	mawk	but then there's nothing stacked into it, so the ldmia hardfaults
2020-12-20 22:03:42	geist	that ldmia was probably because it stored the 4 regs in the first place, at the start of the function
2020-12-20 22:03:54	geist	aah are you fiddling with the stack pointer in C code?
2020-12-20 22:04:02	mawk	of course
2020-12-20 22:04:05	geist	yah, dont :)
2020-12-20 22:04:07	mawk	lol
2020-12-20 22:04:26	mawk	it's not my code, it's a bootloader provided by my hardware vendor which I'm trying to debug
2020-12-20 22:04:32	geist	for precisely this reason. you can do two things: if you really dont care about the rest of the current stack, then write a piece of inline asm that sets sp and then immediately branches to the function
2020-12-20 22:04:36	geist	so that there's nothing between
2020-12-20 22:04:38	mawk	but yeah they use some __set_MSP() macro that does some intrinsic assembly
2020-12-20 22:04:44	-->	Thedarkb (~beno@80.233.34.145) has joined #osdev
2020-12-20 22:04:46	geist	oh god, that's so not okay
2020-12-20 22:05:11	geist	the cleaner solution is to make a little asm function like switch_stack_and_call(void *sp, void *function) or something
2020-12-20 22:05:29	mawk	yeah
2020-12-20 22:05:37	geist	basically jam sp and call the function, and leave a little infinite loop or something if it happens to return
2020-12-20 22:06:36	geist	while you're in there look at all places that set the stack pointer with that __set_MSP() and mark them as a bug
2020-12-20 22:06:46	geist	there's basically never a good place to do that in C code. ever.
2020-12-20 22:06:55	mawk	lol
2020-12-20 22:07:02	geist	if it works it's simply lucky
2020-12-20 22:07:02	mawk	thanks
2020-12-20 22:07:08	mawk	yeah
2020-12-20 22:08:10	geist	as a general rule branching or calling something in inline asm is a Bad Idea, but you get a pass if the intention is to never return
2020-12-20 22:08:30	geist	since it just leaves a smoldering wreck that was the old function
2020-12-20 22:08:46	mawk	yeah anyway with the stack changed there is no way to return right?
2020-12-20 22:08:51	geist	right
2020-12-20 22:09:34	geist	you could save a bunch of state on the old stack (in an asm function) and then load some new state and stack and call the new function and provide a way back later if you really have to
2020-12-20 22:09:40	geist	but... omg you just implemented context switching :)
2020-12-20 22:09:48	mawk	lol
2020-12-20 22:09:49	j`ey	geist made me rewrite my context switch from inline asm to a asm file
2020-12-20 22:10:27	geist	yah asm functions are nice to do that work in too, since the calling convention to call itin the first place means about half the regs dont have to be saved, etc
2020-12-20 22:10:36	doug16k	0xf000ff53f000e2c3 looks like a pair of real-mode IDT entries to me, both have cs=0xf000
2020-12-20 22:10:36	geist	it makes for a nice clean break
2020-12-20 22:10:50	mawk	I don't know why but libraries provided my microcontroller vendors are always broken in one or another way
2020-12-20 22:10:52	geist	doug16k: ooooh, hence address 0 huh
2020-12-20 22:10:56	doug16k	yeah
2020-12-20 22:11:02	mawk	but I guess their job is making chips, not software, so they don't assign many resources to it
2020-12-20 22:11:05	geist	mawk: oh. thats a universal constant mawk
2020-12-20 22:11:11	geist	yah. vendor code is *always* bad
2020-12-20 22:11:25	geist	or more properly Good Vendor Code is very rare
2020-12-20 22:11:51	geist	my theory (and apologies to folks that work in these environments) is the good engineers dont end up working for those companies
2020-12-20 22:12:09	geist	and/or there's mostly not a culture of doing a good job. the point is to sell chips, as you said
2020-12-20 22:12:24	geist	so the quicker you can get the nasty bits of having to write software (ick) to support the chip the better
2020-12-20 22:12:55	geist	i have a very short list of vendors that do decent work in my experience, and a super long list of omg
2020-12-20 22:13:08	mawk	lol
2020-12-20 22:13:36	geist	for arm cortex microcontrollrs, i've had *okay* luck with STs libs, and fairly okay luck with TI
2020-12-20 22:13:46	geist	i was impressed with silicon labs the one and only time i worked with their stuff
2020-12-20 22:13:51	geist	i hear nordic has decent sw libs
2020-12-20 22:13:55	j`ey	that was the gecko stuff?
2020-12-20 22:13:59	mawk	yeah I'm using nordic
2020-12-20 22:14:16	mawk	ST HAL libraries are hated by everyone but I guess they work, aesthetics doesn't come firste
2020-12-20 22:14:27	geist	trouble with some of them is they try too much. one of the things i've always liked about ST is they simply provide some libs to help your driver development
2020-12-20 22:14:38	j`ey	yeah, I was look at silicon labs/gecko a while about. I went with Freescale n the end
2020-12-20 22:14:40	geist	at least they used to. it's just helpers you build your driver out of. that's all i want
2020-12-20 22:14:59	mawk	yeah the st LL libraries are nice for that, low level enough as the name implies
2020-12-20 22:15:12	geist	atmel tended to put together crummy buggy versions, and TI microcontrollers tried to do too much. they had their own interrupt management, driver management api, etc
2020-12-20 22:15:23	geist	whcih i dont want and have to work around
2020-12-20 22:15:42	geist	j`ey: this was a long time ago, about 8 years back. was for the silabs... oh what was that chip
2020-12-20 22:15:42	mawk	the weird thing is nordic is too much choice of what to use
2020-12-20 22:15:57	geist	but all in all the silabs cpu i was working with was very well designed, mostly bug free, and their libs were nice. they had good support
2020-12-20 22:16:15	mawk	they have two different SDKs, then in the most well known one "nrf5 sdk" they have 4 different driver APIs at various (sometimes conflicting) low-levelness
2020-12-20 22:16:37	mawk	some are marked "legacy" in the docs but are still used in the examples
2020-12-20 22:16:40	geist	j`ey: hmm, yeah gecko is their new one. this was a much earlier gen. i dunno if ti's even the same silabs to be honest
2020-12-20 22:17:50	geist	ah yes... Precision 32. SIm3Lxxx i think
2020-12-20 22:17:57	geist	was basically their first MCUs it looks like. 2012
2020-12-20 22:18:15	geist	bascally a cortex-m3 + a fairly generically programmable radio iirc. or we were using an external radio
2020-12-20 22:18:18	geist	from silabs
2020-12-20 22:18:29	mawk	normally I'm an unconditional st fanboy but I have to use bluetooth this time and wanted all-in-one soc for it, so took nRF52840 which is quite impressive in what it can do, basically everything but wifi
2020-12-20 22:18:46	geist	mawk: yah a buddy of mine is always sending patches for nordic to my os project
2020-12-20 22:18:58	geist	i haven't yet sit down to hack on it, but he uses it for various things so yay
2020-12-20 22:19:32	geist	nrf52xxx and nrf51xxx support it seems
2020-12-20 22:19:38	mawk	ah yes so the same one
2020-12-20 22:19:41	mawk	more or less
2020-12-20 22:20:21	j`ey	geist: for work or fun?
2020-12-20 22:20:27	mawk	the 52840 can talk pretty much any 2.4GHz protocol, zigbee, thread, ant, 6Lowpan, raw 802.15.4, bluetooth, "enhanced shockburst", and so on
2020-12-20 22:20:33	j`ey	(the nordic LK patches)
2020-12-20 22:20:40	geist	j`ey: the silabs stuff was for work, but nordic for fun i think
2020-12-20 22:20:51	geist	https://github.com/littlekernel/lk/tree/master/platform/nrf52xxx and the nrf51xxx stuff
2020-12-20 22:20:52	bslsk05	​github.com: lk/platform/nrf52xxx at master · littlekernel/lk · GitHub
2020-12-20 22:21:28	mawk	ah it uses the libs from nordic
2020-12-20 22:21:32	sortie	Hiya
2020-12-20 22:21:37	geist	yah, over in https://github.com/littlekernel/lk/tree/master/external/platform/nrfx
2020-12-20 22:21:37	bslsk05	​github.com: lk/external/platform/nrfx at master · littlekernel/lk · GitHub
2020-12-20 22:21:47	j`ey	oh theyre a Googler too
2020-12-20 22:21:51	geist	yah
2020-12-20 22:22:17	sortie	G has infiltrators everywhere, you never know who, best beware!
2020-12-20 22:22:26	geist	mwahaha
2020-12-20 22:23:17	j`ey	infact someone that used to work on the team I was on before, now works on fuchsia!
2020-12-20 22:23:24	geist	oh yeah?
2020-12-20 22:23:42	mawk	if I clobber the stack when setting msp using an intrinsic, does it work?
2020-12-20 22:23:57	mawk	no idea if it's possible with arm intrinsics
2020-12-20 22:24:00	geist	'work' is sort of a floating concept
2020-12-20 22:24:05	mawk	lol
2020-12-20 22:24:20	geist	like the instruction will run most likely (though i haven't paged in the details of cortex-m in a while)
2020-12-20 22:24:45	geist	i forget how the SP banking stuff works in cortex-m but you can almost certainly just set the stack pointer like you can on most sane architectures
2020-12-20 22:25:20	geist	but in any arch anywhere if you dork with the stack pointer in any way other than reading it while in C you're gonna be in a bad place pretty fast
2020-12-20 22:25:20	mawk	yeah
2020-12-20 22:25:22	mawk	   0xe6e6c:     msr     MSP, r4
2020-12-20 22:25:49	mawk	yeah I'll just do it in assembly then
2020-12-20 22:26:25	geist	yah i fortget precisely how MSP worked
2020-12-20 22:27:12	geist	it's most likely an alias for the real stack pointer or something
2020-12-20 22:27:37	<--	Halofreak1990 (~FooBar247@84-24-167-61.cable.dynamic.v4.ziggo.nl) has quit (Ping timeout: 240 seconds)
2020-12-20 22:27:40	geist	there's a bunch of shenanigans like that in cortex-m. it's not a *bad* architecture, but it's highly tuned for a specific use case and has some really weirdass edge cases
2020-12-20 22:30:46	j`ey	geist: do you remember which setting fuchsia uses for SP_ELx?
2020-12-20 22:30:58	j`ey	err, I mean SPSEL
2020-12-20 22:31:04	geist	yep. it uses the 'standard' 'follow the EL'
2020-12-20 22:31:36	geist	funny i have a whole doc internally about potentially switching to the other SPSEL as a mechanism to detect stack overflows
2020-12-20 22:31:55	geist	but yah the default, and probably what you should do is simply leave it at 'SP is whatever the EL you're in'
2020-12-20 22:32:01	geist	thats easy, straightforward,
2020-12-20 22:32:31	geist	for the most part all of the low level arm64 code was written by me so i'm pretty familiar with that stuff
2020-12-20 22:33:35	mawk	I found something funny
2020-12-20 22:33:53	mawk	the bug I found is in precompiled version of the buggy code; but when I compile it myself the ldmia is gone
2020-12-20 22:34:14	mawk	because some function that was inlined in the precompiled version is not inlined when I compile it myself
2020-12-20 22:34:22	mawk	then it works better (still crashes in another part of the code though)
2020-12-20 22:35:25	mawk	and this is the bootloader component, supposed to be super extra robust code
2020-12-20 22:35:29	mawk	thanks nordic
2020-12-20 22:36:07	geist	noice
2020-12-20 22:36:37	geist	hopefully not in rom. i've had to punch out some code for ROM before and it's a pretty unnerving experience
2020-12-20 22:36:50	j`ey	lol loading the armarm i macOS Preview.app froze my computer for a bit >_<
2020-12-20 22:37:08	geist	yah, sadly preview.app is still one of the best pdf viewers i know
2020-12-20 22:37:15	geist	but it definitely chews on things a while
2020-12-20 22:37:32	geist	on windows it has degraded to using chrome for pdf viewing, since acrobat reader is total garbage now
2020-12-20 22:37:49	geist	it literally crashes on me when opening huge docs like the arm arm or a unified intel or amd pdf
2020-12-20 22:38:11	geist	on linyux i'm using something or other, but it gets so slow it takes a second or two to switch pages
2020-12-20 22:38:42	doug16k	if you have a lot of RAM, Okular can be configured to be greedy with memory and is pretty snappy, particularly "find text"
2020-12-20 22:38:49	j`ey	there should be a version without the aarch32 parts
2020-12-20 22:39:08	geist	yah one of those things i need to look into: finding a better pdf viewer for windows and linux
2020-12-20 22:39:18	geist	the linux one i have on my workstation is good enough, but still not fantastic
2020-12-20 22:39:28	geist	but omg stable is mandatory. please please dont crash
2020-12-20 22:39:54	doug16k	I can't remember Okular ever crashing or malfunctioning at all
2020-12-20 22:40:03	geist	at some point acrobat reader on windows literally started crashing after a bit of use, and thus its totally useless
2020-12-20 22:40:20	geist	i uninstalled it and have been using the built in viewer on chrome, which is only okay.
2020-12-20 22:41:04	geist	though the only time i ever open the arm arm on windows is when someone asks a question here
2020-12-20 22:41:44	geist	honestly though... chrome pdf viewer is pretty good. i opened the arm arm here in about 5 seconds and can scrub around at will. soooo i guess that's actually pretty great
2020-12-20 22:42:20	mawk	I was about to say "I heard good of sumatra pdf viewer"
2020-12-20 22:42:22	geist	it is missing one fatal flaw (for the ARM ARM at least). there's no back support for internal hyperlinks. preview.app does a great job with that
2020-12-20 22:42:27	mawk	but then the better question is "why windows"
2020-12-20 22:42:40	geist	it's just whatever i'm booted into at the time
2020-12-20 22:43:07	mawk	I lobbied for a year my boss to let me install linux on my work pc
2020-12-20 22:43:09	doug16k	2 sec to open intel SDM here (4670 pages)
2020-12-20 22:43:10	j`ey	an html version might be better, dunno
2020-12-20 22:43:14	geist	the ARM ARM is very well internally hyperlinked. really the only way to use it, since the structure is pretty garbage otherwise
2020-12-20 22:43:15	mawk	but probably in a company like yours that doesn't work
2020-12-20 22:43:22	geist	but then you have to be able to go back to whence you came
2020-12-20 22:43:40	j`ey	yes, that's a problem I have, guess I should look at using page bookmarks
2020-12-20 22:43:44	geist	mawk: at my work it's basically linux or mac if you must. no windows, period.
2020-12-20 22:43:51	mawk	ah good
2020-12-20 22:44:24	doug16k	geist, to the point where it alarms a sysadmin if it sees a netbios packet? :P
2020-12-20 22:44:32	geist	but for my main gaming/etc workstation at home i just dual boot between windows 10 and linux
2020-12-20 22:44:38	geist	based on if it was playing games before or not
2020-12-20 22:44:52	geist	doug16k: heh i dunno! for work machines at WFH i put them all on a separate vlan
2020-12-20 22:46:55	j`ey	geist: ohh, with the context switch, instead of changing sp, you change sp_el0
2020-12-20 22:47:02	doug16k	when I was at microsoft, they still hated open source, and we had to get special permission to install linux, with business reason
2020-12-20 22:47:17	geist	presumably they've switched gears at this point
2020-12-20 22:47:21	doug16k	yeah
2020-12-20 22:47:27	geist	though i assume that most of the company is pretty windows centric
2020-12-20 22:48:07	geist	doug16k: also fun, i tried to talk to a wfw 3.11 machine over netbios the other day
2020-12-20 22:48:32	geist	whomp whomp. windows 10 actually says basically 'nope this is too old we dont talk to things that use this old a version of netbios'
2020-12-20 22:48:39	geist	has a whole dialog for it
2020-12-20 22:48:58	doug16k	I'd guess that there is a registry entry to weaken the protocols and make it work
2020-12-20 22:48:59	j`ey	geist: do you have a kernel stack per process?
2020-12-20 22:49:13	geist	j`ey: yes. so basically each process has it's own kernel stack
2020-12-20 22:49:27	geist	so the kernel context switch is between SP_EL1s essentially (or just The SP)
2020-12-20 22:49:28	j`ey	ok, so both sp and sp_el0 are context switched
2020-12-20 22:49:39	geist	sp_el0 is saved on the iframe when the cpu entered EL1 in the first place
2020-12-20 22:49:47	geist	so the low level kernel context switch code doesn't really care
2020-12-20 22:50:11	doug16k	ah yeah maybe wfw protocols are too far gone to even allow for their use
2020-12-20 22:50:20	geist	this is a direct extension of the model LK uses already: the kernel context switches between EL1 (or supervisor, or whatever the arches equivalent is)
2020-12-20 22:50:36	geist	and then the user state is mostly stored on the stack frame when it entered supervisor in the first place
2020-12-20 22:51:03	geist	(the exception to all of this is floating point state, which the kernel never touches therefore it can leave alone and context switch with the rest of the kernel state)
2020-12-20 22:52:38	geist	if a thread never enters user space then it's all the same: the kernel only really context switches the EL1 state
2020-12-20 22:52:50	geist	if the thread has no corresponding EL0 state then good riddance
2020-12-20 22:53:42	geist	that model works all the way up through the ELs on a multi level system like arm64 that have higher priority levels than supervisor
2020-12-20 22:54:13	geist	each level switches between its own level, and the lower level state is saved at transition to the higher state, with some exceptios for efficiency purposes
2020-12-20 22:57:24	 *	j`ey reads up, got pulled away for a few minutes
2020-12-20 22:57:52	geist	oh no sweat. it's literally 6am and i'm still awake
2020-12-20 22:57:54	geist	yay vacation
2020-12-20 22:58:08	doug16k	yeah you are a night owl for sure
2020-12-20 22:58:21	j`ey	2am is kinda my limit :P
2020-12-20 22:58:50	j`ey	and thanks, reinforces my understanding of the stuff
2020-12-20 22:59:13	j`ey	I gotta figure out a way to free my identity page table before I move on..
2020-12-20 22:59:23	doug16k	this is morning for me. I'm up early
2020-12-20 23:00:04	geist	ya it's nice in arm64 since you can just enable the low page table, use it to trampolie with 1GB pages, bounce up and then just toss it away
2020-12-20 23:01:09	j`ey	Im fully mapping my code/data with 4K pages, even for the trampoline right now
2020-12-20 23:01:54	j`ey	so I have to clear out / free a bunch of tables
2020-12-20 23:03:30	j`ey	(which I'll eventually need anyway!)
2020-12-20 23:03:32	geist	yah if you use say a 1GB page you can get away with just preallocating 2 4K page tables
2020-12-20 23:03:42	geist	one for the top level and another to old the 1GB page
2020-12-20 23:03:50	geist	(or 512 1GB pages if you wanna really nail it)
2020-12-20 23:04:13	j`ey	lol, I dont think my code to turn the mmu on will be 512GB :P
2020-12-20 23:04:23	geist	then you have just 2 4K pages to recycle. low enough that you can probably just forget about it for now and find some other use later. 8K memory wasted, oh well
2020-12-20 23:04:55	geist	right but that's the point just map 0-512GB in your trampoline and move on with things. requires 2 4K pages, can be preallocated in the kernel
2020-12-20 23:05:19	geist	reuse them for kernel page tables later if you want
2020-12-20 23:05:42	geist	nice thing is that 1GB pages are guaranteed to exist on arm64, so you can just use them up front
2020-12-20 23:07:11	j`ey	oh really? 4K granule is mandatory?
2020-12-20 23:07:17	geist	yah
2020-12-20 23:07:29	geist	well, i think it's so mandatory that you ca basically rely on it for the forseeable future
2020-12-20 23:07:43	geist	the only arm core i would ever expect to see remove it would be maybe some future successor to the M1
2020-12-20 23:07:59	geist	but only if they dont care about running anything else other than macos in virtualization
2020-12-20 23:08:38	geist	msot cores are 4k/64k. newer ARM cores are 4k/16k/64k the only outlyer that i know if is the apple M1 which is 4K/16K
2020-12-20 23:09:40	geist	i could see maybe over the next 10 years or so some sort of general push towards larger page sizes on ARMs part as macos proves that 16k is a nice page size (being the only current OS that really relies on it)
2020-12-20 23:10:00	j`ey	ok, looks like you can make a chip without one, so I should still include my aseert!(check(ID_AA64MMFR0_EL1))
2020-12-20 23:10:10	j`ey	just To Be Correct
2020-12-20 23:13:21	-->	mra90 (Martin@nat/intel/x-ibpczsjbhtgevaco) has joined #osdev
2020-12-20 23:18:58	geist	j`ey: yah at least assert and be like 'omg i cant continue'
2020-12-20 23:19:13	geist	though alas in the arm ecosystem there's not a handy terminal you can eaisly write to at that point in time
2020-12-20 23:19:27	geist	actually a fun one i also bumped into with M1 last week: it only supports 8 bit ASIDs
2020-12-20 23:19:37	mrvn	Another of those things where you need UART support before bootstrapping
2020-12-20 23:19:49	geist	fuchsia/zircon currently asserts that it has 16 bit ASIDs, because who doesnt? well, M1 doesn't.
2020-12-20 23:19:56	mrvn	geist: as opposed to 16bit for everyone else?
2020-12-20 23:19:59	geist	yah
2020-12-20 23:20:33	geist	not a *big* deal, there are various schemes to deal with recycling smaller ASIDs into a larger space, but cyurrently zircon only has a simple 64k bitmap that allocates which ASIDs are in use
2020-12-20 23:20:44	geist	and basically would assert if you had more than 64k processes at once
2020-12-20 23:20:59	geist	64k is one thing, 256 is well, slightly different
2020-12-20 23:21:30	mrvn	I can see where 64k processes would be sufficient. 256 you run out rather quickly.
2020-12-20 23:21:35	geist	but aside from lack of 64k base page granule and 8 bit ASIDs, thus far the M1 is fairly straightforward
2020-12-20 23:22:09	j`ey	mine still hasnt arrived :(
2020-12-20 23:22:13	geist	FWIW it's also PIPT instruction cache, but it's not fully coherent (see CTR_EL0 if you're interested)
2020-12-20 23:22:15	mrvn	You still need to evict ASIDs from the TLB when a process dies and you reuse a pid though.
2020-12-20 23:22:34	geist	mrvn: yah the real trouble si when you actuallyh ave more than 256 processes active at a time
2020-12-20 23:22:45	j`ey	geist: I saw the commit in fucsia to print that stuff out :P
2020-12-20 23:22:47	geist	there are schemes to deal with this, it's not a new problem
2020-12-20 23:22:51	mrvn	just replace a random one. :)
2020-12-20 23:22:57	geist	j`ey: yep, that's precisely becuase i was fiddling with M1
2020-12-20 23:23:00	geist	mrvn: basically
2020-12-20 23:23:16	geist	x86 has kinda the same problem since the PCID space is only 12 bits
2020-12-20 23:23:37	geist	j`ey: heh are you just watcying stuff under zircon/arch/arm64 or something?
2020-12-20 23:23:42	mrvn	otherwise I would use a LRU/k or a heap sorted by <time since last use> / <number of uses>
2020-12-20 23:23:54	geist	there are some fun TLB flushing stuff between adrian and i working out. spending a lot of time in vid chats over those
2020-12-20 23:24:03	j`ey	geist: fucshia log + ctrl f "travis"
2020-12-20 23:24:19	geist	turns out our icache/data sync strategy is technically racy, and the more you dig into it the more layers of stuff it uncovers
2020-12-20 23:24:25	j`ey	(not a joke >_>)
2020-12-20 23:24:30	geist	omg the arch that keeps delivering
2020-12-20 23:24:45	geist	j`ey: ah you should also search for adrian, he's doing a lot of VM stuff
2020-12-20 23:25:04	mrvn	geist: you have to flush data caches before executing code at the same address?
2020-12-20 23:25:05	geist	or even eieio who is here. eieio does great stuff
2020-12-20 23:25:15	geist	mrvn: turns out its More Complicated than i thought
2020-12-20 23:25:26	geist	every to do with whether or not the core is VIPT or PIPT (or other)
2020-12-20 23:25:33	geist	and that's all in the CTR_EL0 register
2020-12-20 23:25:50	geist	basically there are 3 cases
2020-12-20 23:26:04	mrvn	I thought all modern cpus would snoop that kind of stuff.
2020-12-20 23:26:17	geist	a) the cpu is fully coherent, ou dont have to flush shit (this is technically possible but i haven't seen a core that does this. covered in CTR_EL0 DIC and IDsomething bit)
2020-12-20 23:26:54	geist	b) you have to flush the dcache to PoU and invalidate any alias of the icache page becuase it's PIPT
2020-12-20 23:27:15	geist	c) you have to flush the dccache to PoU and invalidate *all* of the aliases of the icache page because it's VIPT
2020-12-20 23:27:36	geist	most older arm64 cores are type c. cortex-a53, most cortex-a3xs, cortex-a72, a73, etc
2020-12-20 23:27:54	geist	some newer ones are type b. M1, cortex-a55, cortex-a75+
2020-12-20 23:27:59	geist	it's spelled out in the CTR_EL0 register
2020-12-20 23:28:52	mrvn	Luckily I plan for every page to be mapped exactly once. So b and c are the same for me.
2020-12-20 23:28:57	geist	sooooo the trouble is if you modify a page and then 'sync' the d and icache (flush the page to puo, invalidate the virtual icache address) it's not sufficiennt for type C if there are more than one mapping (thus an alias)
2020-12-20 23:29:03	mrvn	s/exactly/at most/
2020-12-20 23:29:05	geist	thus you have to basically have to invalidate the *entire* icache
2020-12-20 23:29:16	geist	which after digging through linux and freebsd, that's what they do in type C cores
2020-12-20 23:29:26	geist	basically they dump the entire icache since they can't tell if something is mapped more than once
2020-12-20 23:29:49	geist	in the current zircon/fuchsia code that i basically wrote, i treat all cores as type b
2020-12-20 23:29:57	geist	ie, flushing through any alias is sufficient
2020-12-20 23:30:01	geist	whcih is not technically okay
2020-12-20 23:30:02	mrvn	yeah, linux doesn't keep track of phys -> virt. You would have to scan all page tables to find them.
2020-12-20 23:30:52	geist	https://fuchsia.googlesource.com/fuchsia/+/refs/heads/master/zircon/kernel/vm/vm_mapping.cc#894 is literally the code in question
2020-12-20 23:30:53	bslsk05	​fuchsia.googlesource.com: zircon/kernel/vm/vm_mapping.cc - fuchsia - Git at Google
2020-12-20 23:31:07	geist	it currently syncs the icache/dcache for every page as its mapped if it has an X bit
2020-12-20 23:31:25	geist	but turns out a) it's racy because it technically maps the page before syncing it so there's a race with other cores
2020-12-20 23:31:29	geist	and b) it assumes PIPT
2020-12-20 23:32:33	<--	camelCaser (~camela@152.89.163.20) has quit (Remote host closed the connection)
2020-12-20 23:32:40	mrvn	don't you do that inside the pagetable lock?
2020-12-20 23:32:49	geist	negative
2020-12-20 23:33:09	geist	doesn't matte ranyway, because if it were the instant you write to the page table entry its 'live' as far as other cpus are concerned
2020-12-20 23:33:37	geist	the only safe thing to do in a PIPT environment is synchronize it via a different mapping. ie the 'physmap' which is the 'everything is mapped into the kernel' mapping we keep around
2020-12-20 23:33:42	mrvn	but code shouldn't yet use the page or it's undefined behavior anyway.
2020-12-20 23:33:48	geist	and other oses do too. linux has one, freebsd has one
2020-12-20 23:33:49	doug16k	does that cpu speculate?
2020-12-20 23:33:55	geist	but for VIPT you basically just dump the entire icache and move on
2020-12-20 23:34:08	geist	mrvn: yes the logic is wrong
2020-12-20 23:34:15	geist	it should sync *before* mapping
2020-12-20 23:34:33	geist	that's part of the race, because other cores and observe the data prior to it becoming life
2020-12-20 23:34:37	mrvn	sure, shouldn't be too hard to swap the two around though.
2020-12-20 23:34:44	geist	note that the changes of that happening are extraordinarily long
2020-12-20 23:34:47	doug16k	OoO cpus can spontaneously read any virtual address anytime
2020-12-20 23:35:10	mrvn	but my point was that if one thread mmaps a page executable and another core uses that before mmap returns then that is UB already.
2020-12-20 23:35:26	geist	it's VIPT, so it wont actually use a bad alias. the problem would have to be if you literally recycled an existing physcial page in the same virtual slot and modifed it since the icache entry was created
2020-12-20 23:35:37	geist	which is why you almost cant even reproduce it, though tehcnically it exists
2020-12-20 23:36:17	mrvn	For the VIPT: Do you ever modify a mapped page?
2020-12-20 23:36:35	geist	you'd have to map physical page A to virtual address X and then unmap it (free it) and then happen to reuse physical page A in slot X for a completely different context
2020-12-20 23:36:47	geist	then the icache would have a entry that would map properly
2020-12-20 23:36:59	geist	with stale data
2020-12-20 23:37:09	-->	camelCaser (~camela@217.138.216.222) has joined #osdev
2020-12-20 23:37:10	geist	otherwise the physical tag wouldn't match up
2020-12-20 23:37:53	geist	mrvn: a jitter can, yeah
2020-12-20 23:38:00	mrvn	Ahh, the reuse case. I can see that. I thought you were concerned about page A being mapped multiple times and then you modify it.
2020-12-20 23:38:15	geist	mrvn: that also happens, but only jitters do that
2020-12-20 23:38:28	geist	in which case we define a series of ops in user space for them to dealw ith it
2020-12-20 23:38:28	mrvn	That kind of goes against the X^W design.
2020-12-20 23:38:31	geist	but really they should only map once
2020-12-20 23:38:45	geist	the common case here in the kernel is a page is demand faulted out of a file
2020-12-20 23:39:02	geist	so the page fault path here finds a page, gets it from a pager and then writes it down and syncs it so the icache is up to date
2020-12-20 23:39:17	geist	the risk here as it currently stands is the page is 'live' before the icache is synced
2020-12-20 23:39:35	mrvn	nod. that would even be a valid non-UB case.
2020-12-20 23:39:49	geist	anyway, proof again that computers are a mistake
2020-12-20 23:39:57	geist	this is simply not a thing that x86 has to deal with FWIW
2020-12-20 23:40:26	mrvn	So if you are swapping then you would write out a page, unmap it, load new data, map it, <other core runs into the same page>, sync it.
2020-12-20 23:40:27	geist	soooo look at CTR_EL0. ARM of course thought about this because they're not dummies. so theres a whole register there taht basically rolls up all the useful cache info
2020-12-20 23:41:08	geist	it ghas basically a field that says what kinda icache the cpu has and then two additional bits that tell you if you're a type A cpu
2020-12-20 23:41:19	geist	ie, do you need to sync in the first place. AFAIK they dont exist but they could
2020-12-20 23:41:56	geist	also since it's readable in EL0 you can use it where jitters and whatnot would need to know what to do about the mess they just made when they wrote out some code
2020-12-20 23:41:57	mrvn	I had to deal with this on m68k. No cache snooping at all. So you had to flush caches before writing to disk with DMA and icache after loading code into memory.
2020-12-20 23:43:36	geist	yah
2020-12-20 23:44:01	geist	note that pretty much everything but x86 has to sync i and d caches, the trick wasthe VIPT that i wasn't aware of
2020-12-20 23:44:42	geist	i knew that the L1 caches on arm (and pretty much everywhere else) are VIPT, but there are various tricks that make them act lile PIPT. arm L1d caches are explicitly defined as 'must act like PIPT' so no aliasing problems exist in armv8
2020-12-20 23:44:47	geist	because it's mandated as such
2020-12-20 23:45:04	-->	pitust (~pitust@89.19.88.76) has joined #osdev
2020-12-20 23:45:16	geist	buuuuut L1i can have aliasing issues and thus this is it
2020-12-20 23:45:33	geist	but the hammer is there's a single instructino to dump the entire L1 icache
2020-12-20 23:46:06	mrvn	There should be one to evict a physical page
2020-12-20 23:46:40	geist	on PIPT yes. you simply flush on any alias and that does exacty that
2020-12-20 23:46:44	geist	but on VIPT you can't
2020-12-20 23:47:17	mrvn	shouldn't be too hard for the hardware to flush a tag instead of an index.
2020-12-20 23:47:22	geist	at least in the data path that's always a guarantee. armv8 basically says that all data cache levels must act like PIPT, which is why you can get away with flushing any alias of any page and it just works
2020-12-20 23:47:43	geist	sure, but that's not what some do, so it's moot
2020-12-20 23:48:00	geist	i mean searching by tag is literally not the definition of how it works
2020-12-20 23:48:06	geist	you search by index but keep a tag
2020-12-20 23:48:14	geist	so if it's not indexed by physical then you can't search by it
2020-12-20 23:49:27	geist	anyway, dumping the entire icache is bad but usually it's only 32k or 64k or so, but on the M1.... 192Kb of L1 icache
2020-12-20 23:49:33	geist	so you really dont want to dump that if you dont have to
2020-12-20 23:49:41	geist	but M1 is PIPT so yay, dont dont
2020-12-20 23:49:47	mrvn	you don't really need to search as you don't need the result it finds. Just some logic on every entry that compares the tag and clears the entry if it matches.
2020-12-20 23:50:17	geist	sure, but what you just said is to literally also let you index a tag, which is by definition not how VIPT works
2020-12-20 23:50:23	geist	if you could do what you're asking then it's PIPT
2020-12-20 23:50:44	geist	as in by definition a VIPT cache doesn't let you search the tags,
2020-12-20 23:51:24	mrvn	In PIPT you would have to page walk before searching. That would affect every access.
2020-12-20 23:51:33	geist	right, which is why L1 caches are usually VIPT
2020-12-20 23:51:58	geist	do the lookup now, in parallel do the TLB lookup, validate the tag before you commit the results
2020-12-20 23:52:21	mrvn	What I'm suggesting is that the code page walks and then tells the cache to flush a physical tag. So that saves some logic. It's somewhere between VIPT and PIPT then.
2020-12-20 23:52:30	geist	sure
2020-12-20 23:52:39	geist	but that's not how it works so its moot
2020-12-20 23:52:49	mrvn	which is I guess what the "behaves as PIPT does too"
2020-12-20 23:53:02	geist	but you can dump the whole thing, since presumably that's simpler to implement in hardware. just unset the valid bit across all entries
2020-12-20 23:53:14	mrvn	on flush it walks and flushes the tag, on lookup it uses the virtual address.
2020-12-20 23:53:32	geist	yah at some point i fully grokked 'VIPT that acts like PIPT' but it takes some thinking and whiteboard to understandf
2020-12-20 23:54:15	geist	i think in general VIPT that acts like PIPT is all about avoiding the aliases in the first place by carefully arraniging for the ways and sets to line up such that no aliases can exist
2020-12-20 23:54:21	geist	and thus avoids the problem
2020-12-20 23:55:04	geist	or at least that's the classic solution for it, but it's too late for me to think about it again
2020-12-20 23:58:37	-->	user24 (~user24@2a02:810a:1440:7304:9c19:e4eb:716f:5df3) has joined #osdev
2020-12-21 00:07:36	geist	there's a second problem with that code i linked too that only show sup on M1: it attempts to flush the dcache throuh a RX mapping
2020-12-21 00:08:06	geist	in the ARM ARM it says it's implementation defined whther or not trying to do a data clean operation on a read only page will generate a permission fault
2020-12-21 00:08:16	geist	on all existing ARM cores it seems to be okay, but M1 generates a fault
2020-12-21 00:12:53	<--	pitust (~pitust@89.19.88.76) has quit (Ping timeout: 260 seconds)
2020-12-21 00:25:58	-->	pitust (~pitust@89.19.88.68) has joined #osdev
2020-12-21 00:33:06	-->	regreg (~regreg@2a02:2f01:8416:6100:d2cf:cf33:786e:c499) has joined #osdev
2020-12-21 00:36:02	<--	pitust (~pitust@89.19.88.68) has quit (Ping timeout: 268 seconds)
2020-12-21 00:39:20	-->	pitust (~pitust@89.19.88.47) has joined #osdev
2020-12-21 00:53:52	-->	CrystalMath (~coderain@reactos/developer/theflash) has joined #osdev
2020-12-21 00:56:17	mra90	how can I modify tianocore so it stays at boot screen and prints some custom text message?
2020-12-21 01:01:12	<--	regreg (~regreg@2a02:2f01:8416:6100:d2cf:cf33:786e:c499) has quit (Ping timeout: 272 seconds)
2020-12-21 01:12:04	<--	pitust (~pitust@89.19.88.47) has quit (Ping timeout: 272 seconds)
2020-12-21 01:19:01	-->	pitust (~pitust@89.19.88.76) has joined #osdev
2020-12-21 01:24:53	<--	pitust (~pitust@89.19.88.76) has quit (Ping timeout: 260 seconds)
2020-12-21 01:34:04	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-21 01:34:21	-->	sangoma (~zeus@102.82.175.206) has joined #osdev
2020-12-21 01:42:37	doug16k	mra90, just spam the esc key early in boot and it will go into a setup screen
2020-12-21 01:42:47	doug16k	is stopping it the goal?
2020-12-21 01:43:27	doug16k	tianocore sits there and redraws the screen over and over as hard as it can the whole time you are in setup
2020-12-21 01:43:45	doug16k	and it sprays that stream of terminal output at com1 too
2020-12-21 01:44:12	doug16k	that's "a message" if you stretch your ask
2020-12-21 01:46:23	doug16k	if you really mean modify tianocore, then first get tianocore build building on your machine
2020-12-21 01:46:46	doug16k	it's not that bad, just unusual
2020-12-21 01:48:01	mrvn	A cylinder with radius Z and height A has a volume of PIZZA.
2020-12-21 01:48:13	doug16k	then you can point qemu at it with -bios
2020-12-21 01:50:54	mra90	doug16k, I am testing on a real HW
2020-12-21 01:51:16	doug16k	ah
2020-12-21 01:51:45	mra90	but I have never tested qemu, would it be worth trying for BIOS related stuff?
2020-12-21 01:51:57	doug16k	depends what stuff
2020-12-21 01:52:28	doug16k	for stuff that isn't too hardware dependent, it would be fine
2020-12-21 01:52:58	doug16k	it's fairly straightforward to build a custom tianocore and point qemu at it
2020-12-21 01:55:07	doug16k	debugging would be almost trivial in qemu. good luck on bare metal
2020-12-21 01:56:06	doug16k	TCG can do impossibly difficult things like having infinite hardware breakpoints and doing memory watches on arbitrarily large blocks
2020-12-21 01:56:23	doug16k	impossible for real machine I mean
2020-12-21 01:57:30	mra90	hmm but how would debugging under qemu be different?
2020-12-21 01:58:02	doug16k	how can you step through the code on a real machine
2020-12-21 01:58:10	doug16k	how can you place a breakpoint
2020-12-21 01:58:36	-->	pitust (~pitust@89.19.88.59) has joined #osdev
2020-12-21 01:58:44	doug16k	it would be different because debugging is even possible
2020-12-21 01:59:00	mra90	ok I got your point
2020-12-21 01:59:13	mra90	do you use GDB in that qemu case?
2020-12-21 01:59:29	doug16k	you attach gdb to qemu
2020-12-21 01:59:48	doug16k	qemu implements a gdbstub - it is the same thing as connecting to a remote gdbserver
2020-12-21 01:59:59	doug16k	each cpu is a thread
2020-12-21 02:00:07	-->	superleaf1995 (bdb3cb73@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.203.115) has joined #osdev
2020-12-21 02:00:28	mra90	oh I see
2020-12-21 02:01:00	doug16k	there are facilities to dump all the registers - even system registers
2020-12-21 02:01:27	doug16k	can dump page tables, look at lapic, pic, pit, etc
2020-12-21 02:02:21	mra90	doug16k, what is the good resource to refresh basic x86 architecture?
2020-12-21 02:02:38	mra90	like, reset vectors, booting stages etc
2020-12-21 02:02:41	doug16k	you can point your gdb at your executable and it will load the symbols from there - then in gdb you do: target remote :1234
2020-12-21 02:02:52	doug16k	it will attach and use the symbols and be source level debugger
2020-12-21 02:03:27	doug16k	intel SDM covers initial state fairly well
2020-12-21 02:03:35	doug16k	but you get control long after that don't you?
2020-12-21 02:03:44	doug16k	the ram doesn't even work at the very beginning
2020-12-21 02:03:54	doug16k	the pci lanes are also dead as doornails
2020-12-21 02:04:03	doug16k	pcie*
2020-12-21 02:04:33	doug16k	no pci bars are set - no pci devices are reachable in I/O or memory space
2020-12-21 02:04:46	doug16k	even if it could send a pcie packet
2020-12-21 02:05:21	doug16k	the firmware on a real modern machine has to initialize the memory controller and pcie complex before it can even run normally
2020-12-21 02:05:25	superleaf1995	i think you would need to access the I2C bus to mess with RAM
2020-12-21 02:05:40	doug16k	it runs using the cache only at first
2020-12-21 02:06:17	doug16k	has to be configured so it will never evict anything and won't prefetch or whatever
2020-12-21 02:06:37	doug16k	so cache can be used as ram to get you past initializing memory controller
2020-12-21 02:06:58	doug16k	point is, it is uglier than the intel sdm manual might suggest for the initial state
2020-12-21 02:07:18	doug16k	I don't think they mention ram probably not working - it's not their problem
2020-12-21 02:07:37	doug16k	the BKGD will talk to you as if you are aware of that though
2020-12-21 02:07:44	-->	zagto (~zagto@200116b8457c02009d7be063c532d391.dip.versatel-1u1.de) has joined #osdev
2020-12-21 02:07:48	doug16k	er, BKDG
2020-12-21 02:07:58	doug16k	Bios and Kernel Developers Guide
2020-12-21 02:08:23	doug16k	that is where you look to find out how to setup a pristine machine that just powered on 120ms ago
2020-12-21 02:08:44	doug16k	it is quite implementation and cpu manufacturer specific
2020-12-21 02:09:02	doug16k	that's why firmware does it - nobody can be expected to know how to do it
2020-12-21 02:11:21	doug16k	random example, pdf page 20: https://www.amd.com/system/files/TechDocs/41256.pdf
2020-12-21 02:11:49	doug16k	other cpus will be some variation on that
2020-12-21 02:12:57	doug16k	for example, step 4 is "Enable the cache, program the MTRRs for Cache-as-Ram and initialize the Cache-as-Ram, as described in 2.3.3 [Using L2 Cache as General Storage During Boot]"
2020-12-21 02:14:44	mra90	yes BKDG is botherboard setup recipe
2020-12-21 02:14:47	doug16k	the precise state of the cpu at first executed instruction is tediously spelled out in full in the SDM
2020-12-21 02:15:12	doug16k	TLDR: lots of zeros
2020-12-21 02:23:41	<--	pitust (~pitust@89.19.88.59) has quit (Ping timeout: 256 seconds)
2020-12-21 02:24:43	-->	srjek (~srjek@2601:249:600:bb1:95b6:3726:aad1:f9e9) has joined #osdev
2020-12-21 02:26:21	doug16k	short version is, eax has self-test result, cs.base = 0xFFFF0000, ip=0xFFFF  (note the unreal cs base), almost everything else zeros
2020-12-21 02:26:45	doug16k	oops
2020-12-21 02:26:50	doug16k	ip=0xfff0
2020-12-21 02:27:22	mrvn	So you have 16 bytes to get where you need to go to start
2020-12-21 02:27:45	doug16k	yeah, a branch. enough room for the largest possible instruction
2020-12-21 02:28:11	doug16k	15 bytes is absolute maximum instruction size
2020-12-21 02:28:20	mrvn	largest branch is 5 bytes, right?
2020-12-21 02:28:25	CrystalMath	hi doug16k
2020-12-21 02:28:32	doug16k	could be bigger but yes, normally
2020-12-21 02:28:33	CrystalMath	doug16k: there's also one more thing about partitions and VBRs
2020-12-21 02:28:37	CrystalMath	that i forgot
2020-12-21 02:28:37	doug16k	could have prefixes
2020-12-21 02:28:43	CrystalMath	FAT has a "hidden sector count" field
2020-12-21 02:29:04	mrvn	doug16k: I thought I counted them in
2020-12-21 02:29:14	mrvn	doug16k: we are talking 16 bit code here
2020-12-21 02:29:42	doug16k	well, it could be address size override prefixed 16:32 absolute jmp
2020-12-21 02:30:10	mra90	when the motherboard boots it starts executing from BIOS chip ROM right?
2020-12-21 02:30:20	mrvn	jump to a 32bit address? How does that work in 16bit mode? segment:offset I get but not 32bit.
2020-12-21 02:30:20	doug16k	CrystalMath, yes
2020-12-21 02:30:38	doug16k	CrystalMath, are you asking what that means?
2020-12-21 02:30:53	mrvn	mra90: yes, usually the rom/flash is mapped where it starts executing
2020-12-21 02:31:16	doug16k	mrvn, it would be a little bit silly but it's possible. the offset would need to be < 64K
2020-12-21 02:31:18	CrystalMath	doug16k: if you recall we were talking about how a VBR could work even if it's used as an MBR
2020-12-21 02:31:38	CrystalMath	(same code)
2020-12-21 02:32:04	doug16k	ah
2020-12-21 02:32:35	doug16k	MBR has an implied hidden sector count. it's the number of sectors that happen to be before the first partition
2020-12-21 02:32:36	mra90	doug16k, I have compiled coreboot with tianocore for my board (real HW) testing it now and it looks like tianocore doesn't print nay hello message
2020-12-21 02:32:48	mra90	I spam ESC key on boot but nothing happens
2020-12-21 02:33:05	mra90	it doersn't even proceed to linux kernel -> all I see is a black screen
2020-12-21 02:33:06	-->	Halofreak1990 (~FooBar247@84-24-167-61.cable.dynamic.v4.ziggo.nl) has joined #osdev
2020-12-21 02:33:22	doug16k	the esc thing may be due to how tianocore configures it for qemu
2020-12-21 02:33:32	doug16k	but it ought to be there though
2020-12-21 02:33:38	doug16k	how else would you set the boot order
2020-12-21 02:33:49	mrvn	doug16k: I guess with 16 bytes you can load a new CS and jump wherever too.
2020-12-21 02:34:12	-->	pitust (~pitust@89.19.88.68) has joined #osdev
2020-12-21 02:34:17	doug16k	mrvn, yes you should be able to get out of that region many different ways with room to spare
2020-12-21 02:34:56	mrvn	.oO(check a jumper on the MB and jump to flash or rom depending on the jumper)
2020-12-21 02:35:24	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined #osdev
2020-12-21 02:36:00	mrvn	I love boards that have a fallback rom in case you flash a broken image.
2020-12-21 02:38:19	doug16k	the trick with that unreal cs base is, you can have a very large rom that is mapped to last 2MB or whatever, and the last 64KB of that will be the first instructions executed. when the code finally loads a value into cs in real mode, it will clobber the unreal base and make it be actually down in the 0xf0000-0xfffff range
2020-12-21 02:38:57	doug16k	or when it loads a protected mode selector
2020-12-21 02:39:12	mra90	how does rom knows where to jump/start code from flash - the actuall OS?
2020-12-21 02:39:36	doug16k	then the very large rom has all the init-only stuff, and it only "keeps" the stuff that ends up at 0xf0000-0xfffff at runtime
2020-12-21 02:39:56	doug16k	the cpu knows the first instruction
2020-12-21 02:40:06	doug16k	it's hardwired to fetch from 0xfffffff0
2020-12-21 02:40:06	mrvn	modern roms are more like 16+MB
2020-12-21 02:40:20	mra90	doug16k, and there is located BIOS
2020-12-21 02:40:25	mra90	bios/coreboot code
2020-12-21 02:40:36	doug16k	the hardware must put a rom there at the beginning, yes
2020-12-21 02:40:48	doug16k	probably some microcontroller on the motherboard doing that
2020-12-21 02:40:51	mra90	this is alco called the reset vector
2020-12-21 02:40:57	doug16k	or something equivalent somewhere
2020-12-21 02:41:29	doug16k	the exact implementation depends what year you mean
2020-12-21 02:41:38	doug16k	in the end it "looks like" the old stuff anyway
2020-12-21 02:42:27	mrvn	Is anyone bothering with copying the rom to ram to gain some speed or does everyone just say: screw that, it's fast enough to load the OS and the OS never uses the bios then.
2020-12-21 02:43:04	doug16k	I think stuff still does shadows
2020-12-21 02:43:08	doug16k	er shadowing
2020-12-21 02:43:45	doug16k	you can set it to WP memory type so it is impossible to write it on purpose
2020-12-21 02:46:29	-->	Gryman (~Gryman@108-206-150-112.lightspeed.irvnca.sbcglobal.net) has joined #osdev
2020-12-21 02:46:32	doug16k	the cache would do the shadowing to some extent anyway, if you made it WP. it would be horrible if UC
2020-12-21 02:47:48	doug16k	UC memory access is serializing
2020-12-21 02:49:01	doug16k	finishes all the previous instructions completely, then starts the access
2020-12-21 02:50:11	doug16k	just in case that access is the missile launch MMIO
2020-12-21 02:50:26	doug16k	missile launch MMIO would be UC
2020-12-21 02:50:51	<--	iola (~iolar@gateway/tor-sasl/iola) has quit (Remote host closed the connection)
2020-12-21 02:50:53	doug16k	don't even think about that access until it is sure it really will execute
2020-12-21 02:51:16	-->	iola (~iolar@gateway/tor-sasl/iola) has joined #osdev
2020-12-21 02:52:02	-->	Sheilong (uid293653@gateway/web/irccloud.com/x-bsavlyquljvibkoo) has joined #osdev
2020-12-21 02:52:45	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-21 02:55:56	-->	Goplat (~Goplat@reactos/developer/Goplat) has joined #osdev
2020-12-21 02:58:02	<--	pitust (~pitust@89.19.88.68) has quit (Ping timeout: 246 seconds)
2020-12-21 02:58:43	doug16k	16MB is a really popular size for ROMs partly because that is the biggest PCI ROM BAR you can do in PCI config space
2020-12-21 03:01:29	doug16k	if you want to be able to make your ROM show up at a configurable address, that any decent OS knows how to configure, you incur that 16MB limitation
2020-12-21 03:03:06	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-21 03:05:09	mra90	BAR is just a register keeping address of PCI memory
2020-12-21 03:05:43	mra90	does anybody know how to enter tianocore menu? ESC doesn't work - black screen onlty
2020-12-21 03:06:36	nur	question about initing the classic PIC chips on x86: why do we need to save the interrupt masks and then restore them
2020-12-21 03:06:53	-->	X-Scale` (~ARM@153.211.137.78.rev.vodafone.pt) has joined #osdev
2020-12-21 03:08:11	<--	X-Scale (~ARM@46.50.1.91) has quit (Ping timeout: 246 seconds)
2020-12-21 03:08:11	--	X-Scale` is now known as X-Scale
2020-12-21 03:08:48	mra90	I believe I miss GPU drivers for tianocore
2020-12-21 03:10:20	superleaf1995	nur: pic masks may have stuff we do not know or set up by firmware
2020-12-21 03:10:27	superleaf1995	afaik
2020-12-21 03:11:26	nur	in the examples for init-ing the PICs it just looks like we're writing a bunch of bytes to the PIC ports, one after another
2020-12-21 03:11:32	nur	it's the same port too
2020-12-21 03:11:41	nur	same ports
2020-12-21 03:11:49	nur	so the PICs expect data in a certain order?
2020-12-21 03:12:10	superleaf1995	you send commands to pic and pic awaits for data
2020-12-21 03:12:46	nur	like, first comes the init command, then next comes the vector offset... then the cascade, then the mode, then the mask?
2020-12-21 03:12:48	nur	in that order?
2020-12-21 03:13:07	superleaf1995	it seems
2020-12-21 03:13:19	superleaf1995	i'd think its only till mode
2020-12-21 03:13:29	superleaf1995	you can write masks anytime after initialization
2020-12-21 03:17:25	nur	ahhh okay
2020-12-21 03:17:33	nur	so if you don't send a commend it's a mask
2020-12-21 03:18:01	superleaf1995	it's an init command (with proper data) then mask
2020-12-21 03:18:12	nur	ok
2020-12-21 03:18:24	nur	so if you write anything after that it's a mask
2020-12-21 03:19:46	superleaf1995	yes
2020-12-21 03:19:53	nur	thanks!
2020-12-21 03:19:58	superleaf1995	unless you send command, the pic will handle everything as a mask
2020-12-21 03:20:37	nur	gotcha
2020-12-21 03:23:49	<--	sangoma (~zeus@102.82.175.206) has quit (Ping timeout: 256 seconds)
2020-12-21 03:36:20	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2020-12-21 03:38:31	-->	sangoma (~zeus@197.239.5.254) has joined #osdev
2020-12-21 03:44:07	nur	I can do the pic init while interrupts are disabled right?
2020-12-21 03:44:20	superleaf1995	yes
2020-12-21 03:46:18	nur	thanks
2020-12-21 03:46:50	-->	benjif (~benjif@cpe-24-211-187-168.nc.res.rr.com) has joined #osdev
2020-12-21 03:49:33	<--	user24 (~user24@2a02:810a:1440:7304:9c19:e4eb:716f:5df3) has quit (Ping timeout: 260 seconds)
2020-12-21 03:51:52	doug16k	nur, I'd even go further and say it's nuts to have interrupts enabled before you initialized the pic
2020-12-21 03:52:36	doug16k	"disabling interrupts" means disabling external IRQs, like those from the PIC
2020-12-21 03:52:47	doug16k	it doesn't disable int or exceptions or anything
2020-12-21 03:53:58	doug16k	if interrupts were enabled, then when any unmasked IRQ came in, the cpu would try to use the IDT right then, and would use whatever (strange, not initialized yet) vector it got from the PIC
2020-12-21 03:56:49	doug16k	the vector probably wouldn't be in the range that your code expected for IRQs, yet
2020-12-21 03:57:15	doug16k	even if you did already have the idt setup early enough
2020-12-21 03:58:56	doug16k	the crash would be some random instruction, whatever happened to be running when that irq got dispatched, with no clue other than PIC ISR register bit
2020-12-21 03:59:26	doug16k	crash or the "call site" of the interrupt handler
2020-12-21 03:59:50	doug16k	when you get a #GP on nop, you'll know what I mean. that happened to me
2020-12-21 04:03:03	doug16k	nop was running when it tried to dispatch an interrupt that had a bad idt entry, and it appeared to blame the nop. it's because the interrupt was injected as if it were right before that nop
2020-12-21 04:23:55	-->	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has joined #osdev
2020-12-21 04:27:47	nur	thanks :)
2020-12-21 04:29:30	nur	and the code says
2020-12-21 04:29:35	nur	"interrupt detected"
2020-12-21 04:29:40	nur	well well the handler runs
2020-12-21 04:29:40	nur	:D
2020-12-21 04:29:46	doug16k	nice
2020-12-21 04:29:53	nur	and it's 3:30 am I have earned my rest
2020-12-21 04:29:56	nur	good night!
2020-12-21 04:36:49	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 260 seconds)
2020-12-21 04:39:00	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-21 05:08:19	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 260 seconds)
2020-12-21 05:12:10	<--	sangoma (~zeus@197.239.5.254) has quit (Ping timeout: 265 seconds)
2020-12-21 05:15:10	<--	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has quit (Ping timeout: 272 seconds)
2020-12-21 05:25:29	-->	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has joined #osdev
2020-12-21 05:26:33	-->	sangoma (~zeus@197.239.4.190) has joined #osdev
2020-12-21 05:31:53	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined #osdev
2020-12-21 05:35:16	<--	sangoma (~zeus@197.239.4.190) has quit (Quit: WeeChat 2.9)
2020-12-21 05:36:47	--	grumble is now known as SeasonsBeatings
2020-12-21 05:42:44	<--	gxt (~gxt@gateway/tor-sasl/gxt) has quit (Ping timeout: 240 seconds)
2020-12-21 05:45:40	peterbjornx	geist: i started work on a mini some time ago, never really ended up finishing it
2020-12-21 05:45:44	peterbjornx	https://pbx.sh/upl/mini/
2020-12-21 05:45:44	bslsk05	​pbx.sh: Index of /upl/mini
2020-12-21 05:46:12	peterbjornx	did build the actual core datapath
2020-12-21 05:47:36	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-21 06:01:38	<--	doug16k (~dougx@198-91-149-79.cpe.distributel.net) has quit (Read error: Connection reset by peer)
2020-12-21 06:07:05	<--	GeDaMo (~GeDaMo@unaffiliated/gedamo) has quit (Remote host closed the connection)
2020-12-21 06:07:34	-->	regreg (~regreg@2a02:2f01:8416:6100:d2cf:cf33:786e:c499) has joined #osdev
2020-12-21 06:09:47	mrvn	geist: what do you use to simulate logic circuits?
2020-12-21 06:10:43	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2020-12-21 06:21:48	<--	attah (~attah@h-158-174-22-49.NA.cust.bahnhof.se) has quit (Quit: badarg)
2020-12-21 06:27:22	-->	sprocklem (~sprocklem@unaffiliated/sprocklem) has joined #osdev
2020-12-21 06:27:25	<--	Halofreak1990 (~FooBar247@84-24-167-61.cable.dynamic.v4.ziggo.nl) has quit (Ping timeout: 240 seconds)
2020-12-21 06:30:52	superleaf1995	Where should i retrieve PCI IO ports?
2020-12-21 06:30:57	superleaf1995	for normal PCI
2020-12-21 06:31:20	superleaf1995	i already walk over by PCIs and make a topo map of the PCI system config
2020-12-21 06:31:30	superleaf1995	but there is no IO port route as it seems
2020-12-21 06:31:39	superleaf1995	field*
2020-12-21 06:32:12	superleaf1995	Nono, i meant. Obtaining the I/O ports *of* a PCI device
2020-12-21 06:33:10	<--	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has quit (Quit: adu)
2020-12-21 06:49:40	Bitweasil	Read the BARs.
2020-12-21 06:49:52	Bitweasil	I think the low bit means it's an IO port vs a MMIO address.
2020-12-21 06:50:23	pitust	i implemented stack canaries
2020-12-21 06:51:14	superleaf1995	Hmm
2020-12-21 06:51:30	Bitweasil	https://wiki.osdev.org/PCI#Base_Address_Registers <-- Look at bit 0.
2020-12-21 06:51:31	bslsk05	​wiki.osdev.org: PCI - OSDev Wiki
2020-12-21 06:51:38	superleaf1995	header type 0, right?
2020-12-21 06:51:47	Bitweasil	No, BAR.
2020-12-21 06:52:12	Bitweasil	That's how you tell if it's a MMIO bar or an I/O BAR.
2020-12-21 06:53:25	 *	Bitweasil wanders out.  Later!
2020-12-21 13:06:57	--	irc: disconnected from server
2020-12-21 13:08:02	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-21 13:08:02	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-21 13:08:02	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-21 13:08:02	--	Channel #osdev: 276 nicks (1 op, 0 voices, 275 normals)
2020-12-21 13:08:48	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-21 13:33:51	-->	avega (~Thunderbi@188.162.64.168) has joined #osdev
2020-12-21 13:34:50	<--	avega (~Thunderbi@188.162.64.168) has quit (Remote host closed the connection)
2020-12-21 13:42:04	<--	di6mbav4pephrg (~oKLtROtw~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-21 13:47:41	-->	zhiayang (~zhiayang@unaffiliated/zhiayang) has joined #osdev
2020-12-21 13:47:52	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-21 13:50:54	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-21 13:51:31	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-21 13:53:48	geist	peterbjornx: did it come back? that's interesting. wonder if their dns registration expired
2020-12-21 13:54:14	geist	https://musl.libc.org/ seems to work here. the old one redirected to this one
2020-12-21 13:54:16	bslsk05	​musl.libc.org: musl libc
2020-12-21 14:08:15	peterbjornx	yeah, it came back
2020-12-21 14:08:21	peterbjornx	apparently an ISP issue
2020-12-21 14:08:39	peterbjornx	(on their end)
2020-12-21 14:14:40	-->	xhe (~xhe@45.251.23.186) has joined #osdev
2020-12-21 14:19:44	<--	iola (~iolar@gateway/tor-sasl/iola) has quit (Ping timeout: 240 seconds)
2020-12-21 14:33:22	-->	perdent (~perdent@101.175.70.218) has joined #osdev
2020-12-21 14:33:27	perdent	Hey could somoen please do me a favour and download the kernel https://launchpadlibrarian.net/454014538/linux_5.0.0.orig.tar.gz
2020-12-21 14:33:27	perdent	and the diff file
2020-12-21 14:33:27	perdent	https://launchpadlibrarian.net/454014539/linux_5.0.0-38.41.diff.gz
2020-12-21 14:33:28	perdent	Use the patch to patch the 5.0.0.orig.tar.gz and compile the kernel. And I need the final bzImage to debug the kernel.
2020-12-21 14:34:07	klange	And why would we do this for you?
2020-12-21 14:34:47	perdent	Also this is the kernel version that the remote machine is running on: 
2020-12-21 14:34:47	perdent	Linux rope2 5.0.0-38-generic #41-Ubuntu SMP Tue Dec 3 00:27:35 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
2020-12-21 14:34:47	perdent	And here is the debug symbols for that kernel: https://launchpad.net/~canonical-kernel-team/+archive/ubuntu/ppa/+sourcepub/10775082/+listing-archive-extra
2020-12-21 14:34:49	bslsk05	​launchpad.net <no title>
2020-12-21 14:35:30	perdent	klange: My qemu and virtualbox has a bug in it
2020-12-21 14:35:37	perdent	Could not get it working
2020-12-21 14:36:17	klange	I don't see how that relates to asking people in a random IRC channel to build a Linux kernel for you.
2020-12-21 14:36:25	perdent	And it takes ages to compile
2020-12-21 14:36:47	perdent	And I have had to re-compile it about 8 times now
2020-12-21 14:36:57	klange	Okay? Why don't you ask a Linux channel?
2020-12-21 14:37:06	perdent	I did
2020-12-21 14:37:20	klange	Then why are you asking here?
2020-12-21 14:37:23	perdent	But this just makes it easier for me
2020-12-21 14:38:16	perdent	Why i ask is a friend needs my help, so I would like to show him the bzimage file
2020-12-21 14:38:25	klange	But why are you asking _us_?
2020-12-21 14:38:37	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-21 14:39:10	perdent	As maybe one of you may be able to help me with my isue?
2020-12-21 14:39:19	perdent	well, favour
2020-12-21 14:39:47	perdent	I would appreciate it very much
2020-12-21 14:39:50	klange	And maybe someone at McDonald's can help me change the tires on my car, but I normally go to a mechanic for that.
2020-12-21 14:40:11	perdent	So show me which channel then?
2020-12-21 14:40:20	perdent	To ask this in?
2020-12-21 14:40:25	klange	Well not this one!
2020-12-21 14:40:46	perdent	So you dont compile OS's, good to know.
2020-12-21 14:40:49	klange	Why do you need to build this from source? Looks like it's up on a Launchpad PPA somewhere, should exist as a binary package there.
2020-12-21 14:40:53	klange	We don't compile _Linux_.
2020-12-21 14:41:19	perdent	As its a specific version
2020-12-21 14:41:51	peterbjornx	use your own hardware, dude
2020-12-21 14:41:53	perdent	And I require debug symbol
2020-12-21 14:41:54	perdent	s
2020-12-21 14:42:03	klange	Uh, yeah, it's this specific version, and oh look, all the binary packages it produces: https://launchpad.net/ubuntu/+source/linux/5.0.0-38.41
2020-12-21 14:42:04	bslsk05	​launchpad.net: 5.0.0-38.41 : linux package : Ubuntu
2020-12-21 14:42:14	peterbjornx	or maybe rent an amazon node to do so
2020-12-21 14:42:26	perdent	peterbjornx: Is that the 2019 version?
2020-12-21 14:42:45	perdent	Amazon node wont do it any faster
2020-12-21 14:42:52	klange	And neither would any of us?
2020-12-21 14:42:54	peterbjornx	neither will asking someone here
2020-12-21 14:43:25	perdent	where is the debug symbols?
2020-12-21 14:43:25	peterbjornx	we don't have magic instant compilers, hell, i just spent a few hours recompiling my gcc several times
2020-12-21 14:43:37	perdent	in that version you showed me?
2020-12-21 14:43:43	perdent	I am doing kernel debugging
2020-12-21 14:43:46	peterbjornx	perdent: try google, you'll find it has answers
2020-12-21 14:43:46	perdent	this is why i asked
2020-12-21 14:43:47	<--	srjek (~srjek@2601:249:600:bb1:95b6:3726:aad1:f9e9) has quit (Ping timeout: 260 seconds)
2020-12-21 14:44:03	peterbjornx	also if you're gonna do kernel debugging you need to be able to build the darn thing
2020-12-21 14:44:15	perdent	I AHVE
2020-12-21 14:44:17	perdent	HAVE
2020-12-21 14:44:21	peterbjornx	then what
2020-12-21 14:44:24	perdent	As I said there is a bug
2020-12-21 14:44:27	peterbjornx	's the problem
2020-12-21 14:44:32	peterbjornx	so?
2020-12-21 14:44:45	peterbjornx	if you have why do you need us to compile it
2020-12-21 14:44:48	perdent	so i cant build/compile it
2020-12-21 14:44:57	perdent	i was able to the first time
2020-12-21 14:45:06	perdent	about 8 times
2020-12-21 14:45:10	peterbjornx	what, there's a compile error?
2020-12-21 14:45:23	peterbjornx	or is your kernel so broken it cant host the compiler
2020-12-21 14:45:46	perdent	Yes a UAF in cirtualbox
2020-12-21 14:45:50	perdent	virtualbox
2020-12-21 14:45:59	peterbjornx	either way, your vmlinux should have symbols
2020-12-21 14:46:02	peterbjornx	or symbol.map
2020-12-21 14:46:08	peterbjornx	or w/e it's called
2020-12-21 14:46:19	peterbjornx	also why do you need a vm to build a kernel?
2020-12-21 14:46:37	perdent	i need to compile and build this specific kernel
2020-12-21 14:46:47	peterbjornx	yes, so?
2020-12-21 14:46:49	klange	Why do you need a VM to build a kernel from a specific patch that Ubuntu shipped a year ago?
2020-12-21 14:46:49	perdent	as I am debugging it
2020-12-21 14:47:08	perdent	Looking for bugs?
2020-12-21 14:47:20	peterbjornx	then why can't you compile it yourself
2020-12-21 14:47:29	klange	But they shipped it... it's there, go get it from a repo? I don't get why you need to have anyone compile this, it's already been compiled.
2020-12-21 14:47:30	perdent	vuln analysis/exploit dev
2020-12-21 14:47:38	peterbjornx	oh fun
2020-12-21 14:47:55	peterbjornx	if you need help with building a freaking kernel, you're not gonna have a lot of luck at that
2020-12-21 14:48:14	perdent	as I said I found a UAF in virtualbox
2020-12-21 14:48:22	peterbjornx	so?
2020-12-21 14:48:25	perdent	which i am trying to debug
2020-12-21 14:48:36	peterbjornx	why does that mean you can not compile a kernel?
2020-12-21 14:48:36	perdent	to see if its exploitable
2020-12-21 14:49:03	peterbjornx	also, do realise that your kernel should have syms with it
2020-12-21 14:49:15	peterbjornx	if it doesn't, learn to use IDA/ghidra/r2/whatever
2020-12-21 14:49:22	perdent	I SAID IT HAS DEBUG SYMBOLS
2020-12-21 14:49:30	klange	There's no need to yell.
2020-12-21 14:49:43	perdent	So why cant you read?
2020-12-21 14:49:46	-->	sangoma (~zeus@197.239.4.190) has joined #osdev
2020-12-21 14:49:47	perdent	Scroll up
2020-12-21 14:49:52	--	Mode #osdev [+o klange] by ChanServ
2020-12-21 14:49:59	peterbjornx	i am reading, you're asking for a built image of a kernel you're running
2020-12-21 14:50:09	peterbjornx	ergo you have the exec image
2020-12-21 14:50:16	peterbjornx	you say you have the syms
2020-12-21 14:50:21	peterbjornx	then what is it you need?
2020-12-21 14:50:30	perdent	I need the bzimage
2020-12-21 14:50:42	peterbjornx	you're running it, right?
2020-12-21 14:50:50	perdent	I am asking kindly if somoene can please give me the bzimage
2020-12-21 14:50:58	perdent	No, as it failed
2020-12-21 14:51:12	perdent	I was running it
2020-12-21 14:51:18	perdent	Until it failed
2020-12-21 14:51:23	peterbjornx	then it should still be in /boot, right?
2020-12-21 14:51:31	perdent	its not
2020-12-21 14:51:39	perdent	i looked already
2020-12-21 14:51:52	peterbjornx	then grab another pc and compile it
2020-12-21 14:52:10	Mutabah	Or, since I assume it's a packaged kernel - just download the pre-built package
2020-12-21 14:52:26	@klange	That's what I said.
2020-12-21 14:52:44	peterbjornx	anyway.
2020-12-22 05:26:07	--	irc: disconnected from server
2020-12-22 05:27:15	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-22 05:27:15	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-22 05:27:15	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-22 05:27:15	--	Channel #osdev: 281 nicks (2 ops, 0 voices, 279 normals)
2020-12-22 05:28:06	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-22 05:36:33	<--	SwiftMatt (~Objective@2601:282:4300:3e:d932:d9b0:b418:165c) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2020-12-22 05:39:56	-->	SwiftMatt (~Objective@2601:282:4300:3e:d932:d9b0:b418:165c) has joined #osdev
2020-12-22 05:53:20	-->	doug16k (~dougx@198-91-149-79.cpe.distributel.net) has joined #osdev
2020-12-22 05:53:33	-->	Tazmainian (~Tazmain@unaffiliated/tazmain) has joined #osdev
2020-12-22 05:56:11	zagto_	If I want to protect my system from PCIe device drivers with IOMMU in the future, do I have to restrict access from the driver to the device's configuration space? or are there really cases where the driver needs to write there at all?
2020-12-22 05:56:58	doug16k	iommu is involved with DMA and message signalled interrupts
2020-12-22 05:57:26	doug16k	when the device does a bus master read or write it will check the iommu page tables and possibly redirect it to a different physical address
2020-12-22 05:58:02	doug16k	iommu is paging to remap DMA
2020-12-22 05:58:31	zagto_	So if the driver has access to config space, it would still be able to move the BARs and mess up everything?
2020-12-22 05:59:18	doug16k	sure it can just mess up everything by disabling I/O space, and memory space
2020-12-22 05:59:27	doug16k	and disable bus mastering
2020-12-22 06:00:10	doug16k	do your drivers run at less than kernel privilege?
2020-12-22 06:01:52	doug16k	focus on the DMA (bus mastering) that comes from the device - that is what iommu is involved with
2020-12-22 06:02:42	clever	i can see how if your running the driver in userland, you might use the iommu to ensure DMA uses that userland paging tables, rather then accessing real physical
2020-12-22 06:03:04	clever	so memory from the drivers viewpoint, matches up with how the DMA thinks memory is laid out
2020-12-22 06:03:06	doug16k	so if some user program does a read and the driver sets up the device to write some RAM, the device could just write whatever RAM it likes
2020-12-22 06:03:32	doug16k	if the iommu is there, it will check and possibly remap the addresses coming from the device and use another address or block it
2020-12-22 06:04:01	doug16k	pci includes the concept of a load or store failing
2020-12-22 06:04:11	doug16k	you can tell a device suffered an abort like that in the pci status register
2020-12-22 06:05:15	zagto_	yes it's a microkernel design. I'm still working on the driver interface and have to decide what can be mapped into the process
2020-12-22 06:05:41	doug16k	so if the device tried to wipe all RAM, it would get nothing but aborts until it reached the regions that the iommu page tables said are ok, and it would use the addresses iommu says
2020-12-22 06:07:43	zagto_	that makes a lot of sense, I was just hoping maybe there was some protection mechanism for the config space as well
2020-12-22 06:07:46	doug16k	it's a translation layer from the physical address that the pci device said to access, to the the actual physical address being accessed
2020-12-22 06:08:04	doug16k	which architecture?
2020-12-22 06:10:07	doug16k	if x86 then you need to worry about blocking access to the I/O ports, otherwise you can probably enforce no access to config space with paging
2020-12-22 06:11:06	doug16k	as in PCI(e) ECAM (Enhanced Configuration Access Method)
2020-12-22 06:11:15	doug16k	which means memory mapped config space
2020-12-22 06:12:30	doug16k	if they can't access I/O port 0xcf8-0xcff, and they don't have ECAM mapped into their address space, they can't access config space
2020-12-22 06:15:03	-->	srjek|home (~srjek@2601:249:600:bb1:28cf:1596:456b:e25a) has joined #osdev
2020-12-22 06:15:14	zagto_	x86_64 for now. Currently without IOMMU at all, I just want an interface that still makes sense once I support it
2020-12-22 06:15:29	doug16k	if you expect malicious drivers then you would also need to ensure that they can't make the device DMA the ECAM by making it not present in their IOMMU page tables
2020-12-22 06:17:51	doug16k	do you have a piece of code that gets a list physical region descriptors of (physaddr,length) pairs for preparing to scatter/gather?
2020-12-22 06:18:01	doug16k	that is where iommu gets involved
2020-12-22 06:18:43	doug16k	if you have really high security, the device would not be able to dma anything except what that function said it could
2020-12-22 06:19:00	doug16k	getting those descriptors would authorize just those places for DMA
2020-12-22 06:19:30	doug16k	and when that DMA completed, it would block those regions again
2020-12-22 06:19:55	doug16k	if the intended use of iommu is heavy security
2020-12-22 06:20:48	zagto_	Yeah I thats sort of what I thought of for DMA, but I'm not there yet
2020-12-22 06:23:26	zagto_	I was just doing the code for giving the driver access to the BAR regions, and was wondering if it could be useful to give it the the config space page as well but that seems to be a bad idea
2020-12-22 06:23:56	doug16k	yeah that's a bit much if it's a microkernel and you don't implicitly trust the driver
2020-12-22 06:24:46	<--	CryptoDavid (uid14990@gateway/web/irccloud.com/x-rgzmtjuqgohnoigx) has quit (Quit: Connection closed for inactivity)
2020-12-22 06:26:34	doug16k	is it a real problem? barely
2020-12-22 06:28:06	doug16k	so if someone installs a driver from malware it can't read all memory?
2020-12-22 06:28:20	doug16k	wait, didn't they run the installer?
2020-12-22 06:28:26	doug16k	oh yeah they had admin privileges
2020-12-22 06:28:39	doug16k	in the installer
2020-12-22 06:29:08	doug16k	couldn't they just zero wipe your GPT and laugh?
2020-12-22 06:29:30	doug16k	go ahead and block my DMAs
2020-12-22 06:31:03	doug16k	make it so installers run and work with restricted privileges, then I will believe any security is possible
2020-12-22 06:31:54	-->	zagto__ (~zagto@200116b845427200dd6f5ec0913ed9a4.dip.versatel-1u1.de) has joined #osdev
2020-12-22 06:32:09	zagto__	True, it's one of the most unimportant things in my OS's security
2020-12-22 06:33:00	<--	zagto_ (~zagto@200116b845427200dd6f5ec0913ed9a4.dip.versatel-1u1.de) has quit (Read error: Connection reset by peer)
2020-12-22 06:33:00	<--	shikhin (~shikhin@unaffiliated/shikhin) has quit (Remote host closed the connection)
2020-12-22 06:33:00	<--	pointfree (sid204397@gateway/web/irccloud.com/x-wyzowclsjqxkkqrx) has quit (Ping timeout: 244 seconds)
2020-12-22 06:33:12	zagto__	I was thinking of this Broadcomm Wifi controller that could be manipulated over the air, iirc
2020-12-22 06:33:14	-->	shikhin (~shikhin@unaffiliated/shikhin) has joined #osdev
2020-12-22 06:34:08	zagto__	Not sure, but I think that even came with an exploit for a Linux driver for it
2020-12-22 06:34:09	<--	GeDaMo (~GeDaMo@unaffiliated/gedamo) has quit (Remote host closed the connection)
2020-12-22 06:34:33	-->	pointfree (sid204397@gateway/web/irccloud.com/x-rzxdlckgylrgouwl) has joined #osdev
2020-12-22 06:37:12	doug16k	you can do it on a device-by-device basis. you could just identity map all memory on "trusted" devices
2020-12-22 06:37:40	doug16k	then pay huge tax on each scatter/gather on crap like that
2020-12-22 06:37:52	doug16k	like that bad wifi design
2020-12-22 06:40:27	doug16k	for an API, you would make it so you open a scatter/gather "object" for some (vaddr,length) in a process, and it gives you physaddr,length to give the device, and when that I/O completed, they would need to "close" that scatter/gather object
2020-12-22 06:40:51	doug16k	possibly array of physaddr,length tuples if it is fragmented in physical memory
2020-12-22 06:41:47	doug16k	iommu could just give it one big range of addresses to hand device, and make iommu do the scattering/gathering
2020-12-22 06:43:24	doug16k	can remap that device's bus master address space so it just DMAs from address 0 to N and the iommu tables remap 0-N to the correct physical memory
2020-12-22 06:43:57	doug16k	then crappy 32-bit-only devices can work fine with any addresses
2020-12-22 06:44:04	-->	sortie (~sortie@D470948F.rev.sefiber.dk) has joined #osdev
2020-12-22 06:50:42	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 256 seconds)
2020-12-22 06:51:58	doug16k	for API you could also have it so that the driver won't even be invoked until the scatter/gather is created, the scatter/gather object could be packaged up into an I/O request packet
2020-12-22 06:52:23	doug16k	so by the time a driver sees it, it already did IOMMU things
2020-12-22 06:55:20	<--	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has quit (Quit: remby)
2020-12-22 06:55:28	<--	user24 (~user24@2a02:810a:1440:7304:8da9:cd44:62:30eb) has quit (Remote host closed the connection)
2020-12-22 06:55:33	doug16k	then you could have more control than it happening every time for every I/O, could be smarter
2020-12-22 07:01:06	zagto__	This sounds good. So the driver does not have to know if IOMMU is there it just sees a scatter/gather list that is one continous range
2020-12-22 07:01:29	doug16k	exactly
2020-12-22 07:01:37	zagto__	I have to admit I have never heard of I/O request packet. Seems to be a Windows thing?
2020-12-22 07:01:51	doug16k	well the idea of sending a struct of parameters isn't a new invention
2020-12-22 07:02:08	doug16k	do you have IPC message thing?
2020-12-22 07:02:09	doug16k	that
2020-12-22 07:02:46	doug16k	that queue of I/O operations is what an elevator scheduler reorders
2020-12-22 07:02:48	zagto__	Yes I have. Just had to google what it meant lol
2020-12-22 07:03:32	doug16k	that is what they call it in the windows driver API yeah
2020-12-22 07:04:16	doug16k	I mean the conceptual package of information that represents an I/O. a unit of scheduling for things like reordering for elevator seek
2020-12-22 07:05:46	doug16k	or a sequence of reads/writes to runs of LBAs on a block device with barriers between them to enforce ordering
2020-12-22 07:08:46	zagto__	Yeah I knew of that in the context of block devices/HDD. This is just an example right? or do we also reorder DMA requests somehow?
2020-12-22 07:10:40	doug16k	yes. usually I/Os go into a queue where it can enforce priorities or do things like reordering like elevator seek. it could have IOMMU set up in a stage of a pipeline where it prepares a read or write to do scatter gather DMA. it has to do that even without an IOMMU
2020-12-22 07:11:26	doug16k	a disk read or write needs to know the physical regions of memory to use, obviously
2020-12-22 07:11:28	-->	nvmd (~nvmd@200.186.98.74) has joined #osdev
2020-12-22 07:11:46	doug16k	that layer could do the IOMMU thing
2020-12-22 07:11:53	<--	dtm (~dtm@smuckola.org) has quit (Ping timeout: 265 seconds)
2020-12-22 07:13:16	doug16k	it might wait until the I/O is just about to be issued so it won't have to worry about pinning every I/O the whole time it is pending
2020-12-22 07:13:21	clever	2020-12-21 17:10:07 < doug16k> if x86 then you need to worry about blocking access to the I/O ports, otherwise you can probably enforce no access to config space with paging
2020-12-22 07:13:24	clever	2020-12-21 17:11:06 < doug16k> as in PCI(e) ECAM (Enhanced Configuration Access Method)
2020-12-22 07:13:39	clever	doug16k: the vl805 chip is a bit nasty, in that you have to poke at its config space to re-flash the spi chip attached to it
2020-12-22 07:14:00	clever	your basically using some magic registers in the config space, to hijack an spi controller inside the vl805
2020-12-22 07:15:40	doug16k	yeah, if they're using pci config space as MMIO registers to perform operations, they're doing it wrong
2020-12-22 07:16:14	clever	i think they are doing it that way, so the MMIO bar's expose a bog-standard xhci api
2020-12-22 07:16:28	clever	and all of the non-standard (firmware flashing) is hidden in the config space
2020-12-22 07:16:45	doug16k	for that, yeah, it's alright
2020-12-22 07:18:15	-->	dtm (~dtm@smuckola.org) has joined #osdev
2020-12-22 07:20:16	clever	but i can see how it violates the normal rules, and a microkernel might have to have a redesign of parts, to support it
2020-12-22 07:20:29	-->	sprocklem (~sprocklem@unaffiliated/sprocklem) has joined #osdev
2020-12-22 07:20:49	doug16k	they really want config space to be about configuring
2020-12-22 07:20:50	clever	but the binary to reflash it, is provided as a blob, arm static binary, linux
2020-12-22 07:21:02	clever	so it wouldnt run under that microkernel anyways
2020-12-22 07:21:04	doug16k	it can be hideously high overhead to access it
2020-12-22 07:21:12	clever	though, flashrom now has support, in a patch
2020-12-22 07:21:41	clever	in the case of the vl805, there are 2 registers in the config space, an addr and data reg
2020-12-22 07:21:58	clever	you set addr, then read/write the data reg, to read/write an address from within the vl805's addr space
2020-12-22 07:22:08	clever	so its baiscally a peek/poke RPC
2020-12-22 07:22:28	clever	then using that, you start hammering on the vl805's internal MMIO, for an spi controller
2020-12-22 07:22:40	clever	so your doing mmio over mmio, lol
2020-12-22 07:22:44	doug16k	yeah that's what old pci was with 0xcf8/0xcfc I/O access method on x86
2020-12-22 07:22:52	<--	dtm (~dtm@smuckola.org) has quit (Ping timeout: 246 seconds)
2020-12-22 07:22:59	doug16k	to access config space
2020-12-22 07:23:15	doug16k	addr/data
2020-12-22 07:23:28	clever	so a vl805 (pcie) card, using that old pci api, lol
2020-12-22 07:23:39	clever	you would set the config-space addr reg, into the IO addr reg
2020-12-22 07:23:47	clever	then use the IO addr reg, to write to the config-space addr reg
2020-12-22 07:23:52	doug16k	most fancy new pcie devices have that alternate access method
2020-12-22 07:23:56	<--	Halofreak1990 (~FooBar247@84-24-167-61.cable.dynamic.v4.ziggo.nl) has quit (Ping timeout: 240 seconds)
2020-12-22 07:23:57	clever	then 2 more io writes, to write to the config-space data reg
2020-12-22 07:24:07	doug16k	it's meant for bootstrap code that doesn't want to access those gigantic addresses
2020-12-22 07:24:08	clever	and thats now 4 io writes, to do a single vl805 addr space write, lol
2020-12-22 07:24:30	clever	yeah, i assumed pcie has just done away with the need for that mess
2020-12-22 07:24:37	doug16k	ah twice
2020-12-22 07:24:51	doug16k	pcie did, if you use ECAM
2020-12-22 07:24:58	clever	yeah, you have to set the config-space addr and data pair, to issue a write
2020-12-22 07:25:03	doug16k	oh that
2020-12-22 07:25:13	clever	but writing to addr over io, requires writting to a second layer addr+data pair
2020-12-22 07:25:28	clever	mmio over mmio over mmio, lol
2020-12-22 07:25:43	doug16k	I think of it like bank switching
2020-12-22 07:25:46	doug16k	it's a 4 byte window
2020-12-22 07:26:02	clever	the addr/data pair in the config space, are 32bit registers
2020-12-22 07:26:29	clever	this also reminds me, there was a silicon bug in some of the VC4 era pi's
2020-12-22 07:26:39	clever	the DSI controller refuses to accept any MMIO from the arm cores
2020-12-22 07:26:55	clever	the linux kms drivers "solved" that, by bouncing all MMIO off the DMA engine
2020-12-22 07:28:28	clever	from what ive heard, VC6 has fixed that bug
2020-12-22 07:29:04	-->	dtm (~dtm@smuckola.org) has joined #osdev
2020-12-22 07:35:21	-->	wgrant (~wgrant@ubuntu/member/wgrant) has joined #osdev
2020-12-22 07:39:32	-->	remby (~remby@2607:fea8:2c62:8800::9c0c) has joined #osdev
2020-12-22 07:48:53	<--	SwiftMatt (~Objective@2601:282:4300:3e:d932:d9b0:b418:165c) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2020-12-22 07:52:41	<--	dennis95 (~dennis95@mue-88-130-62-095.dsl.tropolys.de) has quit (Quit: Leaving)
2020-12-22 07:52:52	-->	SwiftMatt (~Objective@2601:282:4300:3e:d932:d9b0:b418:165c) has joined #osdev
2020-12-22 07:56:23	-->	di6mbav4pephrgjd (~CxHVGMeY~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-22 08:01:07	<--	zagto__ (~zagto@200116b845427200dd6f5ec0913ed9a4.dip.versatel-1u1.de) has quit (Quit: Leaving)
2020-12-22 08:02:23	<--	rcvalle (~rcvalle@unaffiliated/rcvalle) has quit (Ping timeout: 260 seconds)
2020-12-22 08:05:03	-->	rcvalle (~rcvalle@unaffiliated/rcvalle) has joined #osdev
2020-12-22 08:06:02	<--	gioyik (~gioyik@186.112.104.164) has quit (Quit: WeeChat 3.0)
2020-12-22 08:14:27	<--	Tazmainian (~Tazmain@unaffiliated/tazmain) has quit (Quit: Leaving)
2020-12-22 08:22:38	<--	vdamewood (~vdamewood@unaffiliated/vdamewood) has quit (Quit: Life beckons.)
2020-12-22 08:23:27	<--	pointfree (sid204397@gateway/web/irccloud.com/x-rzxdlckgylrgouwl) has quit (Ping timeout: 264 seconds)
2020-12-22 08:43:53	<--	Burgundy (~yomon@5-12-46-192.residential.rdsnet.ro) has left #osdev
2020-12-22 08:44:43	<--	di6mbav4pephrgjd (~CxHVGMeY~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-22 08:45:28	<--	Lowl3v3l (~Lowl3v3l@dslb-090-186-057-171.090.186.pools.vodafone-ip.de) has quit (Read error: Connection reset by peer)
2020-12-22 08:45:45	-->	Lowl3v3l (~Lowl3v3l@dslb-090-186-057-171.090.186.pools.vodafone-ip.de) has joined #osdev
2020-12-22 08:48:56	<--	nvmd (~nvmd@200.186.98.74) has quit (Ping timeout: 240 seconds)
2020-12-22 08:49:45	-->	dormito|2 (~dormito@cpe-24-243-3-252.satx.res.rr.com) has joined #osdev
2020-12-22 08:50:01	<--	dormito (~dormito@cpe-24-243-3-252.satx.res.rr.com) has quit (Ping timeout: 264 seconds)
2020-12-22 09:00:16	-->	di6mbav4pephrg (~WslgeqhE~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-22 09:22:57	-->	nvmd (~nvmd@200.186.98.74) has joined #osdev
2020-12-22 09:30:48	-->	mrvn (~mrvn@HSI-KBW-078-043-040-234.hsi4.kabel-badenwuerttemberg.de) has joined #osdev
2020-12-22 09:31:30	<--	mrvn (~mrvn@HSI-KBW-078-043-040-234.hsi4.kabel-badenwuerttemberg.de) has quit (Client Quit)
2020-12-22 09:32:03	-->	mrvn (~mrvn@HSI-KBW-078-043-040-234.hsi4.kabel-badenwuerttemberg.de) has joined #osdev
2020-12-22 09:53:23	<--	di6mbav4pephrg (~WslgeqhE~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-22 10:01:36	<--	mrvn (~mrvn@HSI-KBW-078-043-040-234.hsi4.kabel-badenwuerttemberg.de) has quit (Ping timeout: 240 seconds)
2020-12-22 10:08:21	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-22 10:10:59	<--	Sheilong (uid293653@gateway/web/irccloud.com/x-exdojaqirdkfmvpz) has quit (Quit: Connection closed for inactivity)
2020-12-22 10:12:40	<--	SwiftMatt (~Objective@2601:282:4300:3e:d932:d9b0:b418:165c) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2020-12-22 10:12:55	-->	perdent (~perdent@101.175.70.218) has joined #osdev
2020-12-22 10:13:03	perdent	Hey, I have a debian image: linux-image-unsigned-5.0.0-38-generic-dbgsym_5.0.0-38.41_amd64.ddeb  in which i would like to debug this specific kernel version, and I have a qemu config file, how would I boot up the kernel with qemu? What is the command?
2020-12-22 10:13:13	perdent	As I am wanting to debug the kernel
2020-12-22 10:13:32	perdent	So how would i boot up the kernel? with the qemu config file
2020-12-22 10:14:24	-->	Sheilong (uid293653@gateway/web/irccloud.com/x-duufhsmgfmkrtnrr) has joined #osdev
2020-12-22 10:14:24	<--	isaacwoods (~isaacwood@host109-146-213-228.range109-146.btcentralplus.com) has quit (Quit: WeeChat 2.9)
2020-12-22 10:15:24	<--	sortie (~sortie@D470948F.rev.sefiber.dk) has quit (Quit: Leaving)
2020-12-22 10:16:02	-->	SwiftMatt (~Objective@2601:282:4300:3e:d932:d9b0:b418:165c) has joined #osdev
2020-12-22 10:21:13	geist	perdent: again, as we've pointed out, we dont do linux here
2020-12-22 10:21:20	--	dormito|2 is now known as dormito
2020-12-22 10:21:22	geist	i dont know if we can say it any more. this is not a linux support channel
2020-12-22 10:26:45	perdent	geist: I understand, its just qemu and linux arent active
2020-12-22 10:26:54	perdent	and i asked there
2020-12-22 10:28:04	geist	i understand that you think that
2020-12-22 10:28:10	geist	but again *we are not a linux support channel*
2020-12-22 10:28:19	perdent	Ok
2020-12-22 10:28:23	geist	because someone on the street might understand linux doesn't mean you should go flag people down
2020-12-22 10:28:30	perdent	k
2020-12-22 10:28:52	geist	my guess is the answer you see is -kernel ...
2020-12-22 10:29:01	geist	but i dont know, i can only gently push you in some direction
2020-12-22 10:29:24	geist	and obviously the .deb file you have to extract or whatnot
2020-12-22 10:30:30	<--	SwiftMatt (~Objective@2601:282:4300:3e:d932:d9b0:b418:165c) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2020-12-22 10:31:18	-->	diwyjukjt5nwbmz (~WfSbLkAY~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-22 10:32:09	<--	dormito (~dormito@cpe-24-243-3-252.satx.res.rr.com) has quit
2020-12-22 10:32:37	-->	dormito (~dormito@cpe-24-243-3-252.satx.res.rr.com) has joined #osdev
2020-12-22 10:32:51	perdent	geist: extract it using what?
2020-12-22 10:34:50	jimbzy	dedebed
2020-12-22 10:35:44	-->	mrvn (~mrvn@HSI-KBW-078-043-040-234.hsi4.kabel-badenwuerttemberg.de) has joined #osdev
2020-12-22 10:52:36	<--	srjek|home (~srjek@2601:249:600:bb1:28cf:1596:456b:e25a) has quit (Ping timeout: 268 seconds)
2020-12-22 10:57:07	geist	exactly
2020-12-22 10:57:30	geist	i can only generally point you in the direction. i have no interest in trying to hand hold you through using these tools
2020-12-22 10:57:35	geist	not what the channel is for.
2020-12-22 11:04:36	<--	nvmd (~nvmd@200.186.98.74) has quit (Quit: Later nerds.)
2020-12-22 11:06:37	<--	remby (~remby@2607:fea8:2c62:8800::9c0c) has quit (Quit: remby)
2020-12-22 11:35:08	--	Mode #osdev [-o klange] by ChanServ
2020-12-22 11:35:19	klange	Yeah, we went through this already yesterday. :\
2020-12-22 11:37:03	geist	yah i threw em a bone in hope they'd go away with this new information
2020-12-22 11:37:08	geist	but alas, that was in vain
2020-12-22 11:38:21	perdent	k
2020-12-22 11:40:38	klange	Imagine Freenode like a huge shopping mall and the channels like stores. You've wandered into the hobbiest knitting store to ask for help with your store-bought sweater when there's a dozen other shops that deal with those sweaters right next door. Do we know about metaphorical sweaters? Probably, but that doesn't mean this is the right place to ask.
2020-12-22 11:43:53	geist	of course the trouble is no one is at the knitting store so you go next door thinking, well the gun store probably has learned some knitting by osmosis
2020-12-22 11:43:59	geist	and sure enough someone knows a thing about sweaters
2020-12-22 11:44:12	geist	so you figure, i'll just stay here and ask knitting questions because why not? I get an answer sometimes
2020-12-22 11:44:19	geist	trouble is the gun folks in the store get annoyed
2020-12-22 11:49:10	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-22 11:57:03	mrvn	knitting needles work in cross bows fairly well
2020-12-22 12:05:51	-->	sangoma (~zeus@154.225.1.123) has joined #osdev
2020-12-22 12:08:23	jimbzy	I see that A LOT on reddit.  Several times each day there are posts along the lines of, "I can't get XYZ to work.  I've tried nothing, and I'm all out of ideas! PLZ HLP"
2020-12-22 12:08:35	superleaf1995	>reddit
2020-12-22 12:08:58	jimbzy	I don't "get it" I guess :(
2020-12-22 12:11:41	Celelibi	Life hack: save a ton of time every day, don't browse reddit.
2020-12-22 12:12:10	jimbzy	True story.
2020-12-22 12:23:22	klange	Satisfaction with using Reddit, much like IRC, depends greatly on your choice of communities.
2020-12-22 12:34:23	<--	diwyjukjt5nwbmz (~WfSbLkAY~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-22 12:40:00	<--	Sheilong (uid293653@gateway/web/irccloud.com/x-duufhsmgfmkrtnrr) has quit
2020-12-22 12:51:49	-->	remby (~remby@2607:fea8:2c62:8800::9c0c) has joined #osdev
2020-12-22 13:03:37	-->	SkyZ (43538427@ool-43538427.dyn.optonline.net) has joined #osdev
2020-12-22 13:04:11	SkyZ	Question; Is there enough implementation details to make a PE OS kernel?
2020-12-22 13:04:34	SkyZ	http://www.brokenthorn.com/Resources/OSDevIndex.html
2020-12-22 13:04:36	bslsk05	​www.brokenthorn.com: BrokenThorn Entertainment
2020-12-22 13:05:06	SkyZ	I'm still in month 1 or 2 in implementing this.
2020-12-22 13:05:35	geist	what is 'PE'?
2020-12-22 13:05:55	SkyZ	.Exe or (Microsoft Portable Executable)
2020-12-22 13:06:15	geist	oh, irrelevant
2020-12-22 13:06:25	geist	the binary format almost doens't matter relative to the rest of the work
2020-12-22 13:06:39	geist	pick whichever one you want, or all of them if you want to make your life harder
2020-12-22 13:06:51	geist	it's like deciding on the paint color of the car before building it from scrap metal
2020-12-22 13:07:05	SkyZ	It is very important, geist
2020-12-22 13:07:10	geist	that being said, just use ELF. it's well understood
2020-12-22 13:07:22	geist	SkyZ: I disagree
2020-12-22 13:07:40	geist	unless you're attempting to load windows binaries or something, then it's not important what the binary format is
2020-12-22 13:07:55	geist	and if you're trying to load windows binaries, well the PE part of it is a tiiiiiiny tip of the iceberg
2020-12-22 13:08:04	geist	also essentially irrelevant compared to al lthe rest of the work
2020-12-22 13:08:17	SkyZ	That's exactly the point.
2020-12-22 13:08:43	geist	well, PE is pretty simple, so shouldn't be too hrad o figure out
2020-12-22 13:08:56	geist	it's no where as complex as ELF, from my understanding, and there are docs around
2020-12-22 13:09:07	geist	it's also the format for UEFI, so it's specced outside of just MSFT's OS
2020-12-22 13:09:26	SkyZ	It looks very complicated.
2020-12-22 13:09:27	SkyZ	https://docs.microsoft.com/en-us/windows/win32/debug/pe-format
2020-12-22 13:09:29	bslsk05	​docs.microsoft.com: PE Format - Win32 apps | Microsoft Docs
2020-12-22 13:09:37	geist	well, sure. it's all relative
2020-12-22 13:09:49	geist	like, writing OSes is very very complicated, this part of it is not so much compared to the rest of it
2020-12-22 13:10:10	geist	frankly, you hvae no idea how complicated as task you're thinking of taking up
2020-12-22 13:10:32	geist	there's a reason no one has done it. it's beyond the capability of even a very seasoned developer with a lot of time
2020-12-22 13:10:36	geist	(ie, 10 years or so)
2020-12-22 13:10:44	geist	soooo the PE part of it. whatever. that's the first step
2020-12-22 13:12:00	jimbzy	Yeah, I've been 'tinkering' for 20 years or so and it's still slow going.
2020-12-22 13:12:32	geist	all this aside, this shouldn't deter anyone from wanting to hack on oses. i just generally nudge people away from setting lofty goals like 'reimplement windows' or whatnot
2020-12-22 13:12:39	geist	because you *will* fail. it's simply not possible
2020-12-22 13:12:52	geist	and that's fine. there are some tasks outside the realm of single people
2020-12-22 13:13:04	geist	what's far more healthy is to set realistic goals so you can actually achieve them
2020-12-22 13:13:28	jimbzy	geist, It sure makes it a lot more fun.
2020-12-22 13:13:46	geist	also i should be a bit more precise: one can set goals like 'reimplement windows' but it's not useful if you dont actually fully understand wha tyou're getting into
2020-12-22 13:14:04	geist	ie, when you're first getting started and most of osdev is stuff you dont know you dont know, then setting lofty goals yo
2020-12-22 13:14:13	geist	you'l just hit dissapointment and probably give up
2020-12-22 13:15:10	SkyZ	I don't know what I'm doing.
2020-12-22 13:15:47	geist	good. that's the first step
2020-12-22 13:15:52	geist	nobody does when they get started
2020-12-22 13:15:53	SkyZ	I have an inkling of an idea that this is important to do it.
2020-12-22 13:15:56	jimbzy	SkyZ, None of us do.
2020-12-22 13:16:29	geist	later on you get more perspective so more stuff moves from the bucket of 'things you dont know you dont know' to 'things you know you dont know'
2020-12-22 13:16:47	remby	:O
2020-12-22 13:17:23	geist	it's the curse of learning stuff, you learn the boundaries of what you dont know and turns out it goes farther than you think
2020-12-22 13:18:05	remby	yeah that is very true
2020-12-22 13:18:25	remby	just surprised to hear you guys say you don't know either
2020-12-22 13:18:25	jimbzy	I think it's one of the purest forms of hacking.
2020-12-22 13:19:04	jimbzy	There is no getting around the fact that you have to understand things at the most basic level.
2020-12-22 13:19:32	klange	If there's anything I know it's that I know nothing.
2020-12-22 13:19:52	geist	oh that's fine. omg i am constantly amazed at what is out there. i focus mostly on low level osdev stuff, but there are whole universes of advanced algoritms and whatnot that are not my forte
2020-12-22 13:19:59	SkyZ	I realize that before windows came out, there was no windows but someone implemented it. I've been using it for 20 years, it should be easier to do it again.
2020-12-22 13:20:06	geist	i'm far more interested in making the cpu work well, because that's fun to me
2020-12-22 13:20:18	remby	awesome
2020-12-22 13:20:18	jimbzy	Like the conversation earlier about printf, the FPU, and -mgeneral-regs-only.  You're not going to find that on Quora :p
2020-12-22 13:20:30	remby	yeah haha
2020-12-22 13:20:32	geist	SkyZ: trouble is the scale is far bigger than you think
2020-12-22 13:20:39	geist	you're talking about hundreds of millinos of lines of code
2020-12-22 13:20:45	geist	even if you wanted to you can't ust type it all back in
2020-12-22 13:20:57	geist	and usr eyou can do it a bit better, hypothetically
2020-12-22 13:21:01	remby	windows is so amazing that it's still based on win32 which is ansi C
2020-12-22 13:21:09	klange	It's important to remember that it wasn't just "someone" who implemented Windows.
2020-12-22 13:21:12	klange	It was _lots_ of someones.
2020-12-22 13:21:13	remby	that just sounds like so much pain
2020-12-22 13:21:14	geist	but say you did t 5x as efficiently, that's still more LOC than you have a lifetype to type in
2020-12-22 13:21:26	jimbzy	klange, It was Bill Windows.
2020-12-22 13:21:29	klange	And they were getting paid to spend every workday doing it.
2020-12-22 13:21:40	jimbzy	Or was it Paul Microsoft?
2020-12-22 13:22:08	geist	yah they quietly forced Steve Xenix out a few years ago
2020-12-22 13:22:28	geist	Bob Dos died in a tragic plane accident
2020-12-22 13:22:39	klange	I thought that was Steve Macs.
2020-12-22 13:22:44	<--	benjif (~benjif@cpe-24-211-187-168.nc.res.rr.com) has quit (Quit: Leaving)
2020-12-22 13:22:45	jimbzy	Good old Robert Dos...
2020-12-22 13:23:03	klange	Oh, wait, no, Steve Macs is the one who got in a plance accident and _survived_.
2020-12-22 13:23:34	jimbzy	That's when he invented the flux capacitor.
2020-12-22 13:23:51	jimbzy	No, wait.  That was Segway Polo
2020-12-22 13:24:59	jimbzy	SkyZ, Have you ever messed with a disassembler or debugger?
2020-12-22 13:25:00	geist	Jim OS/2 was a weirdo that no one wanted to talk to
2020-12-22 13:25:07	<--	smeso (~smeso@unaffiliated/smeso) has quit (Quit: smeso)
2020-12-22 13:25:54	SkyZ	I have but it's gibberish
2020-12-22 13:26:17	SkyZ	They aren't smart
2020-12-22 13:26:55	jimbzy	You have to bust out your assembly language cheat sheet and follow along.
2020-12-22 13:28:10	jimbzy	Hex editors are fun, too.
2020-12-22 13:29:32	geist	i mean, yeah it's gibberish if you dont know what it means
2020-12-22 13:29:39	geist	but... you gotta know what it means
2020-12-22 13:29:56	geist	there's no shortcuts there. you gotta learn a lot of stuff if you want to be remotely successful here
2020-12-22 13:30:56	SkyZ	Maybe
2020-12-22 13:31:00	-->	smeso (~smeso@unaffiliated/smeso) has joined #osdev
2020-12-22 13:31:13	klange	You won't get very far as a witch or warlock if you don't know how to use a hex editor.
2020-12-22 13:31:34	geist	<zing>
2020-12-22 13:31:50	geist	SkyZ: more importantly, we're not interested in helping you if you'r enot interested in helping yourself
2020-12-22 13:32:29	geist	nothing is more frustrating than trying to help someone that just wants you to do the work for them and they dont want to spend any time actually learning things
2020-12-22 13:32:47	geist	usually they get the bozo bit set in my brain that says dont bother
2020-12-22 13:33:16	geist	it works out anyway because they always get frustrated and leave pretty quickly (relatively speakin, in the time scale that i've been sitting on this channel)
2020-12-22 13:33:26	SkyZ	There's really no point in building a new os
2020-12-22 13:33:35	superleaf1995	its fun tho
2020-12-22 13:33:57	geist	it's educational
2020-12-22 13:34:04	doug16k	no point in writing songs either. there are already songs
2020-12-22 13:34:26	klange	The Hacker News mindset... "It's not worth building if it's not a product you can sell!"
2020-12-22 13:34:31	SkyZ	Educational, not my reason.
2020-12-22 13:34:46	klange	Sometimes you make things not for the product but for the process of building it.
2020-12-22 13:34:58	geist	right, the other common reason: "go make a replacement for windows and sell it" is simply not feasible or reasonable
2020-12-22 13:35:03	doug16k	I learned very much
2020-12-22 13:35:08	geist	at least for a single person. reactos has made a stab about it
2020-12-22 13:35:09	doug16k	still learning stuff
2020-12-22 13:35:12	superleaf1995	unless you are big corp
2020-12-22 13:35:16	superleaf1995	and have the moneyz
2020-12-22 13:35:33	geist	right, and i can precisely tell you that that can work and does require moneyz
2020-12-22 13:36:29	geist	but it's really about dumping a crazy amount of money into it for years via lots of engineers and then hope you net something in the long run. and virtually nothig but large corporations have that kinda of money nowadays
2020-12-22 13:36:38	geist	because the barrier of entry is so much higher now
2020-12-22 13:36:53	superleaf1995	yeah
2020-12-22 13:36:59	geist	however, that's super cool about osdev is kernels themselves are not that much more complicated than in the 70s or 80s or 90s
2020-12-22 13:37:22	geist	so you can kinda at least build a decent kernel or the first couple stages of a new os as a single person relatively easily
2020-12-22 13:37:39	geist	it's the enormous layers of all the extra stuff that quickly gets out of hand
2020-12-22 13:37:52	geist	and i mean relatively easily as in 'feasible'
2020-12-22 13:37:58	geist	klange is a great example
2020-12-22 13:38:05	superleaf1995	when you implement memory management its the best thing of the world
2020-12-22 13:38:17	superleaf1995	since after that everythign becomes eeasy
2020-12-22 13:40:48	remby	has anyone ever built an os in userspace and then tried to interface it with hardware later?
2020-12-22 13:40:50	SkyZ	I think I can make an os but doesn't mean I should.
2020-12-22 13:41:37	SkyZ	I think this problem applies to this #osdev
2020-12-22 13:42:04	SkyZ	Why reimplement an OS?
2020-12-22 13:42:16	SkyZ	You are reimplementing Linux
2020-12-22 13:42:16	superleaf1995	It's fun
2020-12-22 13:42:21	superleaf1995	No
2020-12-22 13:42:32	doug16k	it's like weight lifting for programming
2020-12-22 13:42:38	superleaf1995	Yeah
2020-12-22 13:42:39	geist	SkyZ: uh no? we're not implementing linux
2020-12-22 13:42:43	superleaf1995	You learn a LOT of information
2020-12-22 13:42:48	SkyZ	and linux is 2-3% of the share in os
2020-12-22 13:42:51	superleaf1995	That can be valuable for the future
2020-12-22 13:42:52	geist	to just lump us all into that is to grossly misunderstand what we're doing
2020-12-22 13:43:01	SkyZ	ELF is linux
2020-12-22 13:43:05	geist	...
2020-12-22 13:43:19	geist	that is absolutely not true in any way at all
2020-12-22 13:43:31	geist	that's like say 'rubber are cars'
2020-12-22 13:43:41	geist	because cars have tires on them
2020-12-22 13:44:04	superleaf1995	elf is not linux, this is so wrong in many ways. Elf is a file format for executables, that can run on macOS too
2020-12-22 13:44:19	geist	and more impotrantly, ELF way predated linux anyway
2020-12-22 13:44:26	geist	it was a portable format invented in the 80s
2020-12-22 13:44:51	superleaf1995	Also people dont base off linux, thats called an distro. People are based of a system called UNIX
2020-12-22 13:44:53	geist	to try to get some sort of uniform cross-os standard format
2020-12-22 13:45:22	geist	i think it may have started with like OSF/1 or something. now i'm curious
2020-12-22 13:45:25	SkyZ	-smh-
2020-12-22 13:45:49	superleaf1995	SkyZ: read about unix  internal components
2020-12-22 13:45:58	superleaf1995	thenr ead the source code of all osdev projects
2020-12-22 13:46:19	geist	ah looked like ELF came along with SVR4 unix
2020-12-22 13:46:27	SkyZ	#offtopic
2020-12-22 13:46:29	geist	1988
2020-12-22 13:46:37	SkyZ	Basically
2020-12-22 13:46:58	SkyZ	End of the day most people don't download linux
2020-12-22 13:47:06	superleaf1995	Yeah they do
2020-12-22 13:47:09	superleaf1995	business do
2020-12-22 13:47:11	superleaf1995	everyone does
2020-12-22 13:47:25	doug16k	SkyZ, so it's better if it is incompatible with all existing software, and nothing any existing program does will work, just to make sure it isn't posix or anything like an existing OS
2020-12-22 13:47:28	superleaf1995	your phone has linux; so in the end, everyone does
2020-12-22 13:48:01	SkyZ	Android sure.
2020-12-22 13:48:22	geist	also the meta question here is why would you come to a channel of folks doing hobby os development and then tell them what they're doing is a waste of time
2020-12-22 13:48:37	geist	if anything other than to troll. do you have a suggestion as to what we should be doing otherwise?
2020-12-22 13:48:43	geist	else... frankly, leave.
2020-12-22 13:48:46	doug16k	I could make every one of my APIs perfectly identical to linux and my os wouldn't even be similar to linux
2020-12-22 13:49:01	SkyZ	I just want to make a new os
2020-12-22 13:49:11	superleaf1995	SkyZ: see bare bones tutorial
2020-12-22 13:49:21	SkyZ	That's not what I mean with os
2020-12-22 13:49:21	superleaf1995	https://wiki.osdev.org/Bare_Bones
2020-12-22 13:49:22	bslsk05	​wiki.osdev.org: Bare Bones - OSDev Wiki
2020-12-22 13:49:26	SkyZ	You don't start there!
2020-12-22 13:49:31	superleaf1995	that is how you make an os
2020-12-22 13:49:40	klange	And where, then, _do_ you start?
2020-12-22 13:49:41	superleaf1995	then you make the interface, mouse, video, windows, etc
2020-12-22 13:50:47	SkyZ	Why am I on my computer right now?
2020-12-22 13:51:00	superleaf1995	because it came with windows preinstalled
2020-12-22 13:51:00	SkyZ	*not sarcastic*
2020-12-22 13:51:23	geist	okay, this AI is getting more erratic
2020-12-22 13:51:56	superleaf1995	SkyZ: really, if you want to make an OS, start by making the kernel. Then you can make some decent graphics akin "windows"
2020-12-22 13:51:57	klange	> That's not what I mean with os
2020-12-22 13:52:10	klange	What _do_ you mean? Tell us what you think an OS is, what it is you want to build.
2020-12-22 13:52:14	geist	klange: yah that may be the crux if this whole thing
2020-12-22 13:52:32	geist	it's possible that they have a completely different concept of what we're even talking about
2020-12-22 13:52:55	SkyZ	It can run your applications
2020-12-22 13:53:09	geist	that's an attribute, but a start yes
2020-12-22 13:53:12	geist	anything else?
2020-12-22 13:54:17	SkyZ	That's the whole thing
2020-12-22 13:54:33	superleaf1995	You want a desktop
2020-12-22 13:54:39	superleaf1995	Not an OS
2020-12-22 13:55:20	klange	That's far too vague to describe an OS.
2020-12-22 13:55:50	SkyZ	Use your imagination
2020-12-22 13:56:02	klange	That's what makes it too vague.
2020-12-22 13:56:05	SkyZ	You got RAM, CPU, and other components
2020-12-22 13:56:09	geist	well, no. we're talking about concerete things here
2020-12-22 13:56:10	klange	Those aren't part of an OS.
2020-12-22 13:56:15	<--	remby (~remby@2607:fea8:2c62:8800::9c0c) has left #osdev ("Good Bye")
2020-12-22 13:56:21	doug16k	I think I might find a mountain climbing club and go there and whine that there's no point climbing it if you just go back down again when you are done
2020-12-22 13:56:23	geist	you can't just 'use your imagination' to hand wave away things that are too complicated
2020-12-22 13:56:28	geist	the details matter
2020-12-22 13:56:46	geist	'what is a mountain' 'it's a place where you stand at the top'
2020-12-22 13:56:46	SkyZ	Well, it's applications that it
2020-12-22 13:56:58	SkyZ	its only applications
2020-12-22 13:57:00	geist	'okay, so can you describe anything else about the mountain?' 'use your imagination'
2020-12-22 13:57:07	superleaf1995	You want a desktop, not an OS, a desktop runs applications, an OS runs everything.
2020-12-22 13:57:11	klange	What was it Sir Hillary said about climbing Everest? "Because it's there."?
2020-12-22 13:57:22	klange	What are applications?
2020-12-22 13:57:43	klange	Whose applications are we running?
2020-12-22 13:58:01	klange	What does it mean to run an application in the first place?
2020-12-22 13:58:25	superleaf1995	Does it require mouse and keyboard?
2020-12-22 13:58:56	SkyZ	To be honest I just want windows applications, then whatever else
2020-12-22 13:59:09	superleaf1995	Ah
2020-12-22 13:59:17	superleaf1995	Then use windows?
2020-12-22 13:59:32	superleaf1995	Or what are you trying to achieve?
2020-12-22 13:59:51	SkyZ	Reverse-compatibility
2020-12-22 13:59:54	doug16k	running applications sounds easy when you leave out all the details that have to work for any of that to happen, like memory management, filesystems, disk and network I/O, drawing and updating a GUI efficiently, time management, guarding against malfunctioning software, recovering from exceptions, etc
2020-12-22 13:59:55	klange	Many of labored for decades to achieve that goal.
2020-12-22 14:00:50	klange	Many have*
2020-12-22 14:00:54	superleaf1995	SkyZ: With what applications, Windows XP, DOS, macOS?
2020-12-22 14:01:12	SkyZ	Just Windows NT
2020-12-22 14:01:16	superleaf1995	Ah
2020-12-22 14:01:16	klange	It sounds like you want Wine or ReactOS. Go look at how big they are.
2020-12-22 14:01:23	superleaf1995	You could use Wine
2020-12-22 14:01:51	superleaf1995	Because windows itself is pretty... not so good for the NT line
2020-12-22 14:01:53	SkyZ	The issue is none of this is reverse-compatible
2020-12-22 14:01:56	superleaf1995	considering NT is 16-bits.
2020-12-22 14:02:10	superleaf1995	Wine supports Windows 10 down to Windows 9x
2020-12-22 14:02:14	SkyZ	You make an OS and it's not reverse-compatible
2020-12-22 14:02:22	superleaf1995	Windows is
2020-12-22 14:02:29	superleaf1995	reverse compatible with itself
2020-12-22 14:02:37	doug16k	you see people tending to make posix stuff because it is feasible to recompile everything with your OS toolchain. you can't really do that for windows
2020-12-22 14:02:51	doug16k	no source
2020-12-22 14:03:02	SkyZ	You make an os, you can't run paint
2020-12-22 14:03:11	superleaf1995	yes you can
2020-12-22 14:03:12	SkyZ	It's two seperate things
2020-12-22 14:03:14	superleaf1995	linux has paint
2020-12-22 14:03:43	superleaf1995	and
2020-12-22 14:03:46	superleaf1995	oh no
2020-12-22 14:03:53	superleaf1995	they are not separate things
2020-12-22 14:04:08	superleaf1995	apps and oses needs to stay together otherwise e
2020-12-22 14:04:54	superleaf1995	You can make an OS and still able to run Paint, just it takes a bit of work.
2020-12-22 14:06:44	doug16k	it's not fun to implement exactly windows. you'll be going along and run into something that is infuriatingly stupid, and you have to replicate that stupid API that has really weird requirements
2020-12-22 14:06:46	doug16k	you want that?
2020-12-22 14:07:44	SkyZ	I just want the apps to work
2020-12-22 14:08:01	superleaf1995	Use Linux w Wine
2020-12-22 14:08:05	superleaf1995	Or use WIndows itself
2020-12-22 14:08:21	superleaf1995	If you are running Windows NT apps you can run them in Wine or Windows
2020-12-22 14:10:05	doug16k	then the opposite will happen, you'll implement it just fine, but some stupid program is such a mess of barely working, that even slightly changing anything breaks it in weird ways
2020-12-22 14:10:35	jimbzy	RtlWriteDecodedUcsDataIntoSmartLBlobUcsWritingContext
2020-12-22 14:10:36	superleaf1995	> but some stupid program is such a mess of barely working
2020-12-22 14:10:42	superleaf1995	like 99% of windows
2020-12-22 14:13:28	doug16k	someone will rely on the invisible padding between fields (added for alignment) and you may not have the same uninitialized values end up there. you just broke some flaky program
2020-12-22 14:17:39	SkyZ	It's just applications
2020-12-22 14:17:41	doug16k	binary compatibility is very hard. starting from source and recompiling for your OS with your OS toolchain is reasonable and doable
2020-12-22 14:18:43	kingoffrance	the terrifying thing about that jimbzy is there are fates worse than camelCase
2020-12-22 14:21:16	-->	Goplat (~Goplat@reactos/developer/Goplat) has joined #osdev
2020-12-22 14:22:38	superleaf1995	ConvertSecurityDescriptorToStringSecurityDescriptorW
2020-12-22 14:22:51	superleaf1995	*why*
2020-12-22 14:23:21	doug16k	that's nothing. C++ symbols could get you booted from an irc server
2020-12-22 14:23:52	doug16k	it's too long though, yeah
2020-12-22 14:23:59	doug16k	what name would you suggest?
2020-12-22 14:24:31	doug16k	CvtStrSecDescToStrSecDescW?
2020-12-22 14:24:48	superleaf1995	just add a function pointer smh
2020-12-22 14:25:07	doug16k	er, CvtSecDescToStrSecDescW
2020-12-22 14:25:12	superleaf1995	struct secDesc { void (*toWsecDesc)(...); };
2020-12-22 14:25:33	doug16k	it's a kernel32.dll export though right?
2020-12-22 14:25:45	doug16k	it's a function
2020-12-22 14:25:45	superleaf1995	yeah ig
2020-12-22 14:26:04	superleaf1995	they could just make a function pointer to the long function name
2020-12-22 14:26:11	<--	SkyZ (43538427@ool-43538427.dyn.optonline.net) has quit (Remote host closed the connection)
2020-12-22 14:27:19	doug16k	they probably thought ConvertSecurityDescriptorToStringSecurityDescriptorKThanxByeW was a bit long so they shortened it a little bit
2020-12-22 14:27:35	superleaf1995	yeah
2020-12-22 14:27:49	superleaf1995	short your function names:tm: with the new function shortener:tm:
2020-12-22 14:28:31	klange	SystemPlatformWidgetBeanFactoryProducerRecordYouGuysHaveIDEsDontYou
2020-12-22 14:29:30	superleaf1995	Lets not forget the LWKSIF
2020-12-22 14:29:37	superleaf1995	windows likes to scream
2020-12-22 14:29:44	doug16k	do programming interviews have the candidate saying that the autocomplete isn't working on the pad and pen that was just pushed in their direction?
2020-12-22 14:30:19	doug16k	"that little popup thing isn't appearing when I write the first three letters of a function"
2020-12-22 14:30:44	superleaf1995	"hired!:
2020-12-22 14:32:54	doug16k	"this is a weird tablet, how do you reboot this thing?"
2020-12-22 14:34:09	-->	c2a1 (~u0_a100@42.sub-174-228-9.myvzw.com) has joined #osdev
2020-12-22 14:38:05	doug16k	"It's called paper. people used to write on it with ink"
2020-12-22 14:38:16	superleaf1995	Heh
2020-12-22 14:41:11	superleaf1995	"Aww, my paper crashed!"
2020-12-22 14:41:54	doug16k	ya paper locks up all the time
2020-12-22 14:42:32	-->	c2a1_ (~u0_a100@70.127.211.140) has joined #osdev
2020-12-22 14:43:41	doug16k	I get tired of waiting for it to draw the UI so I just draw it myself
2020-12-22 14:44:38	superleaf1995	yep
2020-12-22 14:44:52	superleaf1995	1 frame per day
2020-12-22 14:45:06	<--	c2a1 (~u0_a100@42.sub-174-228-9.myvzw.com) has quit (Disconnected by services)
2020-12-22 14:45:16	--	c2a1_ is now known as c2a1
2020-12-22 14:50:12	geist	well, that was a pretty big waste of time (engaging with SkyZ)
2020-12-22 14:50:24	geist	i was hoping for some sort of clarity, but it's clear they have no idea what they want
2020-12-22 14:50:34	geist	just some vague concept of some sort of windows os that's not windows
2020-12-22 14:50:47	geist	for reasons that are not clear. do they not want to pay for it? have a beef with MSFT? no idea
2020-12-22 14:51:37	doug16k	if implementing kernel32 + user32 + gdi32 were enough to run anything, it would be fun
2020-12-22 14:51:51	doug16k	but no, everything took a dependency on every stupid little thing they could find
2020-12-22 14:52:23	doug16k	they would cocreateinstance some obscure WMI thing for vbasic admin scripting
2020-12-22 14:53:06	geist	either way i'd vote for not repeating that particular exercise
2020-12-22 14:54:49	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 264 seconds)
2020-12-22 15:04:11	doug16k	I think he plays along for a while so he can blurt out one of those fatalistic comments about the total futility of it all
2020-12-22 15:08:04	-->	ouyes (~ouyes@117.89.13.55) has joined #osdev
2020-12-22 15:08:09	moon-child	there's certainly some trolling going on.  I think also some sincerity, though; at least moreso than with most trolls
2020-12-22 15:09:05	doug16k	I measure my project by how much more I know now, not how cool someone thinks it is
2020-12-22 15:09:14	doug16k	or what binaries I run
2020-12-22 15:11:20	geist	yahi suspect he's less of a troll and more of a completely misinformed kid thats looking for some attention
2020-12-22 15:11:34	doug16k	if you get all the way to memory manager working and isolating address spaces and switching threads, you could go do university computer science courses
2020-12-22 15:11:35	geist	not to be ageist, but there's sort of a minimum maturity bar
2020-12-22 15:14:22	moon-child	I'm afraid you don't have much of a choice but to be  a geist
2020-12-22 15:14:33	geist	hmm?
2020-12-22 15:14:46	geist	oh haha, ageist, a geist
2020-12-22 15:14:47	geist	got it
2020-12-22 15:14:53	geist	noice
2020-12-22 15:15:16	superleaf1995	aslr is the true knife in mm
2020-12-22 15:16:58	superleaf1995	but yeah i agree there is a bar when it comes to osdev
2020-12-22 15:17:43	doug16k	bit nuts to come into it not even knowing programming. it's hard enough when you already completely know assembly and high level languages and build systems and linking issues
2020-12-22 15:18:28	doug16k	it's like going to an aerobatic jet flying club and not even having a clue about how to fly a plane at all
2020-12-22 15:18:34	superleaf1995	yeah, the learning curve is high
2020-12-22 15:18:48	superleaf1995	but it can teach you a lot if you climb it considerably
2020-12-22 15:19:13	superleaf1995	supposing you have infinite lifes in the aerobit jet flying club :P
2020-12-22 15:21:39	geist	sigh. my network problems over th elast few days seems to have been cleared up by just rebooting the cable modem
2020-12-22 15:21:50	geist	of which i have zero ability to inspect
2020-12-22 15:22:00	doug16k	yes most of us learned our aerobatics crashing straight down into the ground at speeds enough to tear it apart with aerodyamic forces
2020-12-22 15:24:59	superleaf1995	yes
2020-12-22 15:30:21	-->	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has joined #osdev
2020-12-22 15:38:58	<--	Beato (~Beato@unaffiliated/beato) has quit (Remote host closed the connection)
2020-12-22 15:39:22	-->	Beato (~Beato@unaffiliated/beato) has joined #osdev
2020-12-22 15:39:24	-->	chopical (~chopical@host-67-58-213-115.public.eastlink.ca) has joined #osdev
2020-12-22 16:22:34	<--	superleaf1995 (bdb3cb73@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.203.115) has quit (Quit: Connection closed)
2020-12-22 17:03:24	-->	Burgundy (~yomon@5-12-46-192.residential.rdsnet.ro) has joined #osdev
2020-12-22 17:17:17	<--	Prf_Jakob (jakob@volt/developer/jakob) has quit (Ping timeout: 256 seconds)
2020-12-22 17:17:24	-->	Prf_Jakob (jakob@volt/developer/jakob) has joined #osdev
2020-12-22 17:17:51	<--	j`ey (~joey@unaffiliated/jey/x-00002) has quit (Ping timeout: 256 seconds)
2020-12-22 17:40:03	<--	CrystalMath (~coderain@reactos/developer/theflash) has quit (Quit: May we live long and die out | http://vhemt.org/)
2020-12-22 17:40:59	<--	knebulae (~nebulae@c-73-145-147-252.hsd1.mi.comcast.net) has quit (Read error: Connection reset by peer)
2020-12-22 17:41:23	-->	knebulae (~nebulae@c-73-145-147-252.hsd1.mi.comcast.net) has joined #osdev
2020-12-22 17:53:18	<--	Goplat (~Goplat@reactos/developer/Goplat) has quit (Remote host closed the connection)
2020-12-22 17:55:42	-->	Belxjander (~Belxjande@sourcemage/Mage/Abh-Elementalist) has joined #osdev
2020-12-22 18:02:52	-->	dennis95 (~dennis95@87.123.205.217) has joined #osdev
2020-12-22 18:14:26	-->	S_Gautam (uid286066@gateway/web/irccloud.com/x-fnropbjgdutoaicy) has joined #osdev
2020-12-22 18:16:44	-->	j`ey (~joey@unaffiliated/jey/x-00002) has joined #osdev
2020-12-22 18:17:36	j`ey	geist: woot m1 just arrived!
2020-12-22 18:20:42	klange	Would you say that makes you... armed and dangerous?
2020-12-22 18:21:52	Mutabah	Carbine or Garand?
2020-12-22 18:21:57	Mutabah	:D
2020-12-22 18:22:13	Kazinsal	ba-dum crash
2020-12-22 18:24:18	klange	Abrams
2020-12-22 18:34:18	geist	j`ey: oh yay
2020-12-22 18:34:55	j`ey	but my gf is going to wrap it, theres only 4days until xmas D:
2020-12-22 18:35:25	j`ey	*3
2020-12-22 18:35:40	j`ey	turns out I could have selected US layout, but at the time I ordered it that wsnt an option, so I got UK layout
2020-12-22 18:40:48	Kazinsal	the myriad different keyboard layouts among english-speaking nations is one of the most convoluted and annoying clusterfucks of computing
2020-12-22 18:41:27	Kazinsal	I would wager that the number of anglophone Canadians using "Canadian Mulitlingual Standard" intentionally is at most two digits
2020-12-22 18:41:59	froggey	I took great pleasure in making the uk qwerty map the default for my OS and confusing all the americans that tried to use it. finally, sweet revenge
2020-12-22 18:42:30	j`ey	froggey: hehe
2020-12-22 18:43:20	-->	sortie (~sortie@D470948F.rev.sefiber.dk) has joined #osdev
2020-12-22 18:43:24	Kazinsal	I had a friend in high school who took pleasure in confusing other people who tried to use his computers through a combination of esoteric early-mid-2000s linux distros and dvorak
2020-12-22 18:44:00	Kazinsal	then he got addicted to cocaine and ended up moving to alberta to become an avionics technician
2020-12-22 18:44:05	klange	Here in Japan we generally have access to the abysmal JIS layout, and the American layout.
2020-12-22 18:44:08	j`ey	as you do
2020-12-22 18:46:57	sortie	Hello hello
2020-12-22 18:53:43	<--	knebulae (~nebulae@c-73-145-147-252.hsd1.mi.comcast.net) has quit (Quit: Leaving)
2020-12-22 18:54:08	-->	knebulae (~nebulae@c-73-145-147-252.hsd1.mi.comcast.net) has joined #osdev
2020-12-22 19:01:16	<--	sprocklem (~sprocklem@unaffiliated/sprocklem) has quit (Ping timeout: 240 seconds)
2020-12-22 19:16:38	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-22 19:20:04	-->	marmotini (~marmotini@41.80.66.85) has joined #osdev
2020-12-22 19:23:59	<--	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has quit (Remote host closed the connection)
2020-12-22 19:27:42	-->	GeDaMo (~GeDaMo@unaffiliated/gedamo) has joined #osdev
2020-12-22 19:29:45	-->	pointfree (sid204397@gateway/web/irccloud.com/x-hwnghauqluozckdb) has joined #osdev
2020-12-22 19:36:52	geist	j`ey: you like the US layout better, or you actually are used to it?
2020-12-22 19:37:00	geist	i thought you were in UK and/or are from UK
2020-12-22 19:37:24	j`ey	I bought my previous laptop when I visiting the US, so I'm used to it :)
2020-12-22 19:37:38	geist	aside from the different symbols over the numbers the enter key would take some amount of getting used to (the UK version)
2020-12-22 19:37:41	j`ey	also the fat enter is kinda ugly. but I'll survive, im not that fussy
2020-12-22 19:38:01	geist	oh also fun weird thing that took me a while to get used to: the lenovo thing i got the other day came with some pretty weird lenovo wireless keyboard
2020-12-22 19:38:05	geist	okay, that's fine. but it's *big*
2020-12-22 19:38:23	geist	like the keys are actually 10% wider and spaced out from a 'standard' key width
2020-12-22 19:38:50	geist	then it got me thinking about what the standard key layout width and pitches are
2020-12-22 19:39:03	j`ey	oh yeah, how is that lenovo nano thing?
2020-12-22 19:39:30	geist	it does precisely what it says. it's a nice little box, gets luke warm. runs windows 10 like a champ
2020-12-22 19:40:43	j`ey	(tbh if I hate the keyboard that much, my gf can have this and I'll buy another with the US layout >_<)
2020-12-22 19:41:26	geist	reallt the only bad thing about the lenovo thing is it only has 4GB ram, but i was planning on using it basically as a little terminal and/or lab computer
2020-12-22 19:41:32	geist	ie, view pdfs and talk to things over serial
2020-12-22 19:41:41	j`ey	Im going to investigate some docks and stuff. so I can get a nicer home office, I kinda just have stuff plugged in with wires everywhere
2020-12-22 19:41:55	j`ey	put it on a trolley :D
2020-12-22 19:59:07	-->	marmotini_ (~marmotini@41.80.66.85) has joined #osdev
2020-12-22 20:01:56	<--	marmotini (~marmotini@41.80.66.85) has quit (Ping timeout: 240 seconds)
2020-12-22 20:03:37	-->	bytefire (~bytefire@unaffiliated/bytefire) has joined #osdev
2020-12-22 20:05:00	<--	Digit (~user@fsf/member/digit) has quit (Ping timeout: 256 seconds)
2020-12-22 20:05:01	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 264 seconds)
2020-12-22 20:10:56	-->	snowball (~rhcake@2a02:610:7501:feff:97eb:fb29:5269:b07c) has joined #osdev
2020-12-22 20:20:02	-->	marmotini (~marmotini@41.80.66.85) has joined #osdev
2020-12-22 20:22:38	<--	marmotini_ (~marmotini@41.80.66.85) has quit (Ping timeout: 260 seconds)
2020-12-22 20:23:47	<--	S_Gautam (uid286066@gateway/web/irccloud.com/x-fnropbjgdutoaicy) has quit (Quit: Connection closed for inactivity)
2020-12-22 20:23:53	<--	marmotini (~marmotini@41.80.66.85) has quit (Read error: Connection reset by peer)
2020-12-22 20:24:38	<--	k4m1 (~k4m1@188.166.104.227) has quit (Remote host closed the connection)
2020-12-22 20:25:25	-->	k4m1 (~k4m1@188.166.104.227) has joined #osdev
2020-12-22 20:35:13	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-22 20:44:36	-->	Digit (~user@fsf/member/digit) has joined #osdev
2020-12-22 20:49:56	-->	Thedarkb (~beno@80.233.34.145) has joined #osdev
2020-12-22 21:05:01	<--	sangoma (~zeus@154.225.1.123) has quit (Ping timeout: 246 seconds)
2020-12-22 21:06:30	-->	sangoma (~zeus@154.225.1.123) has joined #osdev
2020-12-22 21:14:28	marshmallow	could the hardware clocks (system timer) potentially start drifting?
2020-12-22 21:14:54	marshmallow	isn't it a bit difficult that the quartz clocks drift?
2020-12-22 21:17:31	marshmallow	(if it is based on quartz)
2020-12-22 21:22:31	-->	Sheilong (uid293653@gateway/web/irccloud.com/x-tihixihqvmmwogqg) has joined #osdev
2020-12-22 21:23:11	geist	sure
2020-12-22 21:23:18	geist	by definitely they drift the instant the start ticking
2020-12-22 21:23:24	geist	by definition
2020-12-22 21:23:48	geist	since you can't have two quartz crystals tick at precisely the same rate
2020-12-22 21:24:00	-->	gog (~ada@nova-046-182-189-142.nat.nova.is) has joined #osdev
2020-12-22 21:25:35	<--	tzlil (~tzlil@unaffiliated/tzlil) has quit (Read error: Connection reset by peer)
2020-12-22 21:25:52	-->	tzlil (~tzlil@unaffiliated/tzlil) has joined #osdev
2020-12-22 21:26:40	 *	gog meows
2020-12-22 21:39:19	<--	Belxjander (~Belxjande@sourcemage/Mage/Abh-Elementalist) has quit (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
2020-12-22 21:41:25	-->	Belxjander (~Belxjande@sourcemage/Mage/Abh-Elementalist) has joined #osdev
2020-12-22 21:52:09	geist	gog: hola!
2020-12-22 21:53:08	gog	howdy
2020-12-22 21:55:31	-->	isaacwoods (~isaacwood@host109-146-213-228.range109-146.btcentralplus.com) has joined #osdev
2020-12-22 22:04:39	gog	https://i.imgur.com/Qt6AE9i.png
2020-12-22 22:06:22	j`ey	gog: girls who say meow?
2020-12-22 22:08:24	gog	also that
2020-12-22 22:09:41	marshmallow	geist: why not?
2020-12-22 22:10:05	marshmallow	you just make them start ticking at the very some moment, no?
2020-12-22 22:12:19	-->	diwyjukjt (~yDFNXpCs~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-22 22:12:58	gog	not all crystals are going to have the exact same frequency
2020-12-22 22:13:10	gog	and possibly not a completely invariant frequency
2020-12-22 22:13:29	gog	there's always going to be some degree of uncertainty
2020-12-22 22:15:14	chopical	couldn't you just get 2 crystals that are ticking on both side of the neutral and then just take the average of both of them.
2020-12-22 22:16:23	<--	diwyjukjt (~yDFNXpCs~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-22 22:16:33	chopical	if one is going slightly 2 fast and the other is going slightly 2 slow then the average betwen them should be at least closer to the target then the 2 are by themselves
2020-12-22 22:17:09	gog	hm
2020-12-22 22:17:11	gog	maybe
2020-12-22 22:18:14	GeDaMo	What if they're both going slightly too fast? :|
2020-12-22 22:19:55	<--	dormito (~dormito@cpe-24-243-3-252.satx.res.rr.com) has quit (Ping timeout: 246 seconds)
2020-12-22 22:20:39	chopical	can you not change the frequency of crystals?  ... anyways without changing it just device one of the crystals by some value
2020-12-22 22:20:54	chopical	divide* not device
2020-12-22 22:21:19	-->	dormito (~dormito@cpe-24-243-3-252.satx.res.rr.com) has joined #osdev
2020-12-22 22:22:12	chopical	i guess it really depends on the target frequency though . kind of hard to tune a system without a baseline
2020-12-22 22:28:55	geist	right, the poiunt is the real world and physics intrudes and it's not possible to make two clocks run at precisely the same rate
2020-12-22 22:29:06	geist	even if you could you'd still have relativity, etc come in
2020-12-22 22:29:19	geist	atomic clocks and whatnot are just very very accurate but even they drift
2020-12-22 22:35:35	gog	i was reading up and the key issue with quartz oscillators is also mechanical and thermal stresses introduced by the manufacturing process
2020-12-22 22:35:57	gog	temperature has an especially pronounced effect
2020-12-22 22:36:52	gog	so they can be very precisely tuned before being sealed but in sealing, transporting, mounting etc. they can develop defects
2020-12-22 22:38:05	gog	maybe we should use high-frequency pulsars as timesources :p
2020-12-22 22:38:52	GeDaMo	Won't they drift through Doppler effect? :P
2020-12-22 22:40:11	gog	they sometimes change rotational rate too lol
2020-12-22 22:40:38	chopical	why don't we use lasers . they will still drift but by such a small amount that it will never really matter.
2020-12-22 22:40:53	gog	right but how does the laser pulse
2020-12-22 22:41:08	gog	what's the laser's time source
2020-12-22 22:41:38	chopical	by sensor . sensor gets laser and then turns it off . then sensor loses laser and turns it back on.
2020-12-22 22:41:49	gog	hm
2020-12-22 22:42:10	gog	but the sensor is going to be subject to the same conditions that cause inaccuracies in oscillators too
2020-12-22 22:44:17	chopical	ya good luck removing that entirely but at least technically we aren't locked exclusively on the oscillations of a single thing
2020-12-22 22:44:55	-->	bcos (~bcos@124.184.79.75) has joined #osdev
2020-12-22 22:45:46	chopical	we can easily adjust several components along the way of the sensor and laser. were as a crystal oscillator ... all you got in play really is the crystal. at least to the minimal understand i have of those particular systems.
2020-12-22 22:47:02	marshmallow	geist: alright, it makes sense
2020-12-22 22:48:22	-->	diwyjukjt5nw (~JaoIwjsm~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-22 22:48:55	jimbzy	You all get Skyz sorted out last night?
2020-12-22 22:50:14	gog	jimbzy: https://i.imgur.com/wcLmUfN.png
2020-12-22 22:50:46	jimbzy	eHah
2020-12-22 22:50:58	gog	might look good on you
2020-12-22 22:51:46	jimbzy	Might?
2020-12-22 22:52:36	gog	fine it would defnitely look good on you lol
2020-12-22 22:52:45	jimbzy	;)
2020-12-22 22:53:33	jimbzy	I watched a documentary about the Spanish Flu last night.  That was some crazy stuff.
2020-12-22 22:54:15	gog	there's an episode of a podcast i listen too "well there's your problem" about the war bond parades, the 1918 philadelphia war bond parade in particular, being superspreader events for a flu strain that actually originated in oklahoma :p
2020-12-22 22:54:41	gog	which makes it weird that they called it the spanish lfu
2020-12-22 22:55:01	jimbzy	Yeah. They believe it all started from a giant manure fire.
2020-12-22 22:56:20	jimbzy	Oddly enough, the people who survived it said the strangest thing is that we virtually forgot about it within a decade.
2020-12-22 22:56:56	jimbzy	Like, that was what struck them about the whole event.
2020-12-22 22:57:31	gog	yeah it's funny how quickly important things leave the public consciousness so fast and others don't
2020-12-22 22:57:50	gog	it's almost like the information we receive is used to manipulate our collective memories
2020-12-22 22:58:18	GeDaMo	I read a Smithsonian article about the 1918 flu a while back that was interesting
2020-12-22 22:58:36	jimbzy	The poor scientists were trying to create a vaccine for a organism they couldn't even see yet because there were no electron microscopes :p
2020-12-22 22:58:38	GeDaMo	"How the Horrific 1918 Flu Spread Across America" https://www.smithsonianmag.com/history/journal-plague-year-180965222/
2020-12-22 22:58:39	bslsk05	​www.smithsonianmag.com: How the Horrific 1918 Flu Spread Across America  | History      | Smithsonian Magazine
2020-12-22 22:59:23	<--	diwyjukjt5nw (~JaoIwjsm~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-22 22:59:26	jimbzy	gog, They said individuals could remember how it affected them, but we had collectively forgotten about it.
2020-12-22 23:00:28	-->	diwyjukjt5nw (~JaoIwjsm~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-22 23:00:42	-->	X-Scale` (~ARM@153.211.137.78.rev.vodafone.pt) has joined #osdev
2020-12-22 23:01:58	<--	X-Scale (~ARM@83.223.249.222) has quit (Ping timeout: 256 seconds)
2020-12-22 23:01:58	--	X-Scale` is now known as X-Scale
2020-12-22 23:02:01	jimbzy	It's kind of like the 1980's.  Everyone talks about how "great" it was, but I remember my old man was laid off for like 15 months and we basically survived on wild game and stuff.
2020-12-22 23:06:13	geist	marshmallow: note you can synchronize two clocks, but they have to have some sort of connection
2020-12-22 23:06:46	geist	and at least one of them must be variable rate, which is possible. there are mechanism to adjust the clock rate of a crystal by at least some small amount
2020-12-22 23:07:38	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-22 23:10:33	gog	i think most people remember the pop culture rather than the political economy
2020-12-22 23:11:55	 *	jimbzy shrugs
2020-12-22 23:12:04	jimbzy	I'm just happy I got printf working.
2020-12-22 23:13:23	gog	lol nice
2020-12-22 23:13:44	jimbzy	I also wrote some delay functions, too.  No more ugly Noop Loops in my code.
2020-12-22 23:15:08	gog	lööps
2020-12-22 23:28:31	j`ey	jimbzy: are you using the CNT registers?
2020-12-22 23:29:38	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-22 23:31:09	jimbzy	For printf?
2020-12-22 23:31:22	jimbzy	Oh, nm.  Yeah.  I'm using cnt
2020-12-22 23:33:21	jimbzy	Sorry, had to get the boy sorted out and on his way.
2020-12-22 23:35:54	<--	silas (~silas@189.54.51.118) has quit (Read error: Connection reset by peer)
2020-12-22 23:38:27	-->	silas (~silas@189.54.51.118) has joined #osdev
2020-12-22 23:42:56	geist	jimbzy: the herlihy boy? https://www.youtube.com/watch?v=oXyW5w5RRFY
2020-12-22 23:42:58	bslsk05	​www.youtube.com: The Herlihy Boy House-Sitting Service - SNL - YouTube
2020-12-22 23:43:47	jimbzy	Hah
2020-12-22 23:47:20	gog	lemme live with you
2020-12-22 23:48:23	jimbzy	I had to close that tab or I won't get anything done.
2020-12-22 23:50:35	geist	well on a similar vein: https://www.youtube.com/watch?v=t7HD2xG92-0
2020-12-22 23:50:37	bslsk05	​www.youtube.com: Career Day - SNL - YouTube
2020-12-22 23:50:42	jimbzy	https://www.youtube.com/watch?v=g0sjRG34DlA
2020-12-22 23:50:43	bslsk05	​www.youtube.com: Crystal Gravy - SNL - YouTube
2020-12-22 23:50:52	jimbzy	That's how I explain the 90's to people.
2020-12-22 23:51:14	geist	omg crystal gravy indeed
2020-12-22 23:51:33	jimbzy	Hehehe
2020-12-22 23:51:57	geist	dont forget https://www.youtube.com/watch?v=Ku42Iszh9KM
2020-12-22 23:51:59	bslsk05	​www.youtube.com: Colon Blow - SNL - YouTube
2020-12-22 23:52:04	-->	CryptoDavid (uid14990@gateway/web/irccloud.com/x-laawkhgngrrmdeuw) has joined #osdev
2020-12-22 23:52:12	jimbzy	Oh man.
2020-12-22 23:53:02	j`ey	jimbzy: now that I added PAN support (stop the kernel accessing userspace memory) Im going to turn on E0PD, which stops userspace being able to access any address translated by TTBR1
2020-12-22 23:54:51	jimbzy	Nice, j`ey!
2020-12-22 23:56:40	jimbzy	I really need to do some upkeep soon.  I have stuff spread out all over my project dir, and duplicated code everywhere, and TODO's that actually need to be done.  :)
2020-12-22 23:58:34	j`ey	I need to do some fixing up too, this code is definitely WIP still :P
2020-12-23 00:00:11	jimbzy	I can't stop thinking about that SkyZ character.  I wonder if they're a CS major or something, because that is exactly the sort of attitude I have encountered over the last couple of years.  :p
2020-12-23 00:00:59	gog	they're mentally ill
2020-12-23 00:01:14	gog	i mean armchair diagnosis but they said something to the effect
2020-12-23 00:01:17	jimbzy	Yeah, so am I, but that doesn't stop me from trying.  :p
2020-12-23 00:01:28	gog	i mean yeah i have a complex of mental illnesses too :p
2020-12-23 00:01:55	gog	but as far as their misconceptions and assumptions
2020-12-23 00:01:59	gog	they're way out of left field sometimes
2020-12-23 00:02:21	jimbzy	I get the same thing at Uni, though.
2020-12-23 00:02:41	gog	the closest friend i had at uni was a raging misogynist knowitall dudebro
2020-12-23 00:02:54	jimbzy	Chad?
2020-12-23 00:03:06	gog	more like the virgin than the chad lol
2020-12-23 00:03:13	jimbzy	Ahhh
2020-12-23 00:03:14	gog	i only hung out with him because he'd sell me weed
2020-12-23 00:03:22	jimbzy	Hahah
2020-12-23 00:04:47	jimbzy	I'm talking more about the "I want to program xyz, but I don't want to actually learn the rest of the alphabet in order to get to that point."
2020-12-23 00:06:05	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-23 00:06:19	jimbzy	They all know how much developers earn annually (according to the interwebs) but nobody really seems to like computers.  :p
2020-12-23 00:07:12	gog	YESSSSSSSSS my residency permit was approved
2020-12-23 00:07:27	gog	but yeah i encountered that a lot too
2020-12-23 00:07:34	jimbzy	About freakin' time.
2020-12-23 00:07:49	gog	like they wanted to get into game development but didn't have a clue about how computers actually work at a very basic level
2020-12-23 00:08:27	j`ey	geist: do you know if E0PD is supported on m1? (just if you rememebr..)
2020-12-23 00:08:35	GeDaMo	When I was at college, one of my classmates picked the course by sticking a pin at random into the course catalogue :P
2020-12-23 00:09:22	jimbzy	I can believe it, GeDaMo.
2020-12-23 00:10:40	gog	jimbzy: also what developers earn is slowly sinking
2020-12-23 00:10:48	gog	the industry is being proletarianized
2020-12-23 00:11:12	gog	replaceable workers coding up interchangeable parts
2020-12-23 00:11:24	gog	software mass production
2020-12-23 00:11:34	GeDaMo	That's always been the dream of management
2020-12-23 00:11:46	gog	fuck the managerial class
2020-12-23 00:12:25	jimbzy	That's how it always works, too.
2020-12-23 00:12:38	gog	tendency of the rate of profit to fall time
2020-12-23 00:13:07	jimbzy	I'm not worried about it.
2020-12-23 00:13:37	jimbzy	If I have to, I'll go back to being a union laborer.  At least now I'll have more interesting things to think about over the course of the day :p
2020-12-23 00:14:53	jimbzy	Every spring the owner of the last company I worked for calls to see how I am doing and to tell me I can come back anytime :P
2020-12-23 00:14:56	<--	sangoma (~zeus@154.225.1.123) has quit (Ping timeout: 240 seconds)
2020-12-23 00:16:35	gog	i need to find a job then i'm gonna re-up on my iww membership
2020-12-23 00:16:44	gog	an injuury to one etc.
2020-12-23 00:17:01	jimbzy	Oh and I know how to math pretty well.  I could probably bridge over into teaching if I wanted to.
2020-12-23 00:17:19	gog	you'd do good as a teacher i think
2020-12-23 00:17:31	gog	it's actually a career i've considered shifting into
2020-12-23 00:17:43	jimbzy	I enjoy teaching basic algebra.
2020-12-23 00:18:21	gog	my stepdaughter is pretty good at math in the abstract but i've been trying to help her connect that to money
2020-12-23 00:18:27	gog	it's going... ok
2020-12-23 00:19:44	gog	there seems to be some kind of block there between the abstract and the concrete
2020-12-23 00:20:04	jimbzy	Yep.
2020-12-23 00:20:23	gog	i'm sure you know all about that lol
2020-12-23 00:20:25	jimbzy	It took nearly a decade for mine to understand a joke.
2020-12-23 00:20:42	gog	yeah she really struggled with verbal language from what my wife tells me
2020-12-23 00:21:02	gog	she still does to some degree
2020-12-23 00:21:10	kingoffrance	for the "pc" at least, that stuff goes back to 1980s at least. there used to be ppl who wanted computers out of schools. because they knew they would only teach "institutionalized" (business) need-to-know-basis and ppl would lose control of their hw and any understanding of how things actually work.
2020-12-23 00:21:13	gog	so we also do a little sign language with her
2020-12-23 00:21:20	kingoffrance	hard to believe now...
2020-12-23 00:21:54	gog	kingoffrance: yeah the walls of the garden seem to always get built higher
2020-12-23 00:22:18	jimbzy	gog, I remember a lot of 'baby sign' language.
2020-12-23 00:23:01	jimbzy	I actually still use a lot of it when I talk to people.
2020-12-23 00:23:24	kingoffrance	i dont buy that 100%, like i dont buy any imaginary "golden age" in the past, just that was the homebrew days is where that was coming from.   the knew stuff would be ubiquitous i guess, didnt want to see it locked down.
2020-12-23 00:23:33	kingoffrance	*they
2020-12-23 00:23:44	gog	oh ok i see what you're saying
2020-12-23 00:23:47	kingoffrance	once its a career its need-to-know-basis
2020-12-23 00:24:24	gog	jimbzy: the one thing we have to be very careful about is verb tenses
2020-12-23 00:24:27	kingoffrance	and that subset of what is need-to-know is ever-shifting
2020-12-23 00:24:45	gog	she doesn't pick up the relationship to time so well
2020-12-23 00:25:36	jimbzy	Yeah.  No concept of "wait a second"?
2020-12-23 00:26:10	jimbzy	kingoffrance, I was expecting more "science" in computer science.  That's why I'm learning the calculus.
2020-12-23 00:26:14	gog	she has that, but it's more like if we're talking about something she needs to do or somewhere she needs to be we have to emphasize "now" or "later"
2020-12-23 00:26:18	jimbzy	Can't have science without the calculus.
2020-12-23 00:26:47	jimbzy	Yeah
2020-12-23 00:27:29	<--	Thedarkb (~beno@80.233.34.145) has quit (Remote host closed the connection)
2020-12-23 00:28:20	kingoffrance	im the wrong person to ask about that ...quote doug "it's hard enough when you already completely know assembly and high level languages and build systems and linking issues"   im that person.  no cs or math proper.
2020-12-23 00:29:03	kingoffrance	i used to have a little book like calculus subset for cs people
2020-12-23 00:29:50	jimbzy	There's nothing wrong with that, kingoffrance.  Honestly, I just added CS into my curriculum to break up the math classes.
2020-12-23 00:32:06	gog	in 6 months i'll be eligible for benefits from the icelandic social security system
2020-12-23 00:32:15	jimbzy	Good!
2020-12-23 00:32:17	gog	i can probably go back to school
2020-12-23 00:33:06	gog	i will definitely go back at some point
2020-12-23 00:34:18	jimbzy	Things will be different once I get moved.  I'll have access to the campus, so I'll have access to more courses.  General physics and stuff.
2020-12-23 00:35:00	jimbzy	I could actually get into a real engineering program, but that'd add another year or so to my timeline.
2020-12-23 00:37:14	jimbzy	Oh, and about another $15-20k of debt :p
2020-12-23 00:37:59	gog	come to iceland! :p
2020-12-23 00:38:10	gog	no student debt here
2020-12-23 00:38:12	jimbzy	I have been pretty fortunate thus far.  My first two years at junior college we practically free.  I wrote A LOT of grant essays and stuff.
2020-12-23 00:38:23	gog	well there is but it's very minimal compared to the US
2020-12-23 00:38:41	-->	sangoma (~zeus@197.239.4.232) has joined #osdev
2020-12-23 00:40:34	jimbzy	gog, It sucks, but I went in with a plan and it has worked so far.  I feel bad for the kids who go from HS to university and wind up getting a 6yr undergrad degree.
2020-12-23 00:42:52	jimbzy	I think that's why I tutor so much.  I hate seeing people give up like I did when I was younger.
2020-12-23 00:43:58	<--	meandrain (~meandrain@78.96.16.74) has quit
2020-12-23 00:44:16	jimbzy	I have helped 3 ppl get their GED/HS Diploma, 4 ppl get their professional certs, and 3 ppl get their associates degree.  My fees are quite affordable, too. "Pay if you can, don't worry about it if you can't."  :p
2020-12-23 00:44:32	gog	i wish i hadn't given up
2020-12-23 00:44:42	gog	i didn't need a tutor tho, i needed a therapist
2020-12-23 00:45:06	gog	which are way more expensive and do care if you pay them :p
2020-12-23 00:45:09	jimbzy	Yeah, I get that, too.
2020-12-23 00:46:13	jimbzy	gog, They used to have 'stress dogs' during finals week.
2020-12-23 00:48:20	gog	aww heckin good bois
2020-12-23 00:49:10	gog	i wanna go back in time to 2014 and tell myself "you need to dump your girlfriend and start taking estrogen trust me"
2020-12-23 00:49:22	jimbzy	It was funny because one of the owners was my blacksmithing master.  I walked into the library and was like, "Robert?!"
2020-12-23 00:49:23	gog	XD
2020-12-23 00:50:39	jimbzy	Of course, his St. Bernie was like, "Jimbzy!  Here, have 5lbs of fur and slobber!"
2020-12-23 00:50:44	gog	haha awww
2020-12-23 00:50:46	gog	big boofer
2020-12-23 00:51:04	jimbzy	He has two.  He had to install this industrial dog grooming shower in his house.
2020-12-23 00:51:09	gog	i bet
2020-12-23 00:51:36	jimbzy	Great guy, too.  One of the few genuine Christians I have ever met.
2020-12-23 00:51:49	-->	remby (~remby@2607:fea8:2c62:8800::9c0c) has joined #osdev
2020-12-23 00:52:01	gog	when i was a kid this guy down the road from me had a saint bernard and it just hung out in the carport all day chained to the front steps and i was like you poor thing and would visit him
2020-12-23 00:52:24	doug16k	same here!
2020-12-23 00:52:45	gog	just a big gentle lonely dog
2020-12-23 00:52:58	jimbzy	I hate that.
2020-12-23 00:53:53	jimbzy	I had a runner outside for my shepherd, but he was mostly an 80lb German baby.
2020-12-23 00:54:01	gog	aw
2020-12-23 00:54:55	jimbzy	He was a good boy.
2020-12-23 00:55:04	gog	my dog that i raised with my ex was good about the yard boundary so i'd just let him out and sit on the deck and make sure he didn't cause trouble
2020-12-23 00:55:36	jimbzy	Sup, doug16k!
2020-12-23 00:55:50	jimbzy	You have to be careful of dog thieves here.
2020-12-23 00:56:21	doug16k	hey jimbzy
2020-12-23 00:57:10	jimbzy	I think I'm going to setup my son's telescope today and give it to him early.
2020-12-23 00:57:38	gog	we got the kid a harley quinn funko pop and a hatsune miku mug of her own so she stop's commandeering my wife's
2020-12-23 00:57:47	jimbzy	Haha
2020-12-23 00:58:34	jimbzy	It's a slim xmas this year with the new house and all, but it'll be worth it.
2020-12-23 00:58:41	--	irc: disconnected from server
2020-12-23 11:06:17	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-23 11:06:17	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-23 11:06:17	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-23 11:06:17	--	Channel #osdev: 275 nicks (1 op, 0 voices, 274 normals)
2020-12-23 11:06:44	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-23 11:06:46	-->	Digit (~user@fsf/member/digit) has joined #osdev
2020-12-23 11:34:31	-->	superleaf1995 (bdb3cb73@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.203.115) has joined #osdev
2020-12-23 11:35:02	superleaf1995	finally; i sucessfully ported my OS to RISC-V 64 :D
2020-12-23 11:44:25	<--	Sheilong (uid293653@gateway/web/irccloud.com/x-rkgukjcpotfcdltb) has quit
2020-12-23 11:52:20	-->	Goplat (~Goplat@reactos/developer/Goplat) has joined #osdev
2020-12-23 11:52:32	geist	superleaf1995: oh grats!
2020-12-23 11:52:36	geist	did you figure out the pci thing?
2020-12-23 11:52:41	superleaf1995	yes, thanx :)
2020-12-23 11:52:44	superleaf1995	no
2020-12-23 11:52:53	superleaf1995	actually im on the way to doing that
2020-12-23 11:53:15	geist	yah it's just pci-e though i dont how precisely how teh PIO bits are mapped but it's usually just a 64k MMIO regino
2020-12-23 11:53:21	superleaf1995	ye
2020-12-23 11:53:25	geist	i think it's described in the FDT, but the PCI nodes in FDT are complicated
2020-12-23 11:53:37	geist	i generally would just look at what linux does and hard code that for now, since qemu wont really move it around on you
2020-12-23 11:53:38	superleaf1995	meh, i jsut go straight to the memory where pcie is
2020-12-23 11:53:58	superleaf1995	and uh
2020-12-23 11:54:02	geist	yah, well there's reallyt 3 apertures there: where the ECAM is, where the MMIO PIO bits are mapped (if needed), and where the BARS are mapped to
2020-12-23 11:54:30	geist	though may be the PIO bits have a full address but still have the PIO bit set? actually kinda curious now
2020-12-23 11:54:53	superleaf1995	i havent looked that stuff yet (pio)
2020-12-23 11:55:03	superleaf1995	im on ecam and basically stripped down half my OS :P
2020-12-23 11:55:04	geist	yah you were asking about it on #riscv a while ago
2020-12-23 11:55:15	superleaf1995	ah yeah
2020-12-23 11:55:19	geist	word. well ECAM is cross platform too, it's just the newest mechanism. PC does it too
2020-12-23 11:55:22	geist	it's PCI-e basically
2020-12-23 11:55:23	superleaf1995	but they said i could do mmio via ecam
2020-12-23 11:55:34	superleaf1995	so im doing that exactly
2020-12-23 11:55:36	geist	well, what they meant was you need to start with ecam to find the devices
2020-12-23 11:55:40	geist	that's independet of PIO
2020-12-23 11:55:50	superleaf1995	ohh
2020-12-23 11:55:52	geist	PIO-via-MMIO is a different thing
2020-12-23 11:56:03	geist	but no big deal just what you gota do for non x86 systems
2020-12-23 11:56:13	superleaf1995	ye
2020-12-23 11:56:21	superleaf1995	im having lots of fun here on riscv
2020-12-23 11:56:31	geist	the ECAM is just a memory mapped flat PCI config space, it supercedes old PCI stuff. even on x86
2020-12-23 11:56:56	geist	that's why the old two port pci config access space stuff on x86 is considered legacy
2020-12-23 11:57:16	superleaf1995	oh nice
2020-12-23 11:57:30	geist	yah once you get the basic mechanism of how the status register and the different levels intersect on riscv it's a pretty neat system
2020-12-23 11:57:34	superleaf1995	so in short; i have to mess with ecam, find pio and then use bar
2020-12-23 11:57:40	geist	took me a while to grok the interactions of the exceptions and the PLIC and whatnot
2020-12-23 11:57:59	geist	in sort you need to a) find ecam to access the PCI config space to access things
2020-12-23 11:58:19	geist	and b) if some things you want to access have PIO mapped BARs then you need to figure out where the PIO-via-MMIO aperture is
2020-12-23 11:58:44	superleaf1995	alright
2020-12-23 11:59:03	-->	lispmacs[work] (~user@fsf/member/lispmacs) has joined #osdev
2020-12-23 11:59:11	geist	they're actually two different problems entirely
2020-12-23 11:59:21	geist	x86 simply has a PIO mechansim for both that other arches dont have
2020-12-23 12:02:58	geist	hmm, yeah nothing on this riscv machine with pci i have here has any IO
2020-12-23 12:03:02	geist	so i can't see how it's mapped
2020-12-23 12:03:19	geist	i *think* the answer may be the BAR has what looks like a MMIO like address, but still has the IO bit set
2020-12-23 12:03:28	geist	or at least i think that's an option
2020-12-23 12:03:50	geist	for example i think you may simply see a bar like address: 0x06080000 + IO, width 16
2020-12-23 12:04:11	geist	ie, looks like mmio but is actually PIO, but you just use it like a mmio address
2020-12-23 12:04:12	superleaf1995	hmmm
2020-12-23 12:05:11	geist	anyway, it only matters if you're trying to run legacy stuff behing it, like VGA
2020-12-23 12:05:15	geist	but i think that's precisely what your'e trying to do
2020-12-23 12:05:46	superleaf1995	yep
2020-12-23 12:06:02	geist	ah okay i do see a device here (i have an old geforce plugged into this riscv machine)
2020-12-23 12:06:19	geist	lspci -v shows that the vga card has 'io ports at 0000, size 128' in its bar
2020-12-23 12:06:32	-->	Jayprakash12345 (~jayprakas@wikimedia/Jayprakash12345) has joined #osdev
2020-12-23 12:06:39	superleaf1995	ok it matches qemu's definition of a vga
2020-12-23 12:06:40	geist	honestly dunno precisely what that means
2020-12-23 12:06:50	superleaf1995	i think it means that 0x00 to 0xff is for vga
2020-12-23 12:06:55	superleaf1995	80*
2020-12-23 12:07:16	geist	yah noe that on a non x86 there's no reason for them to use 'traditional' defined VGA ports or whatnot
2020-12-23 12:07:16	superleaf1995	vitr on qemu maps VGA from 0x00 to 0x100
2020-12-23 12:07:22	geist	only to map it to something
2020-12-23 12:07:24	superleaf1995	no, its memory
2020-12-23 12:07:43	superleaf1995	oh my bad
2020-12-23 12:07:51	superleaf1995	thats debug mem.
2020-12-23 12:08:10	geist	but.. here's where i think it may be interesting: the upstream bridge for this device says 'io behind bridge: 0x60080000, size 4K'
2020-12-23 12:08:37	geist	so it may be that any devices downstream that say they are using IO port 0-16 for example may be mapped to MMIO address 0x60080000 + [0...16]
2020-12-23 12:08:47	superleaf1995	oh
2020-12-23 12:08:49	superleaf1995	probsd
2020-12-23 12:10:45	geist	yah i'm fairly certain that's the case
2020-12-23 12:10:51	geist	the linux dmesg says something like that
2020-12-23 12:11:06	superleaf1995	alright
2020-12-23 12:11:18	geist	i cna't easily copy/paste it, but it basically says 'root bus resource io 0 - 0xffff: bus address 0x6008000 ... (address + 0x4K)'
2020-12-23 12:11:47	superleaf1995	ok, pcie allocates 4096 for each device
2020-12-23 12:11:49	geist	er not even 4K. that's a full 64k
2020-12-23 12:11:54	superleaf1995	ah
2020-12-23 12:12:05	superleaf1995	probably a device using multiple lanes?
2020-12-23 12:12:13	geist	that's the the root bus. so i think that's basically saying 'everything downstream of this will map its io ranges into this address'
2020-12-23 12:12:22	superleaf1995	ah
2020-12-23 12:12:27	superleaf1995	ok
2020-12-23 12:12:28	geist	then it gets subdivided as you drill down through the bridges
2020-12-23 12:12:37	geist	as it does in PCI on x86s and whatnot
2020-12-23 12:12:42	<--	Jayprakash12345 (~jayprakas@wikimedia/Jayprakash12345) has quit
2020-12-23 12:12:59	geist	the difference is there's a mapping of all of the IO bits to some MMIO physical region at the root of PCI. basically af ucntion of the PCI controller
2020-12-23 12:13:12	geist	in this case it's 'almond-fpga-pcie' whatever that is, but that's the driver
2020-12-23 12:13:21	superleaf1995	okey
2020-12-23 12:23:35	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 240 seconds)
2020-12-23 12:24:45	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-23 12:55:14	doug16k	geist, hey your comment about not needing to use the standard port numbers gave me a fun idea. how about port layout randomization :D
2020-12-23 12:57:30	superleaf1995	"port allocator"
2020-12-23 12:58:11	superleaf1995	heh
2020-12-23 12:58:33	doug16k	superleaf1995, you'd have that right? for placing things in port space
2020-12-23 12:58:47	doug16k	you or the firmware or someone
2020-12-23 12:58:55	superleaf1995	no
2020-12-23 12:58:59	superleaf1995	riscv got no ports
2020-12-23 12:59:03	superleaf1995	just mmio
2020-12-23 12:59:04	doug16k	yes it does
2020-12-23 12:59:08	superleaf1995	and pio
2020-12-23 12:59:09	superleaf1995	ah
2020-12-23 12:59:13	superleaf1995	port in memory allocator?
2020-12-23 12:59:26	doug16k	anything with PCI must have something for it
2020-12-23 12:59:28	superleaf1995	yeah i could just preserve(area,of,port); and bam
2020-12-23 12:59:30	doug16k	it's a 64KB MMIO window
2020-12-23 12:59:38	doug16k	you write to it and that's "out"
2020-12-23 12:59:43	doug16k	you read from it and that's "in"
2020-12-23 12:59:54	superleaf1995	yeah i have it reserved on the mm allocator
2020-12-23 13:00:03	doug16k	whatever "dx" youwere going to use on x86, that's offset into the IO window
2020-12-23 13:00:25	superleaf1995	e
2020-12-23 13:00:57	doug16k	PCI BAR might have the I/O bit stuck on I/O
2020-12-23 13:01:08	doug16k	in that case you have no choice but placing it in I/O space
2020-12-23 13:01:15	doug16k	and must use that I/O window thing
2020-12-23 13:01:41	doug16k	have to place it somewhere, so must track that somehow
2020-12-23 13:01:45	superleaf1995	yeah i have seen that bit on the pci config header
2020-12-23 13:02:05	superleaf1995	but i would rather keep it dead simple for now until i need to mess with VGA
2020-12-23 13:02:13	superleaf1995	for now its pure UART fun
2020-12-23 13:02:25	doug16k	yeah it's hardly a problem. it's 65536 1-byte regions that you "allocate"
2020-12-23 13:02:26	superleaf1995	yeah, i think i will make a separate allocator for it
2020-12-23 13:02:35	doug16k	it's 8KB bitmap
2020-12-23 13:02:58	superleaf1995	uh
2020-12-23 13:03:02	superleaf1995	i use stack
2020-12-23 13:03:04	superleaf1995	flat list
2020-12-23 13:03:06	doug16k	might as well use bitmap because you'll be looking for free ports at specific alignments
2020-12-23 13:03:19	doug16k	can't just stick it at whatever random number you want
2020-12-23 13:03:23	doug16k	has to be at a specific alignment
2020-12-23 13:03:25	superleaf1995	i have align function
2020-12-23 13:03:35	superleaf1995	i used it for paging before
2020-12-23 13:03:55	superleaf1995	but now i dont have paging so its kinda like there for now
2020-12-23 13:04:11	superleaf1995	(even tho i think riscv has paging, but i havent coded it yet)
2020-12-23 13:04:16	doug16k	same thing with interrupt vectors. I have an interrupt vector allocator
2020-12-23 13:04:42	doug16k	same issue. PCI MSI needs them aligned, everything else doesn't
2020-12-23 13:04:59	superleaf1995	heh, i think that in that allocator i will surely use bitmap
2020-12-23 13:05:06	doug16k	yes
2020-12-23 13:05:15	doug16k	I do
2020-12-23 13:05:17	superleaf1995	256 interrutps compressed into 256/8 bytes
2020-12-23 13:05:36	doug16k	sure, or 32 int32
2020-12-23 13:05:46	doug16k	er int64
2020-12-23 13:05:46	superleaf1995	yep
2020-12-23 13:05:56	superleaf1995	that is a lot of space saved
2020-12-23 13:05:57	superleaf1995	oh
2020-12-23 13:06:08	superleaf1995	32
2020-12-23 13:06:14	superleaf1995	... its 32 bytes
2020-12-23 13:06:16	doug16k	64 int32
2020-12-23 13:06:39	superleaf1995	256/8 = 32 ?
2020-12-23 13:06:42	doug16k	wait sorry
2020-12-23 13:06:46	doug16k	I am thinking if bools lol
2020-12-23 13:06:56	superleaf1995	ah
2020-12-23 13:07:08	doug16k	8 int32s
2020-12-23 13:07:32	superleaf1995	yes
2020-12-23 13:10:17	doug16k	https://github.com/doug65536/dgos/blob/master/kernel/arch/x86_64/cpu/apic.cc#L775
2020-12-23 13:10:19	bslsk05	​github.com: dgos/apic.cc at master · doug65536/dgos · GitHub
2020-12-23 13:11:35	doug16k	checks up to 32 bits at a time
2020-12-23 13:11:39	superleaf1995	ah
2020-12-23 13:12:39	doug16k	it's never over 16 in practice
2020-12-23 13:12:44	doug16k	that I have ever seen
2020-12-23 13:13:03	superleaf1995	hmm
2020-12-23 13:13:05	doug16k	msi is the old fallback anyway, msix can take vectors from wherever with gaps
2020-12-23 13:13:29	doug16k	no contiguity or alignment requirements on msix
2020-12-23 13:13:40	superleaf1995	what is msix
2020-12-23 13:13:45	superleaf1995	is that your allocator?
2020-12-23 13:13:48	doug16k	pcie message signalled interrupts
2020-12-23 13:13:52	superleaf1995	ah
2020-12-23 13:13:58	doug16k	lets you route irqs to a specific cpu easy
2020-12-23 13:14:30	superleaf1995	ok
2020-12-23 13:14:42	doug16k	a way to make a completion irq use a specific "interrupter" that is setup to use the address that tells the right cpu to run the irq handler
2020-12-23 13:15:02	doug16k	not just one cpu every time
2020-12-23 13:15:14	superleaf1995	multiprocessing(tm)
2020-12-23 13:15:15	doug16k	can be the "right" cpu
2020-12-23 13:15:27	superleaf1995	you just gave me an idea
2020-12-23 13:15:36	superleaf1995	i could make the allocator split irqs per cpu
2020-12-23 13:16:21	superleaf1995	i mean harts*
2020-12-23 13:16:25	doug16k	I support per cpu irqs on the devices where that is supported in my drivers
2020-12-23 13:16:37	doug16k	usually they all share the same vector
2020-12-23 13:17:04	doug16k	I say usually because the driver can make that not true if needed
2020-12-23 13:17:26	superleaf1995	oh right
2020-12-23 13:17:40	doug16k	it's just that cpu running same thing
2020-12-23 13:17:46	doug16k	with same idt etc
2020-12-23 13:18:32	doug16k	device has to be fancy and modern enough for you to have that tag to tell it which interrupter
2020-12-23 13:19:13	doug16k	cheapo devices can say in their capabilities that they support one interrupt vector, if they feel like it
2020-12-23 13:19:41	superleaf1995	oh, so you are saying a device can come and just take whichever irq they please?
2020-12-23 13:19:45	superleaf1995	(considering hotplug)
2020-12-23 13:20:09	superleaf1995	then i guess i will have to make yet another function for the allocator then
2020-12-23 13:20:24	doug16k	oh yes, MSI (and MSI-X) (the proper way to do IRQs on PCI(e)) you can just make it run whatever vector you feel like on whatever cpu you feel like
2020-12-23 13:20:47	doug16k	exact capabilities depend on your interrupt controller
2020-12-23 13:21:00	superleaf1995	hmm, alright
2020-12-23 13:21:06	doug16k	the device writes a value to some magic MMIO range, and the address says which cpu it means, and the value says which interrupt to run
2020-12-23 13:21:18	doug16k	the address can say other flags and info too, interrupt controller specific
2020-12-23 13:21:39	doug16k	platform specific piece figures out the magic MSI address and data for a certain cpu and vector
2020-12-23 13:22:08	superleaf1995	Ok
2020-12-23 13:29:38	-->	dqx (~dqx@unaffiliated/dqx) has joined #osdev
2020-12-23 13:34:22	<--	diwyjukjt5 (~HFCqCrxb~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-23 13:35:36	<--	dqx (~dqx@unaffiliated/dqx) has quit (Ping timeout: 256 seconds)
2020-12-23 13:49:12	<--	superleaf1995 (bdb3cb73@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.203.115) has quit (Quit: Connection closed)
2020-12-23 13:53:03	doug16k	haha that's neat. by the time it has loaded my kernel, right at the 1st instruction, the physical memory range it used is 0x100000 from 0xA00A000
2020-12-23 13:54:03	doug16k	0xA00A000 sounds made up
2020-12-23 13:54:42	doug16k	that's the kernel plus a large initrd
2020-12-23 13:56:54	doug16k	size=0x9F0A000
2020-12-23 14:18:28	-->	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has joined #osdev
2020-12-23 14:24:05	<--	perdent (~perdent@101.175.70.218) has quit (Read error: Connection reset by peer)
2020-12-23 14:24:09	-->	bcos_ (~bcos@101.174.26.201) has joined #osdev
2020-12-23 14:33:04	-->	X-Scale` (~ARM@31.22.162.116) has joined #osdev
2020-12-23 14:34:38	<--	X-Scale (~ARM@153.211.137.78.rev.vodafone.pt) has quit (Ping timeout: 260 seconds)
2020-12-23 14:34:39	--	X-Scale` is now known as X-Scale
2020-12-23 14:35:53	peterbjornx	damn
2020-12-23 14:36:00	peterbjornx	thats a LARGE ramdisk
2020-12-23 14:36:31	peterbjornx	oh nvm
2020-12-23 14:36:38	peterbjornx	was reading it as a000a000
2020-12-23 14:37:08	peterbjornx	anyway, implemented a rudimentaty /proc/<pid>/mem for my os
2020-12-23 14:37:43	peterbjornx	doesn't do demand paging yet, but can atleast do a stack trace on processes now
2020-12-23 14:48:09	-->	xhe (~xhe@45.251.23.186) has joined #osdev
2020-12-23 14:48:37	<--	chopical (~chopical@host-67-58-213-115.public.eastlink.ca) has quit (Read error: Connection reset by peer)
2020-12-23 14:56:02	<--	ouyes (~ouyes@117.89.13.55) has quit (Quit: 离开)
2020-12-23 14:57:40	doug16k	peterbjornx, can you mmap the fd and get a window into other process?
2020-12-23 15:03:09	-->	chopical (~chopical@host-67-58-213-115.public.eastlink.ca) has joined #osdev
2020-12-23 15:06:00	geist	that sort of recursive mapping thing gets complicated *really* fast
2020-12-23 15:06:09	geist	i'd really advise against allowing mmap against a processes map
2020-12-23 15:13:34	doug16k	as in, what if they mmapped some fd from a third process, and you mapped their window into it?
2020-12-23 15:20:19	doug16k	you could get it into a cycle couldn't you?
2020-12-23 15:22:06	doug16k	if I map what you have at X at X and you map what I have at X at X, what is at X?
2020-12-23 15:24:00	-->	dormito (~dormito@cpe-24-243-3-252.satx.res.rr.com) has joined #osdev
2020-12-23 15:24:31	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-23 15:29:14	-->	dqx (~dqx@unaffiliated/dqx) has joined #osdev
2020-12-23 15:34:36	<--	Goplat (~Goplat@reactos/developer/Goplat) has quit (Remote host closed the connection)
2020-12-23 15:58:49	<--	dqx (~dqx@unaffiliated/dqx) has quit (Quit: .)
2020-12-23 16:06:00	<--	CrystalMath (~coderain@reactos/developer/theflash) has quit (Quit: May we live long and die out | http://vhemt.org/)
2020-12-23 16:24:20	<--	tzlil (~tzlil@unaffiliated/tzlil) has quit (Ping timeout: 272 seconds)
2020-12-23 16:25:31	-->	tzlil (~tzlil@unaffiliated/tzlil) has joined #osdev
2020-12-23 16:34:31	-->	zaquest (~notzaques@5.128.210.178) has joined #osdev
2020-12-23 16:46:36	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 246 seconds)
2020-12-23 16:47:34	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-23 17:05:22	--	irc: disconnected from server
2020-12-23 17:05:57	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-23 17:05:57	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-23 17:05:57	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-23 17:05:57	--	Channel #osdev: 276 nicks (1 op, 0 voices, 275 normals)
2020-12-23 17:06:24	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-23 17:06:31	<--	awordnot (~awordnot@c-71-194-7-27.hsd1.il.comcast.net) has quit (Quit: Ping timeout (120 seconds))
2020-12-23 17:06:51	-->	awordnot (~awordnot@c-71-194-7-27.hsd1.il.comcast.net) has joined #osdev
2020-12-23 17:13:54	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 246 seconds)
2020-12-23 17:15:35	-->	snowball (~rhcake@2a02:610:7501:feff:97eb:fb29:5269:b07c) has joined #osdev
2020-12-23 17:41:00	-->	regreg (~regreg@2a02:2f01:8416:6100:d2cf:cf33:786e:c499) has joined #osdev
2020-12-23 17:41:43	-->	diwyjukjt (~PuHYmtyp~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-23 17:45:42	<--	diwyjukjt (~PuHYmtyp~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-23 18:00:04	<--	sham1 (~sham1@212-146-44-107.aboa.net) has quit (Remote host closed the connection)
2020-12-23 18:00:55	<--	mawk (mawk@serveur.io) has quit (Quit: ZNC - https://znc.in)
2020-12-23 18:01:11	-->	mawk (mawk@serveur.io) has joined #osdev
2020-12-23 18:02:57	-->	sham1 (~sham1@212-146-44-107.aboa.net) has joined #osdev
2020-12-23 18:10:46	<--	regreg (~regreg@2a02:2f01:8416:6100:d2cf:cf33:786e:c499) has quit (Remote host closed the connection)
2020-12-23 18:21:04	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-23 18:28:05	<--	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has quit (Quit: remby)
2020-12-23 18:46:46	<--	xhe (~xhe@45.251.23.186) has quit (Quit: Lost terminal)
2020-12-23 18:51:05	-->	GeDaMo (~GeDaMo@unaffiliated/gedamo) has joined #osdev
2020-12-23 19:05:11	Griwes	just in case some of you who are into being able to interact with weird buses and connectors *and* don't follow whitequark or other people who kept tweeting about it today... https://www.crowdsupply.com/1bitsquared/glasgow
2020-12-23 19:05:12	bslsk05	​www.crowdsupply.com: Glasgow Interface Explorer | Crowd Supply
2020-12-23 19:05:42	geist	huh, looks interesting!
2020-12-23 19:05:43	Griwes	...missed the trailing part of "just in case [...] haven't seen it yet"
2020-12-23 19:06:01	Griwes	it's for preorder now, apparently sold out of early birds in 20 minutes according to twitter
2020-12-23 19:08:43	<--	Jari-- (~vai@83-245-241-250-nat-p.elisa-mobile.fi) has quit (Ping timeout: 256 seconds)
2020-12-23 19:17:04	geist	good to know: the fairly cheapo western digital blue nvme drives support 4K LBA format
2020-12-23 19:17:17	geist	easy to reformat in linux at least. so that's a thing if you're interested
2020-12-23 19:25:12	-->	KidBeta (~Kidbeta@hpavc/kidbeta) has joined #osdev
2020-12-23 19:25:22	-->	sortie (~sortie@D470948F.rev.sefiber.dk) has joined #osdev
2020-12-23 19:58:04	<--	sortie (~sortie@D470948F.rev.sefiber.dk) has quit (Ping timeout: 240 seconds)
2020-12-23 20:22:58	-->	sortie (~sortie@D470948F.rev.sefiber.dk) has joined #osdev
2020-12-23 20:36:24	<--	sprocklem (~sprocklem@unaffiliated/sprocklem) has quit (Ping timeout: 240 seconds)
2020-12-23 21:03:11	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 256 seconds)
2020-12-23 21:03:34	-->	CrystalMath (~coderain@reactos/developer/theflash) has joined #osdev
2020-12-23 21:10:28	-->	no112_1 (~no112@27.96.207.94) has joined #osdev
2020-12-23 21:10:34	<--	no112_ (~no112@27.96.207.94) has quit (Ping timeout: 258 seconds)
2020-12-23 21:10:34	--	no112_1 is now known as no112_
2020-12-23 21:16:04	-->	Burgundy (~yomon@5-12-46-192.residential.rdsnet.ro) has joined #osdev
2020-12-23 21:32:17	-->	diwyjukjt (~KbEnsDNW~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-23 21:36:22	<--	diwyjukjt (~KbEnsDNW~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-23 21:36:48	-->	gog (~ada@nova-046-182-189-142.nat.nova.is) has joined #osdev
2020-12-23 21:37:10	-->	diwyjukjt (~KbEnsDNW~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-23 22:06:29	 *	gog meows
2020-12-23 22:06:57	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-23 22:07:06	pitust	How to make my x86-64 elf an x86 one
2020-12-23 22:07:13	pitust	purely for metadata purposes
2020-12-24 06:11:05	--	irc: disconnected from server
2020-12-24 06:11:39	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-24 06:11:39	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-24 06:11:39	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-24 06:11:39	--	Channel #osdev: 286 nicks (1 op, 0 voices, 285 normals)
2020-12-24 06:12:06	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-24 06:14:09	<--	nvmd (~nvmd@200.186.98.74) has quit (Quit: Later nerds.)
2020-12-24 06:18:11	Bitweasil	Damn, filming and editing that time lapse would have taken many times longer than just rebuilding the engine, once you factor in the motion rigs and such.
2020-12-24 06:18:14	Bitweasil	Impressive, but... damn.
2020-12-24 06:18:28	Bitweasil	Need a full on film crew to do that.
2020-12-24 06:20:12	-->	mgrochow (~mgrochow@152.89.204.175) has joined #osdev
2020-12-24 06:20:30	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2020-12-24 06:23:20	-->	dennis95 (~dennis95@mue-88-130-62-033.dsl.tropolys.de) has joined #osdev
2020-12-24 06:24:44	<--	GeDaMo (~GeDaMo@unaffiliated/gedamo) has quit (Remote host closed the connection)
2020-12-24 06:26:56	jimbzy	I actually owned one of those.
2020-12-24 06:27:16	-->	lispmacs[work] (~user@fsf/member/lispmacs) has joined #osdev
2020-12-24 06:28:52	Bitweasil	Ok, on a SVC instruction in ARM, the LR points to... the SVC, or the instruction after?
2020-12-24 06:31:04	j`ey	From googling it seems to be the instruction after
2020-12-24 06:31:23	Bitweasil	Yeah, hrm.  I'm offset by 4 somewhere, I think.
2020-12-24 06:34:45	jimbzy	Cool video, SkyZ.
2020-12-24 06:36:06	SkyZ	https://www.youtube.com/watch?v=Byy8F6Iz6Z0
2020-12-24 06:36:07	bslsk05	​www.youtube.com: Buick Fireball Start up - YouTube
2020-12-24 06:36:40	mrvn	Bitweasil: each interrupt has different offsets: https://github.com/mrvn/moose/blob/master/kernel/entry.S#L95
2020-12-24 06:36:41	bslsk05	​github.com: moose/entry.S at master · mrvn/moose · GitHub
2020-12-24 06:37:31	Bitweasil	*nods*  I just think I've got an extra offset somewhere.
2020-12-24 06:37:52	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 256 seconds)
2020-12-24 06:40:29	<--	SkyZ (43538427@ool-43538427.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2020-12-24 06:42:43	Bitweasil	Yeah, forgot to add 4 to the PC before doing some math.
2020-12-24 06:43:01	Bitweasil	Because if you load the PC, you end up with PC + 8 typically... for reasons.
2020-12-24 06:43:25	j`ey	im so glad aarch64 doesnt have that
2020-12-24 06:43:44	Bitweasil	Oh, that's gone in AArch64?  You read... current instruction or next instruction?
2020-12-24 06:44:49	j`ey	you.. cant read the PC directly as a register (aka Im not sure..)
2020-12-24 06:45:30	clever	but there are some PIC related opcodes, to give the result of adding or subtracting from pc?
2020-12-24 06:45:32	Bitweasil	Oh?  I thought it was still around.
2020-12-24 06:45:58	<--	gog (~ada@nova-046-182-189-142.nat.nova.is) has quit (Ping timeout: 256 seconds)
2020-12-24 06:46:18	j`ey	addrp for example, clever
2020-12-24 06:46:50	mrvn	I kind of like having PC as a (nearly normal) GPR on ARM.
2020-12-24 06:54:08	mrvn	Die Vorteile von scatter gathering im VFS:
2020-12-24 06:54:16	mrvn	              capacity     operations     bandwidth
2020-12-24 06:54:16	mrvn	pool        alloc   free   read  write   read  write
2020-12-24 06:54:18	mrvn	rpool       1.04T   773G  8.39K    907   103M   110M
2020-12-24 06:55:41	moon-child	it would be kinda cool if x86 assemblers could translate  cmovCC rip, x  into  jCC x
2020-12-24 06:56:05	doug16k	moon-child, you could make a macro for that
2020-12-24 06:56:20	moon-child	but otoh too much magic in an assembler can be a bit disorienting.  Like, nasm will translate  [5*x]  into  [4*x + x]  and I'm not sure I like that
2020-12-24 06:56:35	doug16k	I have one for indirect calls
2020-12-24 06:56:52	mrvn	moon-child: 7 into 8*-1?
2020-12-24 06:56:59	doug16k	maybe just normal, maybe light retpoline, maybe skylake crazy retpoline
2020-12-24 06:57:19	CrystalMath	the nice part of writing a DOS
2020-12-24 06:57:28	CrystalMath	is that you don't have to do any spectre/meltdown mitigations :P
2020-12-24 06:58:02	mrvn	CrystalMath: I mitigated them by buying an ARM.
2020-12-24 06:58:14	moon-child	arm is vulnerable too
2020-12-24 06:58:19	CrystalMath	yeah....
2020-12-24 06:58:23	Bitweasil	To some, but... it depends.
2020-12-24 06:58:28	CrystalMath	m68k is not :D
2020-12-24 06:58:38	Bitweasil	Old Atom Intel chips aren't either! :D
2020-12-24 06:58:43	Bitweasil	The really old, non-speclative ones.
2020-12-24 06:58:49	CrystalMath	but, on DOS x86
2020-12-24 06:58:52	mrvn	CrystalMath: are you surte? 68060 probably has cache attacks too
2020-12-24 06:58:55	CrystalMath	you don't need to protect memory space
2020-12-24 06:59:04	CrystalMath	mrvn: but not speculative execution
2020-12-24 06:59:07	Bitweasil	cache attacks != speculation attacks.
2020-12-24 06:59:33	mrvn	CrystalMath: so pick one of the other named attackes from last year and it has it.
2020-12-24 06:59:34	moon-child	on a similar vein, I like rowhammer happened and everybody just kinda ignored it
2020-12-24 07:00:03	Bitweasil	Disagree, those who were at risk dealt with it, and... then everyone insisted that DDR4 has TRR, and not all of it does. :/
2020-12-24 07:00:04	moon-child	though I don't remember if an exploit of it ever happened that didn't rely on clflush.  One was definitely theorized, though
2020-12-24 07:00:14	Bitweasil	Oh yeah, there were some non-clflush exploits on it.
2020-12-24 07:00:33	doug16k	yeah you can just cause everything to get evicted with the right pathological miss pattern
2020-12-24 07:00:52	Bitweasil	https://arxiv.org/pdf/1507.06955.pdf <-- rowhammer.js
2020-12-24 07:01:01	Bitweasil	And, yeah, you overflow the cache ways and it's pretty quick.
2020-12-24 07:01:17	Bitweasil	All studies and attacks related to Rowhammer so far rely on the availability of a cache flush instruction in order to cause accesses to DRAM
2020-12-24 07:01:17	Bitweasil	modules at a sufficiently high frequency. We overcome this limitation by
2020-12-24 07:01:17	Bitweasil	defeating complex cache replacement policies. We show that caches can
2020-12-24 07:01:17	Bitweasil	be forced into fast cache eviction to trigger the Rowhammer bug with
2020-12-24 07:01:18	Bitweasil	only regular memory accesses. This allows to trigger the Rowhammer
2020-12-24 07:01:18	Bitweasil	bug in highly restricted and even scripting environments.
2020-12-24 07:01:25	Bitweasil	We demonstrate a fully automated attack that requires nothing but a
2020-12-24 07:01:25	Bitweasil	website with JavaScript to trigger faults on remote hardware. Thereby
2020-12-24 07:01:25	Bitweasil	we can gain unrestricted access to systems of website visitors. We show
2020-12-24 07:01:26	Bitweasil	that the attack works on off-the-shelf systems. Existing countermeasures
2020-12-24 07:01:28	Bitweasil	fail to protect against this new Rowhammer attack.
2020-12-24 07:01:31	Bitweasil	er... pdf copy fail, sorry.
2020-12-24 07:02:14	mrvn	With rowhammer you can modify your pagetable and get direct access to memory. I totaly get how that is a big deal. But with all the cache attacks how does that actually help in the real world? So you know if pgp executed the bit 0 or 1 path in the code flow. How do you know when I use gpg? Or on what core gpg will run? and so on?
2020-12-24 07:02:54	Bitweasil	If you can trigger it on demand, you can do a lot.
2020-12-24 07:03:04	moon-child	mrvn: you can combine with other infoleak vulnerabilities
2020-12-24 07:03:13	Bitweasil	Most of that stuff isn't terribly useful against one-off executions, but if there's a way to make it decrypt a given message, or to force it where you want it...
2020-12-24 07:03:23	Bitweasil	I can, as a non-privileged user, set my cpumask.
2020-12-24 07:03:26	Bitweasil	(typically)
2020-12-24 07:03:39	Bitweasil	So, golly, there's only one free core, I'm hogging the rest.  Where do you think that PGP task will go? ;)
2020-12-24 07:03:52	mrvn	Bitweasil: but you have to be on the same core as my gpg. And when you hammer that core to read the caches gpg moves to another core.
2020-12-24 07:03:56	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 240 seconds)
2020-12-24 07:04:02	Bitweasil	There's been a lot of research on "forcing" memory alignments and such into something useful.
2020-12-24 07:04:11	Bitweasil	Not if hyperthreads are enabled.
2020-12-24 07:04:15	mrvn	And if you hog all cores I'm going to notice.
2020-12-24 07:04:26	Bitweasil	I will politely suggest you read some of the papers on the topic, there's been a lot of work on how to make it work.
2020-12-24 07:04:59	-->	sprocklem (~sprocklem@unaffiliated/sprocklem) has joined #osdev
2020-12-24 07:05:33	mrvn	Bitweasil: a lot of them are: Ok I start the exploit and then I start gpg and see I got 80% of the key.
2020-12-24 07:06:02	mrvn	That works in a lab, not in real world.
2020-12-24 07:06:34	Bitweasil	Sure, initially.  I'm not sure how much all of this has spread to the real world, but I will assume that the logfile-free aspects of things like rowhammer and meltdown mean they've been used by the sort of people who have the resources to make weird attacks work.
2020-12-24 07:07:52	mrvn	Bitweasil: as said rowhammer is different. YOu just hammer for a few seconds to a minute and then you have full access. Then you can patch the kernel to wait for gpg to get execute or whatever. You don't have to poll all the time.
2020-12-24 07:09:12	moon-child	that doesn't mean the speculative execution attacks aren't scary.  Just that they're less scary
2020-12-24 07:09:53	mrvn	oh they are totaly scary. But I find them rather limited in where they work.
2020-12-24 07:10:46	mrvn	speculative is somewhat in the middle between cache and rowhammer. You can actually read memory there.
2020-12-24 07:11:10	mrvn	e.g. the ssl private key of the webserver.
2020-12-24 07:11:21	<--	Digit (~user@fsf/member/digit) has left #osdev ("ERC (IRC client for Emacs 27.1)")
2020-12-24 07:15:16	<--	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has quit (Quit: remby)
2020-12-24 07:34:09	-->	remby (~remby@2607:fea8:2c62:8800::9c0c) has joined #osdev
2020-12-24 07:36:10	jimbzy	https://landing.coolermaster.com/kfconsole/
2020-12-24 07:36:11	bslsk05	​landing.coolermaster.com: KFC | Cooler Master
2020-12-24 07:36:30	<--	vendu (~vendu@unaffiliated/vendu) has quit (Remote host closed the connection)
2020-12-24 07:45:12	Ameisen	Never in my life have I needed something so much, and never known until I received it.
2020-12-24 07:47:56	mrvn	Can I reduce the reserved storage for a zfs volume?
2020-12-24 07:48:30	clever	mrvn: one sec
2020-12-24 07:50:00	clever	2020-12-17.04:34:06 zfs create naspool/amd-steam-xfs -o volblocksize=1M -o compression=lz4 -o reservation=none -V 100G -o refreservation=none
2020-12-24 07:50:15	clever	mrvn: can also be changed with `zfs set`
2020-12-24 07:54:11	mrvn	thanks.
2020-12-24 07:54:55	clever	mrvn: beware, that writes to the zvol can then fail due to lack of space
2020-12-24 07:55:13	clever	mrvn: and filesystems arent expecting such an error upon writes to a block dev, so bad things happen
2020-12-24 07:56:34	mrvn	clever: It's a backup so nothing is going to write to it. With compression and unused spaces it's having 800G reserved and not used.
2020-12-24 07:57:08	mrvn	And now I have 800G more space in home again.
2020-12-24 07:57:12	clever	nice
2020-12-24 07:57:51	-->	tjowers (c7bc5729@199.188.87.41) has joined #osdev
2020-12-24 07:58:22	tjowers	Does this address 0xc000000000 have significance to the OS? This code I'm reading mmaps it
2020-12-24 07:59:03	clever	0xc0 0000 0000, doesnt seem that special to me, but it is a 64bit addr
2020-12-24 07:59:08	mrvn	not with that many zeroes.
2020-12-24 07:59:38	mrvn	0xC000_0000 is where I have all my per-cpu memory.
2020-12-24 07:59:52	mrvn	0xC<cpu ID>00_0000 actually.
2020-12-24 08:00:55	mrvn	"Day changed to 24 Dec 2020" and so it begins ...
2020-12-24 08:04:02	<--	dennis95 (~dennis95@mue-88-130-62-033.dsl.tropolys.de) has quit (Quit: Leaving)
2020-12-24 11:23:00	--	irc: disconnected from server
2020-12-24 11:23:35	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-24 11:23:35	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-24 11:23:35	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-24 11:23:35	--	Channel #osdev: 278 nicks (1 op, 0 voices, 277 normals)
2020-12-24 11:24:02	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-24 11:24:12	tjowers	Actually, least amount of latency, memory is less of the concern, but memory allocation adds to latency
2020-12-24 11:24:17	mrvn	tjowers: C or C++?
2020-12-24 11:24:28	mrvn	well, either way use atomic
2020-12-24 11:25:25	<--	isaacwoods (~isaacwood@host109-146-213-228.range109-146.btcentralplus.com) has quit (Quit: WeeChat 2.9)
2020-12-24 11:25:40	tjowers	It's C inside C++, no STL
2020-12-24 11:26:40	tjowers	Not against using templates -- exactly why C++, but only well evaluated custom templates
2020-12-24 11:28:10	tjowers	Not using atomic -- for compiler reordering, using volatile -- for thread sync, custom
2020-12-24 11:28:40	mrvn	tjowers: volatile is not for thread sync
2020-12-24 11:28:57	tjowers	Yeah for compiler reordering
2020-12-24 11:29:04	mrvn	nope
2020-12-24 11:29:26	tjowers	That's how I got around it on -O3
2020-12-24 11:29:51	moon-child	tjowers: atomic is also for compiler reordering
2020-12-24 11:29:55	tjowers	Yeah
2020-12-24 11:30:07	tjowers	I was using __atomic_*
2020-12-24 11:30:11	mrvn	There are only two things you should be using volatile for: variables accessed inside and outside of signal handlers and for hardware memory mapped registers.
2020-12-24 11:30:58	tjowers	Because it's slower?
2020-12-24 11:31:08	mrvn	because it doesn#t do what you think it does
2020-12-24 11:34:01	tjowers	Wish there was just a builtin like __no_hoist_above
2020-12-24 11:35:03	<--	lava (quasselcor@gruss.cc) has quit (Quit: irc4sweb v0.3)
2020-12-24 11:36:02	mrvn	that's called a barrier
2020-12-24 11:36:41	mrvn	gcc has a bunch of builtins for various types of barriers. Or you can use volatile asm("");
2020-12-24 11:36:42	tjowers	Would asm("":::"memory"); prevent the compiler from hoisting?
2020-12-24 11:37:05	mrvn	yes, but also invalidate any content of pointers held in registers.
2020-12-24 11:39:42	tjowers	Would {  asm(""); mem[i];  } be equivalent to the atomic ACQUIRE and {  mem[i] = 999; asm(""); } RELEASE
2020-12-24 11:44:01	mrvn	One does nothing, the other changes memory. So no.
2020-12-24 11:44:43	tjowers	Are you talking about the ACQUIRE/RELEASE macros?
2020-12-24 11:45:16	mrvn	no, mem[i] vs mem[i] = 999
2020-12-24 11:45:35	tjowers	m = mem[i]
2020-12-24 11:49:34	mrvn	Agoraphobes must love the pandemic. Suddenly they are responsible and not odd.
2020-12-24 11:55:05	tjowers	Talking about when people get mad at the topic being off?
2020-12-24 11:56:56	tjowers	The thing I'm catching onto -- is volatile and the asm("") will prevent reordering in the same function invocation, or whatever gcc means by "sequence" in this https://gcc.gnu.org/onlinedocs/gcc/Volatiles.html but not between function invocations, or sequences
2020-12-24 11:56:58	bslsk05	​gcc.gnu.org: Volatiles (Using the GNU Compiler Collection (GCC))
2020-12-24 11:57:09	mrvn	If you go off topic then I will go off topic. It's MAD - multually assured destruction. :)
2020-12-24 11:57:57	mrvn	tjowers: you are doing c++. There is no volatile anymore.
2020-12-24 11:58:06	mrvn	try compiling for c++20
2020-12-24 11:58:16	tjowers	C++11 up to 17
2020-12-24 11:58:26	mrvn	just FYI :)
2020-12-24 11:58:30	tjowers	So really programming C with g++ frontend
2020-12-24 11:58:50	<--	xhe (~xhe@45.251.23.186) has quit (Quit: leaving)
2020-12-24 11:59:08	<--	Jayprakash12345 (~jayprakas@wikimedia/Jayprakash12345) has quit
2020-12-24 11:59:12	mrvn	and yes, volatile access will not be reordered. But that is a side effect and not the goal.
2020-12-24 12:00:37	mrvn	https://godbolt.org/z/GvPfzh
2020-12-24 12:00:38	bslsk05	​godbolt.org: Compiler Explorer
2020-12-24 12:00:43	tjowers	So you're saying that the reordering behavior is implementation specific and if the implementation decides later to change it might not have the same properties -- got it
2020-12-24 12:00:59	mrvn	tjowers: volatile does not stop other things from getting reordered.
2020-12-24 12:02:11	tjowers	Right, so if you write to a volatile variable with a variable that isn't volatile, the steps to get the non-volatile variable may be reordered
2020-12-24 12:02:54	mrvn	anything but the volatile might get reoredered
2020-12-24 12:04:38	mrvn	tjowers: optimization generates code that observably behaves like the original. The optimizer might do whatever it likes if the effect is not observable. Like combining 2 a++ into simply returning 2. And volatile tells the compiler that changes to this variable are observable. So that the compiler can't optiomize away.
2020-12-24 12:05:25	mrvn	That's the case for memory mapped IO registers. reading or writing to them has an observable efect on the hardware.
2020-12-24 12:05:29	-->	lava (quasselcor@gruss.cc) has joined #osdev
2020-12-24 12:10:10	tjowers	Not observable as in private to the process?
2020-12-24 12:10:18	tjowers	Deterministic
2020-12-24 12:10:24	mrvn	observable as in defined by the C standard
2020-12-24 12:15:11	mrvn	https://godbolt.org/z/bdxGcG   How do you stop reordering of local variables? Can you in gcc?
2020-12-24 12:15:13	bslsk05	​godbolt.org: Compiler Explorer
2020-12-24 12:18:49	mrvn	I'm not sure I can tell gcc not to optimize the two "a++" without making a observable from the outside, e.g. store &a in a global var.
2020-12-24 12:26:27	-->	avega (~Thunderbi@94.25.228.213) has joined #osdev
2020-12-24 19:00:38	--	irc: disconnected from server
2020-12-24 19:01:13	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-24 19:01:13	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-24 19:01:13	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-24 19:01:13	--	Channel #osdev: 271 nicks (1 op, 0 voices, 270 normals)
2020-12-24 19:01:40	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-24 19:21:34	<--	xhe (~xhe@45.251.23.186) has quit (Ping timeout: 246 seconds)
2020-12-24 19:21:51	-->	xhe (~xhe@45.251.23.186) has joined #osdev
2020-12-24 19:21:51	-->	dennis95 (~dennis95@mue-88-130-62-041.dsl.tropolys.de) has joined #osdev
2020-12-24 19:26:36	<--	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has quit (Quit: WeeChat 2.9)
2020-12-24 19:35:30	-->	sortie (~sortie@D470948F.rev.sefiber.dk) has joined #osdev
2020-12-24 19:41:02	-->	aakturk (51d5f312@81.213.243.18) has joined #osdev
2020-12-24 19:41:48	<--	aakturk (51d5f312@81.213.243.18) has quit (Remote host closed the connection)
2020-12-24 19:48:48	<--	remby (~rg@2607:fea8:2c62:8800::2437) has quit (Quit: remby)
2020-12-24 20:03:30	-->	johnjay (~pi@38.120.10.99) has joined #osdev
2020-12-24 20:03:48	-->	user24 (~user24@2a02:810a:1440:7304:1c53:699a:b2ba:4548) has joined #osdev
2020-12-24 20:13:22	-->	X-Scale` (~ARM@46.50.0.189) has joined #osdev
2020-12-24 20:13:52	<--	X-Scale (~ARM@153.211.137.78.rev.vodafone.pt) has quit (Ping timeout: 256 seconds)
2020-12-24 20:14:34	--	X-Scale` is now known as X-Scale
2020-12-24 20:22:02	-->	CryptoDavid (uid14990@gateway/web/irccloud.com/x-tonyowsyukwqfcir) has joined #osdev
2020-12-24 20:43:26	-->	sangoma (~zeus@41.210.145.250) has joined #osdev
2020-12-25 01:06:22	--	irc: disconnected from server
2020-12-25 01:07:06	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-25 01:07:06	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-25 01:07:06	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-25 01:07:06	--	Channel #osdev: 279 nicks (1 op, 0 voices, 278 normals)
2020-12-25 01:07:33	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-25 01:22:06	gog	hi jimbzy
2020-12-25 01:22:20	gog	gleðileg jól!
2020-12-25 01:23:32	-->	MDude (~MDude@71.50.47.112) has joined #osdev
2020-12-25 01:24:12	jimbzy	?
2020-12-25 01:26:29	gog	happy christmas
2020-12-25 01:32:42	jimbzy	Oh.  Yeah, same to you.
2020-12-25 01:33:49	jimbzy	It's the 24th here, but it won't matter.  Around here, 25 December is no different than any of the other 364 days of the year.  :p
2020-12-25 01:36:17	phr3ak	thanks you too
2020-12-25 01:39:40	gog	yeah i'm not big on xmas either but i try to spread some seasonal cheer
2020-12-25 01:40:05	j`ey	jimbzy: around here... as in your house or your city??
2020-12-25 01:40:16	jimbzy	In my house.
2020-12-25 01:40:36	j`ey	Fair
2020-12-25 01:40:42	jimbzy	It's just a reminder of how silly my life is, and another reason for my son to meltdown.
2020-12-25 01:43:21	-->	G3nka1 (~hubatrix@unaffiliated/hubatrix) has joined #osdev
2020-12-25 01:44:45	jimbzy	I'm already "in trouble" because I won't be attending my brothers' annual show of wealth on Saturday, but I have a house to get inspected :p
2020-12-25 01:45:32	jimbzy	The inspector is usually closed from Christmas to after New Years, but I had a friend out there call in a favor to make it happen.  :)
2020-12-25 01:50:06	j`ey	rewrote my page table mapping code https://paste.gg/p/anonymous/7d4db94130cc497391e23dff19c52266
2020-12-25 01:50:06	bslsk05	​paste.gg: pt.rs · paste.gg
2020-12-25 01:50:21	j`ey	still needs work. but getting there
2020-12-25 01:50:35	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 240 seconds)
2020-12-25 01:51:24	jimbzy	Nice!
2020-12-25 01:51:40	jimbzy	I'm right in the middle of a mailbox rewrite.
2020-12-25 01:51:53	gog	ah the entitlement of family to your time, energy and labor
2020-12-25 01:52:09	-->	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has joined #osdev
2020-12-25 01:52:56	j`ey	jimbzy: paste some code!
2020-12-25 01:53:41	CrystalMath	gog: i shortened my hair to just a bit below the shoulders
2020-12-25 01:54:05	jimbzy	I will when I get it further along, j`ey.  Right now, it's just a bunch of stubs.
2020-12-25 01:57:02	j`ey	jimbzy: ooh you pushed your exception stuff
2020-12-25 01:57:21	jimbzy	Yeah
2020-12-25 01:57:47	jimbzy	It's kind of flakey still, but it has worked as far as I can tell.
2020-12-25 02:00:48	gog	oh wow now it's shorter than mine lol
2020-12-25 02:00:50	CrystalMath	gog: i wish i left it an inch longer :/
2020-12-25 02:00:54	gog	aw
2020-12-25 02:01:02	CrystalMath	but it won't take long
2020-12-25 02:01:04	j`ey	jimbzy: oh you also change EL now
2020-12-25 02:01:08	gog	you'll get that inch back in a month
2020-12-25 02:01:11	jimbzy	Yeah
2020-12-25 02:01:48	jimbzy	I was messing around with that a bit, too.
2020-12-25 02:03:42	j`ey	Im just assuming I start at EL1 for now
2020-12-25 02:04:23	jimbzy	Well, from what I read the Pi3 starts in EL2 by default for linux.
2020-12-25 02:04:55	mrvn	only 64bit Pi3s
2020-12-25 02:05:00	j`ey	Yeah, my old code switched to EL1, but Im leaving it off for now
2020-12-25 02:05:22	-->	srjek (~srjek@2601:249:600:bb1:e843:b6b3:8196:f7a0) has joined #osdev
2020-12-25 02:08:55	jimbzy	mrvn, What do the others start in usually?
2020-12-25 02:09:12	mrvn	jimbzy: 32bit, flat our kernel mode.
2020-12-25 02:09:21	mrvn	flat out ....
2020-12-25 02:09:22	jimbzy	Ahh
2020-12-25 02:11:29	jimbzy	I'm pretty sure I've read that in one of the documentation fragments.
2020-12-25 02:11:34	mrvn	Do the 32bit broadcom cpus even have the hypervisor/secure modes?
2020-12-25 02:12:08	jimbzy	dunno
2020-12-25 02:20:05	-->	Jayprakash12345 (~jayprakas@wikimedia/Jayprakash12345) has joined #osdev
2020-12-25 02:23:35	<--	Jayprakash12345 (~jayprakas@wikimedia/Jayprakash12345) has quit (Client Quit)
2020-12-25 02:24:01	-->	sangoma (~zeus@h11fa.n1.ips.mtn.co.ug) has joined #osdev
2020-12-25 02:25:36	jimbzy	Ok, I think I got all the property tags right.
2020-12-25 02:26:51	gog	time to reboot
2020-12-25 02:27:08	<--	gog (~ada@nova-046-182-189-142.nat.nova.is) has quit (Quit: bye)
2020-12-25 02:29:16	-->	gog (~ada@nova-046-182-189-142.nat.nova.is) has joined #osdev
2020-12-25 02:33:19	-->	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has joined #osdev
2020-12-25 02:43:27	gog	https://i.imgur.com/qeqTGOl.png
2020-12-25 02:43:47	mrvn	lol
2020-12-25 02:44:22	<--	diwyjukjt5nwbmzd (~ZXIvryoL~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-25 02:47:19	<--	CryptoDavid (uid14990@gateway/web/irccloud.com/x-tonyowsyukwqfcir) has quit (Quit: Connection closed for inactivity)
2020-12-25 02:49:07	kingoffrance	so that means the guy talking about things THEY dont want you to know with all the question marks, his clothes actually say something, they just didnt have the proper font
2020-12-25 02:50:22	mrvn	It's a steaming pile of <?> with a smile.
2020-12-25 02:54:31	<--	knebulae (~nebulae@c-73-145-147-252.hsd1.mi.comcast.net) has quit (Read error: Connection reset by peer)
2020-12-25 02:56:19	-->	knebulae (~nebulae@c-73-145-147-252.hsd1.mi.comcast.net) has joined #osdev
2020-12-25 02:56:19	jimbzy	The one thing I do like about Christmas is the cooking.  My ham is going to rock some faces.
2020-12-25 02:57:45	gog	my wife roasted chicken with veggies, then sauteed some other veggies with mushrooms, we have cranberry sauce, tomato salad
2020-12-25 02:57:56	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined #osdev
2020-12-25 02:58:48	gog	we're about to sit down and eat rn actually
2020-12-25 03:00:17	jimbzy	Cheers
2020-12-25 03:00:42	gog	i'm literally about to eat half a chicken
2020-12-25 03:02:36	jimbzy	XD
2020-12-25 03:03:35	<--	bytefire (~bytefire@unaffiliated/bytefire) has quit (Quit: leaving)
2020-12-25 03:04:58	-->	bytefire (~bytefire@unaffiliated/bytefire) has joined #osdev
2020-12-25 03:06:28	mrvn	https://www.youtube.com/watch?v=MSI4ZHVSatw
2020-12-25 03:06:30	bslsk05	​www.youtube.com: Quarantine Spirit Risotto - YouTube
2020-12-25 03:12:04	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2020-12-25 03:17:01	<--	cantstanya (~chatting@gateway/tor-sasl/cantstanya) has quit (Remote host closed the connection)
2020-12-25 03:17:46	-->	SkyZ (43538427@ool-43538427.dyn.optonline.net) has joined #osdev
2020-12-25 03:18:26	-->	cantstanya (~chatting@gateway/tor-sasl/cantstanya) has joined #osdev
2020-12-25 03:18:28	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-25 03:19:00	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-25 03:24:47	<--	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has quit (Quit: adu)
2020-12-25 03:29:04	gog	i did it
2020-12-25 03:29:07	gog	i ate half a chicken
2020-12-25 03:29:27	gog	and some veggies and cranberry sauce
2020-12-25 03:29:53	jimbzy	:D
2020-12-25 03:35:38	<--	G3nka1 (~hubatrix@unaffiliated/hubatrix) has quit (Remote host closed the connection)
2020-12-25 03:40:13	gog	my wife did an excellent job roasting it, it was tender and juicy
2020-12-25 03:41:15	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-25 03:41:47	-->	superleaf1995 (bdb3ca4d@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.202.77) has joined #osdev
2020-12-25 03:42:05	<--	SkyZ (43538427@ool-43538427.dyn.optonline.net) has quit (Remote host closed the connection)
2020-12-25 03:42:53	<--	Sheilong (uid293653@gateway/web/irccloud.com/x-eoacigssonweyiuu) has quit (Quit: Connection closed for inactivity)
2020-12-25 03:47:14	jimbzy	Yummy.  I still have to make a couple of sides, but that won't be that bad.
2020-12-25 03:55:33	gog	sides are where it's at tho
2020-12-25 03:55:43	gog	mashed potates and stuffing are the shit
2020-12-25 03:57:04	-->	CryptoDavid (uid14990@gateway/web/irccloud.com/x-mviaddmvkebprcsf) has joined #osdev
2020-12-25 04:00:20	jimbzy	Yeah, I'm a big fan of stuffing.
2020-12-25 04:20:52	<--	lispmacs[work] (~user@fsf/member/lispmacs) has quit (Remote host closed the connection)
2020-12-25 04:21:36	<--	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has quit (Quit: remby)
2020-12-25 04:26:53	-->	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has joined #osdev
2020-12-25 04:28:22	-->	Sheilong (uid293653@gateway/web/irccloud.com/x-dkfzyfmbutdgutbh) has joined #osdev
2020-12-25 04:30:49	<--	mrvn (~mrvn@HSI-KBW-078-043-040-234.hsi4.kabel-badenwuerttemberg.de) has quit (Remote host closed the connection)
2020-12-25 04:37:16	-->	Sajesajama (Salsa@gateway/vpn/protonvpn/sajesajama) has joined #osdev
2020-12-25 04:37:41	-->	Tazmainian (~Tazmain@unaffiliated/tazmain) has joined #osdev
2020-12-25 04:37:55	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 240 seconds)
2020-12-25 04:39:57	-->	Sajesajama_ (Salsa@gateway/vpn/protonvpn/sajesajama) has joined #osdev
2020-12-25 04:41:48	<--	Sajesajama_ (Salsa@gateway/vpn/protonvpn/sajesajama) has quit (Remote host closed the connection)
2020-12-25 06:58:27	--	irc: disconnected from server
2020-12-25 06:59:06	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-25 06:59:06	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-25 06:59:06	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-25 06:59:06	--	Channel #osdev: 285 nicks (1 op, 0 voices, 284 normals)
2020-12-25 06:59:13	geist	so it was superscalar, but each instruction took at least a few cycles, so the fact that it could overlap a bunch of instructions is what got the performance up near its theoretical max
2020-12-25 06:59:15	mrvn	geist: so basically an early IA64?
2020-12-25 06:59:32	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-25 06:59:33	geist	well no. more like an early modern superscalar design
2020-12-25 06:59:52	geist	though it did have 60 bit instructions and whatnot, but its memory was 60 bits wide
2020-12-25 06:59:58	mrvn	I never looked into how the 68060 is superscalar.
2020-12-25 07:00:47	heat	j`ey: did you write your own LLVM target?
2020-12-25 07:02:29	geist	mrvn: actually yeah funny you mention he ia64. it kinda did
2020-12-25 07:02:45	geist	was just reading more about the 6600 and the 7600. it had 60 bit word memory
2020-12-25 07:03:00	geist	and each 60 bit word could contain 15 or 30 bit instructions
2020-12-25 07:03:12	geist	the only limit is a 30 bit instruction coukdn't cross a word boundary
2020-12-25 07:03:18	geist	and you could only branch to the start of a word
2020-12-25 07:03:26	geist	so kinda looks a bit like the ia64 instruction bundle
2020-12-25 07:03:48	geist	the main registers were 60 bits wide
2020-12-25 07:04:40	-->	procnto (sid380963@gateway/web/irccloud.com/x-kisirjesjiitxypn) has joined #osdev
2020-12-25 07:05:01	j`ey	heat: no
2020-12-25 07:07:42	geist	mrvn: https://en.wikipedia.org/wiki/Motorola_68060 seems to indicate it's a fairly standard (at the time) dual issue pipeline
2020-12-25 07:07:42	bslsk05	​en.wikipedia.org: Motorola 68060 - Wikipedia
2020-12-25 07:08:02	geist	so could run up to 2 instructions in parallel in some cases, thus technically superscalar
2020-12-25 07:08:47	heat	fuck
2020-12-25 07:09:10	vdamewood	It didn't stop at 40?
2020-12-25 07:12:41	geist	there was a 060
2020-12-25 07:12:46	geist	just wasn't used a lot
2020-12-25 07:12:56	heat	is there like a proper IA64 emulator?
2020-12-25 07:13:01	geist	or at least not in desktop class machines. i think it ended up getting renamed coldfire or something
2020-12-25 07:13:10	geist	heat: i think there are a few
2020-12-25 07:13:13	mrvn	heat: is there something qemu doesn't emulate?
2020-12-25 07:13:27	mrvn	geist: no, coldfire is a subset
2020-12-25 07:13:28	heat	mrvn: apparently, IA-64
2020-12-25 07:14:22	heat	It would be interesting to make a tiny IA-64 kernel, just to tinker with it
2020-12-25 07:14:58	<--	sangoma (~zeus@h11fa.n1.ips.mtn.co.ug) has quit (Quit: WeeChat 2.9)
2020-12-25 07:16:37	geist	heat: yah i've thought about it. it's a completely mind-screw
2020-12-25 07:16:38	-->	gog (~ada@nova-046-182-189-142.nat.nova.is) has joined #osdev
2020-12-25 07:16:52	geist	the architecture. you should read about it. kinda blows a lot of expectations about how cpus should work out of the water
2020-12-25 07:17:01	geist	completely independent of the ISA and the weirdness there
2020-12-25 07:17:05	geist	the system mode stuff is *strange*
2020-12-25 07:17:13	geist	exceptions, mmu, syscalls, etc
2020-12-25 07:17:36	mrvn	geist: the early designs that didn't verify correctness of the asm or thel later models?
2020-12-25 07:18:22	geist	all of them. i mean everyone focuses on the ISA
2020-12-25 07:18:31	geist	but i'm talking about the stuff no one generally talksa bout
2020-12-25 07:18:39	geist	as in the way the architeture does memory management and whatnot
2020-12-25 07:18:44	geist	it's very bizzare
2020-12-25 07:19:08	geist	mostly independent of the whole instruction bundling stuff
2020-12-25 07:20:26	heat	IA-64 could execute 32-bit x86 code?
2020-12-25 07:20:34	heat	like, nativly
2020-12-25 07:20:37	heat	natively**
2020-12-25 07:21:11	mrvn	heat: early CPUs had some hardware support to improve an x86 software emulator.
2020-12-25 07:21:14	<--	CryptoDavid (uid14990@gateway/web/irccloud.com/x-werdbjwidxjewscv) has quit (Quit: Connection closed for inactivity)
2020-12-25 07:21:28	mrvn	heat: nothing feature complete in hardware
2020-12-25 07:21:43	heat	the docs talk about doing some firmware call to go into IA-32 mode
2020-12-25 07:21:47	<--	f4t4l_3rr0r (~PhoenixCo@unaffiliated/alien-fx-fiend/x-2870569) has quit (Quit: .oO (bbl tc folks~!))
2020-12-25 07:21:53	heat	http://refspecs.linux-foundation.org/IA64-softdevman-vol2.pdf, page 27
2020-12-25 07:22:00	gog	y'all talking about itanium?
2020-12-25 07:22:19	mrvn	gog: yes
2020-12-25 07:22:54	peterbjornx	afaik some itaniums did have an x86 frontend too
2020-12-25 07:23:34	heat	yah this seems to have native IA-32
2020-12-25 07:24:13	geist	i think they did yes. early ones
2020-12-25 07:24:23	geist	iirc they ran x86 ode basically in order, so it was mostly a compatibility thing
2020-12-25 07:24:38	heat	it could do big-endian data fetches
2020-12-25 07:24:45	geist	it was not as good as an equivalent x86 machine at the time
2020-12-25 07:24:48	heat	but it still needed to fetch instructions in little endian
2020-12-25 07:24:59	geist	iirc they dropped the x86 compat in later models
2020-12-25 07:25:37	mrvn	You were supposed to buy an itanium and keep running your legacy x86 code for a while.
2020-12-25 07:26:25	heat	holy shit you could have instructions running on physical memory but data accesses running on virtual memory, and vice-versa
2020-12-25 07:27:28	geist	yah the mmu is really odd. a total mind screw
2020-12-25 07:27:33	geist	i still dont completely grok it
2020-12-25 07:27:45	geist	also the syscall mechanism is completely strange. you should read about it
2020-12-25 07:28:21	geist	there's a traditional 'fault into supervisor mode' thing but there's a more sophisticated 'far call into supervisor mode' thing that at first looks like it doesn't make sense but is really neat
2020-12-25 07:28:25	<--	gog (~ada@nova-046-182-189-142.nat.nova.is) has quit (Ping timeout: 264 seconds)
2020-12-25 07:28:27	peterbjornx	completely off topic to this convo but does anyone actually know what those stars on the forum mean?
2020-12-25 07:28:38	peterbjornx	post count rank or something?
2020-12-25 07:28:39	heat	posts
2020-12-25 07:28:43	heat	yeah
2020-12-25 07:28:52	j`ey	hm I may have gotten non-4K pages to map
2020-12-25 07:29:08	geist	j`ey: higher level pages?
2020-12-25 07:29:11	heat	geist: can't you also far call in x86?
2020-12-25 07:29:12	geist	like 2MB, 512GB?
2020-12-25 07:29:14	j`ey	gotta read the logs more to figure out if its actually working :-)
2020-12-25 07:29:21	geist	heat: yeah but this thing is *much* weirder
2020-12-25 07:29:28	geist	i shouldn't have said far call because then you think it's like x86
2020-12-25 07:29:40	geist	the 'ecall' or whatever it is in ia64 is unlike anything else i've ever seen
2020-12-25 07:29:44	j`ey	yeah 2mb, 1gb, although I dont have enough code/data to cover 1gb yet
2020-12-25 07:30:10	heat	I just read something about a virtual hash page table
2020-12-25 07:30:12	heat	I'm scared
2020-12-25 07:30:15	geist	heat: iirc supervisor mode basically marks a page as being an ecall target. a special bit in the page table entry
2020-12-25 07:30:33	geist	and an ecall (i think tha's the instruction) can literally branch to it from user mode and it directly switches to supervisor
2020-12-25 07:30:50	geist	that's it. the mechanism is you can basically directly switch to supervisor without going through an exception handler
2020-12-25 07:30:57	geist	but *only* on pages that are marked this way
2020-12-25 07:31:10	geist	so then you figure okay, how can you securely do that, and the answer is 'very carefully'
2020-12-25 07:31:22	heat	vsyscall page?
2020-12-25 07:31:26	geist	basically
2020-12-25 07:31:56	geist	but since user pace can branch to any offset within it you have to do some shenanigans to at worst make it an invalid call
2020-12-25 07:32:01	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 264 seconds)
2020-12-25 07:32:13	mrvn	geist: kind of like AmigaOS entered supervisor mode.
2020-12-25 07:32:32	geist	but effectively once you're in this vsyscall page the cpu is in supervisor mode and can branch somewhere else in the kernel
2020-12-25 07:32:41	heat	oh what
2020-12-25 07:32:47	heat	the VHPT is essentially a software TLB
2020-12-25 07:33:02	geist	yep. there are two page table types in ia64
2020-12-25 07:33:10	j`ey	oh lol, Im mapping 2MB pages, but still doing it the same number of times as if I was mapping 4KB
2020-12-25 07:33:11	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-25 07:33:16	heat	this is kind of neat
2020-12-25 07:33:17	geist	one of them is much closer to a software TLB and the other one is kinda like a PPC single largeass page table
2020-12-25 07:33:39	geist	heat: the trick is the VHPT is iirc in *virtual memory*
2020-12-25 07:33:45	geist	so it has a recursive quality to it
2020-12-25 07:33:46	heat	would solve the PML5 issue
2020-12-25 07:33:57	jimbzy	Time for a break.
2020-12-25 07:35:36	geist	closest to the VHPT in recent memory is VAX actually. user page tables in VAX are single run, not heirarchial (so they can be like 1MB in length) but they live in virtual memory on top of kernel pages
2020-12-25 07:35:46	geist	so they can be sparse and essentially double page fault
2020-12-25 07:37:11	heat	apparently, there's 8 address spaces
2020-12-25 07:37:16	heat	I'm failing to see how this is useful
2020-12-25 07:38:29	geist	heat: yeah right? it's like they tossed in every interesting idea that had been floating around at the time
2020-12-25 07:38:49	geist	that being said the two modes of the MMU, i remember reading some paper written about the two modes in linux and how they decided that one of them was basically superior
2020-12-25 07:38:59	geist	i think it was the 'single bigass table' mode, which i forget which one
2020-12-25 07:40:20	geist	also dont forget ia64 has a whole rotating regiter window thing
2020-12-25 07:40:43	geist	much more complicated than sparcs model, and i forget how all of that works. sparc had a whole register window spill exception, i guess ia64 oes too?
2020-12-25 07:40:50	geist	that's anothe thing the kernel has to deal with pronto
2020-12-25 07:42:15	heat	this is all very scary
2020-12-25 07:42:28	heat	I'm starting to like my super fancy x86 processor that pretends it's 1986
2020-12-25 07:43:05	CrystalMath	m68k is great too :D
2020-12-25 07:43:08	mrvn	geist: I never got why this had to be a exception thing.
2020-12-25 07:43:23	CrystalMath	i approve of the m68k arhitecture
2020-12-25 07:43:31	geist	mrvn: the register window?
2020-12-25 07:43:36	CrystalMath	as well as x86 and VAX
2020-12-25 07:43:38	mrvn	geist: the spilling, yes
2020-12-25 07:43:49	geist	acually i think the ia64 may not need to be an exception
2020-12-25 07:44:01	geist	iirc when you allocate a frame, it may do the spilling in hardware right there
2020-12-25 07:44:11	mrvn	You could add the spilling/unspilling to CALL and RET.
2020-12-25 07:44:14	geist	sparc i guess probably did it in an exception because it was fundamentally a risc machine
2020-12-25 07:44:20	peterbjornx	god, register windows
2020-12-25 07:44:27	mrvn	or the opcode to allocate a stack frame. yes
2020-12-25 07:44:29	peterbjornx	reminds me of xtensa
2020-12-25 07:44:36	geist	and so it stopping and running a bunch of microcode would be sort of against the risc philosophy
2020-12-25 07:44:38	peterbjornx	it gives me a darn headache
2020-12-25 07:45:14	geist	ia64 register windows were much more complicated. iirc when you enter a function you basically allocate N local registers (out of the 96 or something you could use up to, 32 were fixed iirc)
2020-12-25 07:45:23	geist	so you could say 'i need 7 registers' and they're start ar r32+
2020-12-25 07:45:35	phr3ak	I'm reading some docs about kaslr. It says "Since the introduction of non-executable (NX) bits, memory corruption attacks have to rely on existing code in the victim process instead of code injection" Is this NX bit different than Ex bit in descriptor table, right?
2020-12-25 07:45:39	geist	so presumably it would track in some control register which part of he window is active and how it maps to hardware
2020-12-25 07:45:43	mrvn	geist: I could think of making a FRAME <num-regs> <size> opcode that would reserve stack space and a register window while also spilling as needed.
2020-12-25 07:45:47	geist	and maybe automatically spill up to 7 registers in this case
2020-12-25 07:45:56	geist	mrvn: i think that's precisely what ia64 does
2020-12-25 07:45:57	heat	phr3ak: what's EX?
2020-12-25 07:46:10	phr3ak	Ex: Executable bit. If 1 code in this segment can be executed, ie. a code selector. If 0 it is a data selector.
2020-12-25 07:46:18	mrvn	geist: I guess though that you need a data stack and register stack then.
2020-12-25 07:46:19	heat	ah
2020-12-25 07:46:26	geist	from some itanium assembly i have floating around
2020-12-25 07:46:26	geist	4000000000000940:	08 30 2d 10 80 05 	[MMI]       alloc r38=ar.pfs,11,8,0
2020-12-25 07:46:38	geist	that's the first instruction in a function, i guess it's allocating some number of regs
2020-12-25 07:46:39	heat	well, the NX bit works page by page instead of you having to make up separate segments
2020-12-25 07:46:52	peterbjornx	itanium assembly has always seen incredibly alien to me
2020-12-25 07:47:00	peterbjornx	*seemed
2020-12-25 07:47:34	mrvn	geist: spill/unspill as late as possible. So if the code goes up and down repeadetly it will spill the first time and only unspill the last time when it returns.
2020-12-25 07:47:44	heat	(that executable bit thing was very much underused and afaik only used on some PaX patches for linux, NX is ubiquitous)
2020-12-25 07:47:48	geist	mrvn: question there is does that make the stack frame essentially dynamically allocated? ie, if it didn't need to spill does it not push the SP? probably
2020-12-25 07:48:02	moon-child	peterbjornx: https://devblogs.microsoft.com/oldnewthing/20150727-00/?p=90821
2020-12-25 07:48:03	bslsk05	​devblogs.microsoft.com: The Itanium processor, part 1: Warming up | The Old New Thing
2020-12-25 07:48:07	geist	or if you tail call, presumably it can unspill all at once
2020-12-25 07:48:15	mrvn	geist: if you want delayed spill/unspill you need 2 stacks.
2020-12-25 07:48:44	mrvn	geist: or always reserve the space on the stack but only save regs when needed.
2020-12-25 07:49:22	phr3ak	heat: why is this kind of segmentation not used in OSes?
2020-12-25 07:49:49	geist	because segementation is effectively dead on modern x86s
2020-12-25 07:49:57	mrvn	phr3ak: segments don't handle fragmentation
2020-12-25 07:50:07	geist	most of it is nerfed and you're not expected to use it, it's only there for legacy purposes
2020-12-25 07:50:19	phr3ak	thanks
2020-12-25 07:50:41	geist	thats the nitty gritty answer. the better answer is a flat memory model with a paging mmu + NX bit per page is generally superior
2020-12-25 07:50:58	heat	you'd probably need to have a part of the address space for data, another for code, and then you'd run into compatibility problems/why does my pointer point to code and when I deref it's actual data
2020-12-25 07:50:59	geist	and what more or less all modern arches do. segmentation you effectively disable and in 64bit mode is baiscally vestigial
2020-12-25 07:51:13	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 264 seconds)
2020-12-25 07:51:17	j`ey	hmm trying to link my kernel with a 1GB data section takes a bit of time..
2020-12-25 07:51:21	geist	and x86 style segmentation doesn't exist on other arches like arm and riscv
2020-12-25 07:51:25	geist	whereas paging + NX does
2020-12-25 07:51:26	mrvn	They could have made segments use virtual memory with separate page tables for each segment.
2020-12-25 07:51:29	heat	j`ey: why tho
2020-12-25 07:51:41	geist	j`ey: yeah that's a sign you're not doing it right
2020-12-25 07:51:42	j`ey	heat: to test my HUGE pages :P
2020-12-25 07:51:48	heat	page allocator?
2020-12-25 07:51:51	geist	okay fair enough
2020-12-25 07:52:56	doug16k	if you encounter santa tonight in your home, you think you should call the police, or just engage him in combat right then
2020-12-25 07:53:09	mrvn	j`ey: do you realy want to do that? That kind of wastes a lot of memory.
2020-12-25 07:53:20	geist	it's a test
2020-12-25 07:53:23	matt|home	you should make sure he's wearing a mask first and then politely ask him to leave since you don't want to risk it.
2020-12-25 07:53:31	heat	doug16k: you can try to explain the details of IA-64 right there and then
2020-12-25 07:53:52	geist	yah that always scares em off
2020-12-25 07:53:52	j`ey	mapped: 4K pages: 0x12, 2M pages: 0x1, 1G pages: 0x0
2020-12-25 07:54:15	j`ey	yay, seems to be working
2020-12-25 07:54:22	heat	yo why didn't you add that to the bss?
2020-12-25 07:54:29	heat	or is that still slow
2020-12-25 07:54:32	-->	sprocklem (~sprocklem@unaffiliated/sprocklem) has joined #osdev
2020-12-25 07:54:39	j`ey	still slow
2020-12-25 07:54:48	j`ey	I gave up, it ran out of memory linking it
2020-12-25 07:54:54	geist	that's a bit funny, bss taking a while
2020-12-25 07:55:03	geist	but maybe that that exceeds the code model or something
2020-12-25 07:55:06	geist	and causes it to have trouble
2020-12-25 07:55:42	geist	i assume you're testing the 'map the kernel at startup' thing
2020-12-25 07:55:48	j`ey	yeah
2020-12-25 07:55:51	geist	since you can always just write code that later dynamically maps 1GB
2020-12-25 07:56:25	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 240 seconds)
2020-12-25 07:56:29	jimbzy	This is going to be bangarang.  I'm deklunkifying my code.
2020-12-25 07:56:42	geist	taht being said the whole map the kernel at boot thing it's even hard to justify 2MB pages if you want to actually properly mark pages as R, RX, RW, etc
2020-12-25 07:56:43	j`ey	it's only 18 pages of code currently, so I padded it with 2MB to test (that links quickly)
2020-12-25 07:56:50	geist	since to do that you have to align each kernel segment on 2MB boundaries
2020-12-25 07:57:11	geist	64K is a nice compromise, and then use 64K contig pages
2020-12-25 07:57:26	j`ey	contig pages looks like more work to support
2020-12-25 07:57:28	heat	I map with 2MB pages and then remap it with proper permissions
2020-12-25 07:57:33	j`ey	larger block mappings are a bit easier
2020-12-25 07:57:41	<--	dennis95 (~dennis95@mue-88-130-62-041.dsl.tropolys.de) has quit (Quit: Leaving)
2020-12-25 07:57:44	doug16k	you would probably gain more by doing some locality optimizations that group together hot and cold regions
2020-12-25 07:57:53	geist	heat: yah but trouble there is you have to waste up to 2MB for the gaps
2020-12-25 07:58:01	heat	I don't
2020-12-25 07:58:11	heat	I just don't use the large pages for the actual permanent mappings
2020-12-25 07:58:12	geist	well, or you allow aliasing, yes
2020-12-25 07:58:14	heat	it's just to bootstrap
2020-12-25 07:58:26	geist	oh sure. i'm talking about for the permanent mapping of the kernel
2020-12-25 07:59:10	mrvn	geist: in a late stage kernel you might reach 2MB code/data.
2020-12-25 07:59:12	heat	as we've talked about here before, mapping huge pages and large pages may be undefined
2020-12-25 07:59:22	heat	because of that caching thing
2020-12-25 07:59:48	heat	and it's only defined for some range of physical memory because intel got tired of everyone ignoring the rule
2020-12-25 08:00:12	geist	that's aan intel specific thing
2020-12-25 08:00:13	doug16k	may have to worry about conflicting memory types. it's specially not UB below 2MB
2020-12-25 08:00:15	heat	mapping 0x0 - 2MiB will certainly hit that thing
2020-12-25 08:00:19	geist	as in, yes, but whatever. x86 is a dumpster fire
2020-12-25 08:00:28	geist	and yeah < 2MB physical
2020-12-25 08:00:32	doug16k	yeah AMD doesn't promise that conflict with MTRR is okay
2020-12-25 08:00:50	doug16k	only intel makes that below 2M promise
2020-12-25 08:01:02	geist	so if you're doing 2MB mmu pages then you can neber really map your kernel into 0-2MB physical anyway because of the 640k memory hole
2020-12-25 08:01:13	geist	so almost by definition your kernel code/data will live >=2MB physical there anyway
2020-12-25 08:01:31	heat	I'm mapping mine into 1MiB
2020-12-25 08:01:45	geist	right, well that's your choice, but i think starting at 2MB+ is a good idea
2020-12-25 08:01:52	heat	the Classic(tm) osdev experience
2020-12-25 08:01:55	geist	if anythin simply so you can start your code on a fresh new large page
2020-12-25 08:02:57	-->	mahmutov (~milisman@unaffiliated/mahmutov) has joined #osdev
2020-12-25 08:02:58	-->	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has joined #osdev
2020-12-25 08:03:03	heat	if you're there you might as well map at 16MB
2020-12-25 08:03:16	heat	and save ISA DMA memory
2020-12-25 08:03:29	doug16k	why not
2020-12-25 08:03:57	doug16k	also ensures that no 286 segment could ever run
2020-12-25 08:04:05	geist	sure. at the minimum i'd basically reserve 0-640k as there be dragons/ISA
2020-12-25 08:04:29	doug16k	run in the kernel I mean
2020-12-25 08:04:34	geist	as far as virtual space i explicitly started the user address space at 16MB for kinda similar reasons
2020-12-25 08:04:49	geist	as in 0-16MB is off limtis for all mappings, and technically no mans land
2020-12-25 08:05:50	heat	the default ELF linkers won't like that :)
2020-12-25 08:06:00	doug16k	why
2020-12-25 08:06:05	mrvn	geist: 4MB for x86
2020-12-25 08:06:09	heat	the default base is 4MB
2020-12-25 08:06:15	heat	and 6MB for .data
2020-12-25 08:06:34	heat	(unless it the .text grows larger of course)
2020-12-25 08:06:36	geist	mrvn: x86-32?
2020-12-25 08:06:38	geist	yeah sure.
2020-12-25 08:07:00	geist	if you want a fairly consistent smallest large page size across all modern arches, i guess 4MB is a good one
2020-12-25 08:07:10	heat	geist: nah that's x86_64
2020-12-25 08:07:11	geist	well, 16MB i think if you're using the legcay arm32 stuff
2020-12-25 08:07:13	mrvn	heat: the default linker doesn't like kernel at all anyway.
2020-12-25 08:07:18	geist	heat: eh?
2020-12-25 08:07:24	heat	for x86 32 it's something like 128MiB base
2020-12-25 08:07:31	geist	for what?
2020-12-25 08:07:46	doug16k	it would be thoughtful to have a chicken bit to ban memory at physaddr < 16MB, in case of hideous firmware
2020-12-25 08:07:59	heat	for .text
2020-12-25 08:08:01	geist	the reason i picked 16MB years ago is its the smallesh large page on arm32 at the time
2020-12-25 08:08:27	mrvn	heat: 562885860000-562885885000 r-xp 00000000 00:19 39230                      /usr/bin/less
2020-12-25 08:08:29	geist	plus, and it's totally subjective, 0x0100_0000 is a nice round number
2020-12-25 08:08:33	heat	mrvn: that's pie
2020-12-25 08:08:37	mrvn	heat: nothing there in 2MB, 4MB or 128MB base.
2020-12-25 08:08:45	heat	compile something with -fno-pie
2020-12-25 08:08:48	mrvn	/usr/bin/less: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=6d0d4abd1777981660120e47aa351fed96bd3d46, stripped
2020-12-25 08:09:01	mrvn	heat: plain old dynamically links binary. Nothing PIE there.
2020-12-25 08:09:05	heat	shared object meaning pie
2020-12-25 08:09:28	heat	would say executable if it weren't
2020-12-25 08:09:31	mrvn	/usr/bin/bash: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=ffe165dc81a64aea2b05beda07aeda8ad71f1e7c, stripped
2020-12-25 08:09:37	mrvn	heat: that one is PIE
2020-12-25 08:10:03	mrvn	55a03ed28000-55a03ed55000 r--p 00000000 00:19 19584                      /usr/bin/bash
2020-12-25 08:10:04	heat	hmm? that's weird
2020-12-25 08:10:08	heat	how does the readelf look?
2020-12-25 08:10:12	heat	for less
2020-12-25 08:10:20	mrvn	heat: I think what you are seing is address space randomisation
2020-12-25 08:10:27	doug16k	it would be very interesting to run a memory bench on memory with physaddr below 2M and again with physaddr above 2M and below 4G, then again above 4G
2020-12-25 08:10:39	heat	there's only ASLR for the executable for PIE
2020-12-25 08:10:41	doug16k	on an intel machine that has the legacy MTRRs set up
2020-12-25 08:10:52	mrvn	heat: PIC too
2020-12-25 08:11:59	mrvn	readelf shows:
2020-12-25 08:11:59	mrvn	  [14] .text             PROGBITS         0000000000003e00  00003e00
2020-12-25 08:12:00	mrvn	       0000000000015eb2  0000000000000000  AX       0     0     16
2020-12-25 08:12:40	heat	yeah that's PIE
2020-12-25 08:12:42	mrvn	.rela.dyn .rela.plt .plt .plt.got sections
2020-12-25 08:13:22	heat	unless your toolchain is severely modified, the default base address for non pie is 4MB
2020-12-25 08:14:26	mrvn	Not sure why bash is shown as PIE but less as simple shared object.
2020-12-25 08:14:33	heat	(https://github.com/bminor/binutils-gdb/blob/master/ld/emulparams/elf32_x86_64.sh#L13 there it is)
2020-12-25 08:14:34	bslsk05	​github.com: binutils-gdb/elf32_x86_64.sh at master · bminor/binutils-gdb · GitHub
2020-12-25 08:14:57	heat	while for i386 it's 0x08048000
2020-12-25 08:15:08	heat	mrvn: file is weird like that
2020-12-25 08:16:16	phr3ak	are these virtual addresses not totally independent from phys addr? so why it cannot be lower than 2MB?
2020-12-25 08:17:06	heat	phr3ak: where can it not be lower than 2MB?
2020-12-25 08:17:12	mrvn	phr3ak: it can. but it should be 2MB aligned and you never want anything at 0.
2020-12-25 08:18:16	mrvn	phr3ak: you want nullptr access to fault because the page is not present.
2020-12-25 08:18:49	doug16k	sysv abi says this the legal range for small code model: 0x00000000 to 0x7effffff
2020-12-25 08:19:11	mrvn	0x7E?
2020-12-25 08:19:15	doug16k	in my kernel, vaddr below 4MB is denied
2020-12-25 08:19:36	doug16k	mrvn, 16MB safety margin
2020-12-25 08:19:49	mrvn	doug16k: why should the mcmodel define that?
2020-12-25 08:20:11	mrvn	The opcodes will cover the whole 2GB.
2020-12-25 08:20:13	doug16k	that is the only thing it really defines
2020-12-25 08:20:38	doug16k	that and how to do an addressing mode for a global variable
2020-12-25 08:24:18	doug16k	that's x86_64 abi
2020-12-25 08:24:23	doug16k	it's not the whole anything
2020-12-25 08:26:28	doug16k	kernel code model has the same funny 16MB safety margin thing: 0xffffffff80000000 to 0xffffffffff000000.
2020-12-25 08:26:45	superleaf1995	hmm
2020-12-25 08:27:27	doug16k	probably so a null pointer with a negative array index or pointer arithmetic on null will trap as nullptr exception with up to 16MB offset from null
2020-12-25 08:27:54	mrvn	doug16k: then it would be 16MB -> 0x7FFFFFFF
2020-12-25 08:28:33	doug16k	((char*)x)[-16777215] will be trapped
2020-12-25 08:28:48	doug16k	where x is nullptr
2020-12-25 08:28:56	mrvn	that works for kernel model but not user
2020-12-25 08:29:27	doug16k	base of high half - 16777215 bytes will trap. yeah it doesn't make hardly any sense in that scenario
2020-12-25 08:30:31	doug16k	just paranoid about pointer arithmetic around the kernel space I guess
2020-12-25 08:30:54	mrvn	doug16k: nullptr on x86_6 should be 0x8888_8888_8888_8888
2020-12-25 08:31:04	doug16k	what?
2020-12-25 08:31:29	doug16k	and make a mess of address calculations and pointer arithmetic though?
2020-12-25 08:31:55	doug16k	ah I see where you are going, just let them GP
2020-12-25 08:31:55	mrvn	doug16k: that C specs allow NULL/nullptr to be something other than the 0 bit pattern. It just has to be unique. And a non-canonical address would make the most sense on x86_64.
2020-12-25 08:32:30	doug16k	so char *x = 0 does a huge movabs instruction then
2020-12-25 08:32:35	mrvn	NULL + offset would remain non-canonical for any sane offset too.
2020-12-25 08:32:57	mrvn	doug16k: yeah. maybe pick an address that uses less code.
2020-12-25 08:33:33	doug16k	and fix it coercing a pointer to a bool?
2020-12-25 08:33:38	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-25 08:33:40	doug16k	then it would need to load huge constant and compare to that
2020-12-25 08:34:01	doug16k	and takes a register then
2020-12-25 08:34:46	doug16k	or just hit the dtlb/dcache and make it do load from .rodata
2020-12-25 08:35:12	doug16k	I say to hell with people that screw up nullptr
2020-12-25 08:35:28	doug16k	it's UB to work with it so we can be as fast as possible
2020-12-25 08:35:50	mrvn	doug16k: one problem is that lots of code initializes pointers in structs with memset/bzero and those won't be NULL then.
2020-12-25 08:36:01	doug16k	yeah that's a great point
2020-12-25 08:36:16	mrvn	technically that's UB but everybody does it.
2020-12-25 08:36:54	heat	isn't that only UB for C++ classes with non-trivial layouts?
2020-12-25 08:37:17	mrvn	heat: no. In c++ you shouldn't memset at all. Use the constructor.
2020-12-25 08:37:34	heat	you can though, for trivial layout classes
2020-12-25 08:37:36	doug16k	C++ has the concept of trivial types
2020-12-25 08:37:47	mrvn	heat: if you memset a pointer then it is UB
2020-12-25 08:38:06	heat	why?
2020-12-25 08:38:18	mrvn	heat: because NULL might not be the 0 bit pattern
2020-12-25 08:38:23	heat	only if nullptr isn't null
2020-12-25 08:38:30	heat	in which case, whyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
2020-12-25 08:38:30	mrvn	heat: which it might.
2020-12-25 08:38:31	doug16k	it's that weirdness where they tried to handle segments and far pointers
2020-12-25 08:38:46	heat	to hell with non-null null
2020-12-25 08:38:54	doug16k	the underlying architecture can use a bitreversed ones complement offset from 314159265
2020-12-25 08:38:54	mrvn	heat: UB doesn't mean it won't work (for you). Just that it might not always work.
2020-12-25 08:40:21	mrvn	heat: the benefix on x86_64 would be that any nullptr+offset would still GP. Not just really small offsets.
2020-12-25 08:40:21	heat	yes, but it's stupid that it's UB
2020-12-25 08:40:48	heat	then NULL isn't NULL and should just be INVPTR
2020-12-25 08:41:01	doug16k	mrvn, you can use a deliberately bad pointer. I chose my heap fill in debug build specifically to cause uninitialized pointer to GP
2020-12-25 08:41:03	mrvn	heat: NULL is (void*)0, which can be whatever you want.
2020-12-25 08:41:18	doug16k	0xf0f0f0f0f0f0f0f0 is noncanonical
2020-12-25 08:41:46	mrvn	doug16k: I pickes 0x8.. because it allows the largest offset and still GP.
2020-12-25 08:41:50	heat	also the issue with noncanonical addresses is that they may become canonical
2020-12-25 08:42:17	heat	page 0 is defined to fault
2020-12-25 08:42:20	doug16k	it's pretty far to get that digit after the first f to change by two
2020-12-25 08:42:28	doug16k	insanely far
2020-12-25 08:42:30	mrvn	heat: nope. nothing special about page 0
2020-12-25 08:42:30	heat	(unless you're system V)
2020-12-25 08:42:36	V	o/
2020-12-25 08:42:47	heat	defined by the environment
2020-12-25 08:43:12	mrvn	heat: and 0+65536 no longer faults.
2020-12-25 08:43:30	heat	*shrug*
2020-12-25 08:43:56	mrvn	doug16k: it's too bad there isn't a "is this cannonical" opcode
2020-12-25 08:43:58	heat	use a container
2020-12-25 08:44:10	heat	std::vector.at() works fine
2020-12-25 08:44:27	heat	and for C, well, fuck
2020-12-25 08:44:41	mrvn	On Alpha user space starts at 4GB so anyone using int to store pointers crashes and burns.
2020-12-25 08:44:59	superleaf1995	rip
2020-12-25 08:45:11	doug16k	nice
2020-12-25 08:45:14	doug16k	love it
2020-12-25 08:45:36	mrvn	it's kind of sad they didn't use that on x86_6.
2020-12-25 08:45:37	heat	on linux userspace mmaps start really high up so anyone using int to store pointers also crash and burn
2020-12-25 08:45:40	mrvn	+4
2020-12-25 08:45:48	doug16k	you can do that if you feel like it on x86. what is "sad"
2020-12-25 08:46:26	heat	if you restrict your system to only allow PIE you can do that without touching any user program
2020-12-25 08:46:45	mrvn	Using 0-4GB for userspace saves a bit of code to load absolute addresses.
2020-12-25 08:47:02	heat	(my hobby OS is almost entirely PIE and my distro has a *lot* of PIE, even default PIE)
2020-12-25 08:47:07	mrvn	but I bet that difference to PC relative addresses wouldn't be so big.
2020-12-25 08:47:15	doug16k	the only thing that is adversely affected is access to global variable arrays
2020-12-25 08:47:24	doug16k	they take one extra lea
2020-12-25 08:47:31	mrvn	doug16k: why? just PC relative them
2020-12-25 08:47:44	doug16k	can't have rip and an index register at once
2020-12-25 08:48:13	<--	heat (~heat@sortix/contributor/heat) has quit (Remote host closed the connection)
2020-12-25 08:48:22	doug16k	can't (%rip,%rcx,4)
2020-12-25 08:48:36	doug16k	er, can't `something(%rip,%rcx,4)`
2020-12-25 08:48:48	mrvn	well, ok. But array access usualy loads the address of the array into a register anyway.
2020-12-25 08:48:54	doug16k	have to lea something(%rip),reg  then (reg,%rcx,4)
2020-12-25 08:49:20	doug16k	right, the compiler even might have already been doing that
2020-12-25 08:49:58	doug16k	rip relative is actually 1 byte smaller than absolute
2020-12-25 08:50:15	doug16k	even if you don't compile pic you'll see codegen using it all the time, because it is better
2020-12-25 08:50:28	doug16k	AMD made rip relative the default, and used the crappy encoding for absolute
2020-12-25 08:50:58	doug16k	where "the crappy encoding" means an SIB mode with no registers, just offset
2020-12-25 08:51:51	mrvn	I wish one could make gcc use ONLY rip relative
2020-12-25 08:53:31	-->	gog (~ada@nova-046-182-189-142.nat.nova.is) has joined #osdev
2020-12-25 08:54:51	<--	vendu (~vendu@unaffiliated/vendu) has quit (Remote host closed the connection)
2020-12-25 09:03:09	<--	user24 (~user24@2a02:810a:1440:7304:1c53:699a:b2ba:4548) has quit (Quit: Leaving)
2020-12-25 09:05:22	doug16k	why is it you can't use relocations?
2020-12-25 09:06:15	doug16k	I forget if you mentioned why before
2020-12-25 09:06:58	doug16k	PC relative gets you most of the way there, and relocations handle silly initialized pointer data
2020-12-25 09:08:25	doug16k	or do you mean what I call "location independent" where you don't even really care what address the code was linked at
2020-12-25 09:08:37	mrvn	make pointers relative to the locations they are stored too
2020-12-25 09:08:58	mrvn	doug16k: yes, that's what I want
2020-12-25 09:09:16	klange	I'm still building my binaries for static addresses, but my libs are all PIE for dynamic loading.
2020-12-25 09:09:39	klange	Kernel modules I build as relocatable objects and the kernel just links them into itself.
2020-12-25 09:11:03	doug16k	my x86 SMP trampoline is like that. can link it wherever it lands and memcpy slap it at a 4KB boundary and it just works
2020-12-25 09:11:43	mrvn	klange: PIE still uses reloactions that your elf loader has to fix up
2020-12-25 09:12:52	<--	FreeFull (~freefull@defocus/sausage-lover) has quit (Read error: Connection reset by peer)
2020-12-25 09:12:53	klange	generally just an offset table you have to link
2020-12-25 09:13:16	klange	the code itself will use relative addressing to find that and pull stuff out of it to get the linked address of actual symbols
2020-12-25 09:13:43	klange	the point primarily being to minimize how much of the code needs to be modified in order to maximize how much of it can be directly shared between processes
2020-12-25 09:14:04	-->	mbomba (~mbomba@bras-base-toroon2719w-grc-53-142-114-5-26.dsl.bell.ca) has joined #osdev
2020-12-25 09:14:30	klange	not that I've actually done the sharing bit yet; I think I tried a few years ago to hack it in, but I still don't have a real mmap and I messed something up along the way and gave up halfway through and haven't revisited it
2020-12-25 09:15:34	doug16k	I sort of do the sharing bit - my kernel modules are shared libraries and they can depend on other one(s) and they can link to already loaded one
2020-12-25 09:15:39	mrvn	klange: I know all that. DOesn't help me write code that boot on any ARM no matter where the firmware loads the kernel though.
2020-12-25 09:15:55	doug16k	wait but not the put-at-different-address-in-each-process bit
2020-12-25 09:16:34	mrvn	doug16k: if you have trampolines then you are prepared for it
2020-12-25 09:16:39	klange	my kernel modules only exist in the kernel address space and I haven't done any of that fancy modern kernel address space isolation stuff, so kernel modules aren't shared, there's just one big linked-at-runtime static kernel binary
2020-12-25 09:16:49	doug16k	you should be able to mostly share the entire shared object and only really their GOT is private page
2020-12-25 09:17:03	mrvn	doug16k: the plt needs to be private
2020-12-25 09:17:04	doug16k	if they were dumb enough to have relocations, those pages that were touched too
2020-12-25 09:17:12	doug16k	no
2020-12-25 09:17:20	doug16k	plt isnt modified. you mean the gotplt right?
2020-12-25 09:17:23	doug16k	that is part of got
2020-12-25 09:17:42	doug16k	er pltgot? I always forget
2020-12-25 09:17:55	mrvn	not sure but I think plt. The trampoline that modifies itself on the fly the first time you call a symbol
2020-12-25 09:18:01	doug16k	initially the got points to the plt stubs
2020-12-25 09:19:25	klange	There's... a lot wrong with my ld.so
2020-12-25 09:19:33	doug16k	they push an integer indicating which pltgot slot it means, and push got[1] then jmp to got[0]
2020-12-25 09:20:02	doug16k	that code looks at stack and looks up the thing, sets got slot to point there (and not to plt stub anymore) and tail calls the implementation it just linked
2020-12-25 09:20:25	doug16k	so it changes the got to make it use plt less and less
2020-12-25 09:20:40	doug16k	well, that's if you have -fno-plt
2020-12-25 09:20:47	doug16k	you should have -fno-plt though
2020-12-25 09:20:52	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 246 seconds)
2020-12-25 09:20:56	doug16k	plt was a mistake
2020-12-25 09:21:00	-->	sortie (~sortie@D470948F.rev.sefiber.dk) has joined #osdev
2020-12-25 09:21:33	doug16k	you can call *something@GOT and modern branch predictor will do that as easily and efficiently as a plain call (by the time it handles the BTB miss)
2020-12-25 09:21:55	doug16k	plain call BTB misses too!
2020-12-25 09:22:01	doug16k	what the hell is the point?!
2020-12-25 09:22:03	mrvn	doug16k: I'm talking about boot code. I realy don't care one bit about speed.
2020-12-25 09:22:38	klange	I think I missed the beginning of this conversation, so let me catch up...
2020-12-25 09:23:23	mrvn	klange: not sure what you call begining. We jumped around a lot.
2020-12-25 09:23:48	doug16k	plt and got never self modify any code
2020-12-25 09:24:07	doug16k	they are changing function pointers in got[N] to point to real implementation instead of link-first-time stub
2020-12-25 09:25:24	doug16k	so for example, at first the function pointer at fprintf@GOT would point to the plt stub. first call it would call the stub, that would do the things to find fprintf and update that got entry. next time it will just indirect call to the actual fprintf
2020-12-25 09:26:44	doug16k	assuming they highly optimized it. if not then they do tail call because caller already "called" plt if they are using plt
2020-12-25 09:26:59	doug16k	the plt is optional. it's just there so you can call fprintf the old fashioned way and it just works
2020-12-25 09:27:10	doug16k	you really should call fprintf@GOT in practice nowadays
2020-12-25 09:27:15	doug16k	er, call *....
2020-12-25 09:27:39	doug16k	skip the middleman
2020-12-25 09:27:56	-->	diwyjukjt5 (~vsgKJHgJ~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-25 09:28:20	<--	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has quit (Quit: remby)
2020-12-25 09:30:15	doug16k	originally the thinking was it would be all starved for indirect predictor resources. in reality, on reasonable age architecture, the first call will BTB miss and resolving it to the first value will make it just as lightweight as a regular call. only when that same instruction resolves to another address does it upgrade it to the expensive predict-which-one-next indirect predictor
2020-12-25 09:31:10	<--	mbomba (~mbomba@bras-base-toroon2719w-grc-53-142-114-5-26.dsl.bell.ca) has quit (Quit: WeeChat 3.0)
2020-12-25 09:31:55	mrvn	doug16k: not every arch can call *mem
2020-12-25 09:32:51	doug16k	yes what Im saying is pretty x86_64 specific
2020-12-25 09:33:18	mrvn	for most code I really don't mind mcmodel=small.
2020-12-25 09:33:28	mrvn	If not even all code.
2020-12-25 09:33:45	mrvn	Other than ASLR is there any reason to use the large model?
2020-12-25 09:34:05	doug16k	never need for large
2020-12-25 09:34:12	doug16k	it doesn't even really fully work
2020-12-25 09:34:21	mrvn	doug16k: it's the default.
2020-12-25 09:34:33	doug16k	no it isn't
2020-12-25 09:34:38	mrvn	well, depends on arch
2020-12-25 09:34:44	doug16k	oh I mean x86_64
2020-12-25 09:35:06	doug16k	large means you have over 2GB of code
2020-12-25 09:35:11	doug16k	that never happens
2020-12-25 09:35:33	klange	2GB ought to be good enough for anybody
2020-12-25 09:35:36	mrvn	or data
2020-12-25 09:35:38	doug16k	medium maybe
2020-12-25 09:35:55	mrvn	I think on arm small is only 21 bits
2020-12-25 09:36:38	doug16k	medium means you could have some code written by a scientist that declares as a global variable: double samples[100000000000];
2020-12-25 09:36:46	mrvn	or is there a tiny?
2020-12-25 09:37:17	doug16k	but scientists can't use large model and generate a 9000000000 line C file and run that
2020-12-25 09:38:38	mrvn	doug16k: I've seen source files like that. Only way to get whole programm optimization of your fortran->C cross-compiled programm.
2020-12-25 09:38:50	mrvn	(pre LTO and all)
2020-12-25 09:39:15	mrvn	hell, I've seen programms that only had a main function
2020-12-25 09:39:34	moon-child	http://number-none.com/blow/john_carmack_on_inlined_code.html  relevant
2020-12-25 09:39:34	bslsk05	​number-none.com: Jonathan Blow's home page
2020-12-25 09:43:29	doug16k	did everyone compute the decimal representation of the latest mersenne prime in their python? 2**282589933-1
2020-12-25 09:43:40	doug16k	it's tens of minutes
2020-12-25 09:43:50	klange	I'll let it go in the background.
2020-12-25 09:44:16	doug16k	oops
2020-12-25 09:44:22	doug16k	2**82589933-1
2020-12-25 09:44:32	doug16k	the typo probably takes years
2020-12-25 09:44:40	mrvn	mrvn@ryzen:~$ time calc 2**282589933-1
2020-12-25 09:44:58	doug16k	oh calc might kick pythons ass
2020-12-25 09:45:00	mrvn	ok, again without the typo
2020-12-25 09:45:15	mrvn	30911 mrvn      20   0   73936  61176   1504 R 100.0   0.1   0:18.06 calc
2020-12-25 09:45:23	mrvn	it's isn't multicore. too bad.
2020-12-25 09:46:11	doug16k	ya this is binary-to-decimal of 82.5 million binary "1" bits, all 1 bits
2020-12-25 09:46:13	mrvn	Lets compare the two: mrvn@ryzen:~$ time python -c "print(2**82589933-1)"
2020-12-25 09:48:01	mrvn	How would you do that? Div/mod the number by 10 till you hit 0 and then reverse? Or compute 10^x < n and subtract to get the first digit?
2020-12-25 09:49:23	doug16k	my guess is, it probably does a giant multiword integer and makes 1 << 82589933, then the -1 with multiword subtract, then do the conversion to decimal with crazy ass modulus of 10 over and over
2020-12-25 09:49:44	doug16k	into a stack
2020-12-25 09:49:48	<--	dormito (~dormito@cpe-24-243-3-252.satx.res.rr.com) has quit (Ping timeout: 256 seconds)
2020-12-25 09:49:53	doug16k	then stack has answer at end
2020-12-25 09:50:02	doug16k	assuming push-down stack
2020-12-25 09:50:39	moon-child	wonder if it has a special case for 2**n - 1, so it can just memset(..0xff..) instead of having to do the subtraction by hand
2020-12-25 09:50:44	doug16k	because that would be the utterly generalized way
2020-12-25 09:50:45	mrvn	That's my guess too. Long division by 10 is actually quite simple to do.
2020-12-25 09:51:07	<--	sortie (~sortie@D470948F.rev.sefiber.dk) has quit (Quit: Leaving)
2020-12-25 09:51:07	mrvn	moon-child: that subtraction is not going to cost any noticable time.
2020-12-25 09:51:47	mrvn	moon-child: better question is: Does it have a special case for 2**x?
2020-12-25 09:52:01	doug16k	yeah divide isn't bad when you loop across it in multiword version of it by hand
2020-12-25 09:52:21	moon-child	eh I mean, it's gonna carry every single time
2020-12-25 09:52:45	mrvn	moon-child: that loops over the number one time and is done.
2020-12-25 09:53:11	mrvn	moon-child: converting to decimal does 25 million loops.
2020-12-25 09:53:20	doug16k	it'll be so fast that it will probably run into store bandwidth limitation due to miss of tlb or cache, then it will be far ahead speculatively and run as fast as it possibly could from then on
2020-12-25 09:53:31	moon-child	mrvn: fair enough
2020-12-25 09:53:42	moon-child	doug16k: the whole number is only 10k.  Gonna stay in cache
2020-12-25 09:54:00	mrvn	moon-child: 10M
2020-12-25 09:54:05	doug16k	it's 82.5 million bits wide
2020-12-25 09:54:19	doug16k	if you don't round
2020-12-25 09:54:48	klange	ｗｉｄｅ
2020-12-25 09:54:50	mrvn	Makes me wonder if the number is stored big or little endian.
2020-12-25 09:55:14	moon-child	doug16k: ?
2020-12-25 09:55:15	mrvn	+, -, * worke better with little endian but / is better with big endian.
2020-12-25 09:55:28	moon-child	2^82589933  needs 82589933 bits.  82589933/8 is ~10k
2020-12-25 09:55:36	moon-child	(actually one more bit)
2020-12-25 09:55:41	mrvn	moon-child: M, not k
2020-12-25 09:55:42	doug16k	2**82589933-1 is 82589933 "1" bits in a row, none of them are 0
2020-12-25 09:55:59	moon-child	oh, duh.  facepalm
2020-12-25 09:56:43	doug16k	I bet tons of programmers heard about mersenne primes long ago and didn't clue in on that bit
2020-12-25 09:56:48	Kazinsal	The clever thing would for calc to recognize what you're doing and just allocate a bigint that's 82589933 bits wide and fill it with ones ;)
2020-12-25 09:56:50	mrvn	>10minutes, apcalc and python are still running
2020-12-25 09:56:51	<--	Sheilong (uid293653@gateway/web/irccloud.com/x-dkfzyfmbutdgutbh) has quit (Quit: Connection closed for inactivity)
2020-12-25 09:57:00	doug16k	I didn't clue in until relatively recently
2020-12-25 09:59:38	mrvn	doug16k: do you know Golomb rulers? https://en.wikipedia.org/wiki/Golomb_ruler
2020-12-25 09:59:38	bslsk05	​en.wikipedia.org: Golomb ruler - Wikipedia
2020-12-25 10:01:01	doug16k	the result of that calculation in decimal is 22,338,619 bytes
2020-12-25 10:01:25	doug16k	or digits
2020-12-25 10:02:51	mrvn	I make that 24862047 bytes.
2020-12-25 10:02:58	mrvn	; 82589933*log(2)/log(10) ~24862047.17287849742604020807
2020-12-25 10:03:38	doug16k	you should see how stupid "less" is when there is one line that long
2020-12-25 10:03:50	doug16k	press end, wait forever
2020-12-25 10:04:58	mrvn	20 minutes and still going strong.
2020-12-25 10:06:35	mrvn	calc is outputing, 21:38.13
2020-12-25 10:06:52	mrvn	takes a while to output. Seems to do it in chunks.
2020-12-25 10:08:22	mrvn	long pause, some more output, less pause, more output. Is it using some divide&conquer algorithm?
2020-12-25 10:08:27	doug16k	yeah it is 24820471 https://www.wolframalpha.com/input/?i=log%282**82589933-1%29%2Flog%2810%29
2020-12-25 10:08:28	bslsk05	​www.wolframalpha.com: log(2**82589933-1)/log(10) - Wolfram|Alpha
2020-12-25 10:09:49	mrvn	now calc seems to be stuck again.
2020-12-25 10:10:43	doug16k	wonder how my python -c 'print 2**82589933-1' ... > largest_prime got a different sized file
2020-12-25 10:11:04	mrvn	I should have redirected into files so I could compare calc and python output.
2020-12-25 10:11:22	doug16k	yeah
2020-12-25 10:12:28	mrvn	We should make a BCD calculator in C and let it compute the prime too.
2020-12-25 10:12:37	<--	Tazmainian (~Tazmain@unaffiliated/tazmain) has quit (Read error: Connection reset by peer)
2020-12-25 10:12:52	mrvn	or base 10^x muti-word integers
2020-12-25 10:12:57	doug16k	yeah would be fun to see if the most straightforward C code would trounce the python thing
2020-12-25 10:13:15	mrvn	if python using gmp?
2020-12-25 10:13:47	doug16k	the multi-word thing python does automatically is really cool, I must say
2020-12-25 10:13:55	doug16k	don't know
2020-12-25 10:14:28	doug16k	you can hit it with the craziest integer you can come up with and it says "is that it?"
2020-12-25 10:14:50	mrvn	doug16k: 2****10 and watch it die
2020-12-25 10:15:15	-->	dormito (~dormito@cpe-24-243-3-252.satx.res.rr.com) has joined #osdev
2020-12-25 10:15:44	mrvn	30 minutes and still going
2020-12-25 10:16:04	doug16k	yeah, how about 2 ↑ graham's number ↑ (2**82589933)
2020-12-25 10:16:32	doug16k	we're lucky that sentence didn't collapse this galaxy into a black hole, really
2020-12-25 10:16:49	mrvn	not enough matter in that to represent that number
2020-12-25 10:17:24	mrvn	I'm really surprised that calc did output a bit of the number and then went back to computing.
2020-12-25 10:17:34	doug16k	neat!
2020-12-25 10:19:04	doug16k	I couldn't tell how python did it, was redirected
2020-12-25 10:19:34	mrvn	doug16k: I do printf(...) so it will create a big string and then dump that I guess.
2020-12-25 10:19:38	mrvn	-f
2020-12-25 10:20:12	doug16k	yeah probably bigint-to-string implicit conversion there eh?
2020-12-25 10:20:33	mrvn	some more output in calc
2020-12-25 10:22:53	mrvn	It probably makes sense to first div/mod the number by 10^16777216. Then div/mod each by 10^8388608 and so on till you get to something like 1024 digits.
2020-12-25 10:23:34	doug16k	yeah
2020-12-25 10:24:59	mrvn	40 minutes and still going
2020-12-25 10:25:16	mrvn	How long did it take for you?
2020-12-25 10:26:49	mrvn	And apcalc won the race: user	41m35.721s
2020-12-25 10:27:31	mrvn	...14355308311969487633766457823695074037951210325217902591  does that match?
2020-12-25 10:28:20	doug16k	I must have screwed up the exponent lol
2020-12-25 10:28:25	doug16k	that's why wrong number of digits too
2020-12-25 10:29:19	doug16k	let me rerun it
2020-12-25 10:29:29	<--	doug16k (~dougx@198-91-149-79.cpe.distributel.net) has quit (Remote host closed the connection)
2020-12-25 10:31:32	-->	doug16k (~dougx@198-91-149-79.cpe.distributel.net) has joined #osdev
2020-12-25 10:35:55	doug16k	peeked in perf top, but no python2.7 symbols
2020-12-25 10:36:31	doug16k	thought maybe I'd see gmp something
2020-12-25 10:43:54	doug16k	mrvn, your python didn't finish yet then?
2020-12-25 10:44:40	doug16k	it's so single threaded eh? could go so much faster
2020-12-25 10:45:23	doug16k	idk maybe a bit too sequential dependency eh
2020-12-25 10:45:53	doug16k	the conversion to string could become parallel like you mentioned
2020-12-25 10:46:32	mrvn	60 minutes and still going
2020-12-25 10:47:10	mrvn	doug16k: if you split by 10^16777216 you can distribute it to multiple threads.
2020-12-25 11:00:32	<--	isaacwoods (~isaacwood@host109-146-213-228.range109-146.btcentralplus.com) has quit (Quit: WeeChat 2.9)
2020-12-25 11:08:26	doug16k	I think it was something like 1h27m or so on my machine now
2020-12-25 11:08:52	doug16k	3950x
2020-12-25 11:09:06	doug16k	in python
2020-12-25 11:11:35	mrvn	lets see if we can do better with some simple c: https://gist.github.com/mrvn/e1c47aa98c532196842664265c57349c
2020-12-25 11:11:35	bslsk05	​gist.github.com: mersenne.cc · GitHub
2020-12-25 11:11:37	doug16k	who would have thought that converting to decimal was so hard
2020-12-25 11:11:58	mrvn	it's c++ so I can use const uint32 as array size. Stupid C.
2020-12-25 11:13:03	<--	diwyjukjt5 (~vsgKJHgJ~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-25 11:15:38	mrvn	Could probably be more efficient to use blocks of 28 bits so the long division can use 32bit / 32bit = 32bit. Or 60bit blocks to use all of the 64bit / 32bit = 64bit.
2020-12-25 11:16:16	mrvn	90 minute for python and counting
2020-12-25 11:20:39	mrvn	doug16k: do you see anything else to improve the simple C code?
2020-12-25 11:27:38	geist	so to sum up what you both have been doing: running long arbitrary precision math calculations?
2020-12-25 11:27:47	geist	apcalc i guess stands for arbitrary precision?
2020-12-25 11:27:50	mrvn	 // print 2**82589933-1
2020-12-25 11:28:07	mrvn	geist: apcalc is the debian package providing the calc binary.
2020-12-25 11:28:17	geist	written in C/C++?
2020-12-25 11:28:23	mrvn	yeah
2020-12-25 11:28:32	mrvn	one could probably also try bc
2020-12-25 11:28:35	geist	huh. does it use a standard lib or is it bespoke for that app?
2020-12-25 11:28:47	mrvn	geist: doesn#t link against anything interesting
2020-12-25 11:29:05	geist	i immediately thing of AP calculus, and what's teh google also does
2020-12-25 11:29:09	mrvn	libtinfo.so.6? That isn't a math library, right?
2020-12-25 11:29:14	geist	kinda hard to filter it out
2020-12-25 11:29:34	mrvn	            www.isthe.com/chongo/tech/comp/calc/
2020-12-25 11:29:36	bslsk05	​www.isthe.com: Calc - C-style arbitrary precision calculator
2020-12-25 11:29:45	geist	neat
2020-12-25 11:30:05	geist	not something that comes up, but would be nice to have a good arb prec calculator handy sometimes
2020-12-25 11:30:08	mrvn	I normaly use that as my calculator because you can set "base(16)" and get nice hex output.
2020-12-25 11:30:47	mrvn	Or type in 0x1356afe and get decimal.
2020-12-25 11:31:05	geist	yah that reminds me, i sitll have a copy of a neat little calculator app written like 25 years ago that we had at Be
2020-12-25 11:31:16	geist	i should see if i can find the original author, far as i know it's not published anywhere
2020-12-25 11:31:26	geist	pc - programmers calculator
2020-12-25 11:31:30	geist	i keep a binary of it in ~/bin
2020-12-25 11:32:00	geist	it basically does C syntax math but also prints in hex and decimal and also lets you set variables and whatnot
2020-12-25 11:32:25	geist	and ASCII constants too, like 'FOOB'
2020-12-25 11:34:12	klange	> libtinfo.so.6
2020-12-25 11:34:16	klange	That's terminfo.
2020-12-25 11:35:06	doug16k	geist, funny you mention that, I wanted exactly that earlier today and used #geordi as close enough approximation
2020-12-25 11:35:24	-->	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has joined #osdev
2020-12-25 11:35:31	geist	yah i'll ask around and see if i can find the original author
2020-12-25 11:36:19	mrvn	gist updated. I'm dividing by 1_000_000_000 now in each step and convert the remainder into 9 digits.
2020-12-25 11:36:53	mrvn	110 minutes for python now.
2020-12-25 11:37:05	geist	ah okay, it doesn't have a copyright, but it has the author
2020-12-25 11:37:11	doug16k	could go 64 bit at a time
2020-12-25 11:37:43	mrvn	doug16k: the remainder + next "digit" has to fit in an uint64_t.
2020-12-25 11:37:45	doug16k	should be less time per bit than 32
2020-12-25 11:37:55	doug16k	ok
2020-12-25 11:38:29	geist	ah it's what i thought, written by dbg
2020-12-25 11:38:40	geist	same guy that designed bfs, spotlight, and now APFS
2020-12-25 11:39:02	mrvn	Would __uint128_t be faster?
2020-12-25 11:39:15	doug16k	it's fast
2020-12-25 11:39:25	doug16k	it does what a human assembly programmer would do, or better
2020-12-25 11:39:43	doug16k	uses adc etc
2020-12-25 11:39:49	doug16k	shrd
2020-12-25 11:40:14	doug16k	if you do a 64 bit divide then cast that to 128 and do stuff it will do it as fast as hand coded multiword code
2020-12-25 11:40:16	mrvn	if it has to emulate 128bit / 128 bit = 128bit + 128bit (reminder) then it isn't worth it.
2020-12-25 11:40:35	doug16k	no 128 bit / whatever divide will kill it
2020-12-25 11:40:53	doug16k	even though technically it could do 128 / 64, the language doesn't
2020-12-25 11:41:15	mrvn	the divisor is a constant so clang might grock that.
2020-12-25 11:41:35	mrvn	does it give 128bit result + 64bit reminder?
2020-12-25 11:41:53	doug16k	does what give
2020-12-25 11:42:06	mrvn	the 128/64 asm opcode
2020-12-25 11:42:19	doug16k	it gives 64 bit quotient, 64 bit remainder
2020-12-25 11:42:32	doug16k	if it won't fit in 64 bit quotient, then divide error
2020-12-25 11:43:15	doug16k	quotient in rax, remainder in rdx, but you probably already guessed that much
2020-12-25 11:44:52	mrvn	python: real	118m44.239s
2020-12-25 11:45:47	-->	tjowers (c7bc5729@199.188.87.41) has joined #osdev
2020-12-25 11:46:38	doug16k	what cpu?
2020-12-25 11:46:47	-->	diwyju (~mGIfJYQX~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-25 11:47:00	mrvn	AMD Ryzen 5 2400G with Radeon Vega Graphics
2020-12-25 11:47:40	<--	diwyju (~mGIfJYQX~@gateway/tor-sasl/spareproject) has quit (Remote host closed the connection)
2020-12-25 11:47:46	doug16k	which python version?
2020-12-25 11:48:22	mrvn	2.7.16
2020-12-25 11:48:37	mrvn	what flags do I need for gcc for the 128/64 opcode?
2020-12-25 11:49:18	doug16k	the language says that 128 / 64 divide must truncate
2020-12-25 11:49:25	doug16k	intel throws a divide error
2020-12-25 11:49:33	doug16k	therefore it can't really do it
2020-12-25 11:49:41	doug16k	you have to force it with asm or something
2020-12-25 11:50:21	doug16k	A means rdx:rax in constraints
2020-12-25 11:50:32	tjowers	This from yesterday https://godbolt.org/z/cd7Ysq -- shared coroutines among threads; imagine threads write to the stacks of these shared coroutines
2020-12-25 11:50:33	bslsk05	​godbolt.org: Compiler Explorer
2020-12-25 11:52:20	doug16k	tjowers, why?
2020-12-25 11:52:38	doug16k	you don't need to do anything crazy like that to do coroutines
2020-12-25 11:53:58	doug16k	can be totally normal code
2020-12-25 11:54:22	mrvn	tjowers: you need to use + for in/out vraibles. Your "inc" can get the input in %rax and the outout in %rdx and then it fails.
2020-12-25 11:54:26	<--	gog (~ada@nova-046-182-189-142.nat.nova.is) has quit (Ping timeout: 272 seconds)
2020-12-25 11:54:27	klange	AH
2020-12-25 11:54:31	klange	finally
2020-12-25 11:54:40	klange	I figured out this damn editor crash
2020-12-25 11:55:05	mrvn	doug16k: https://godbolt.org/z/eMT6PP   doesn't look nice with uint128
2020-12-25 11:55:06	bslsk05	​godbolt.org: Compiler Explorer
2020-12-25 11:55:07	tjowers	Say the workload is CPU bound -- I think most loads will be soon, ie io_uring(2), more later -- a thread decides to try to see if it can offload some of it's work, it tries a lock on a shared coroutine, if it acquires the lock it writes an input-vector to it , and a destination buffer -- let's really slow down right here I think this is gold -- it
2020-12-25 11:55:08	tjowers	does it's work and spins on the buffer for data
2020-12-25 11:55:11	klange	Something I had experienced multiple times but I couldn't pin down exactly what I was doing to trigger it so I couldn't reproduce it; finally figured it out
2020-12-25 11:55:34	doug16k	tjowers, lock? there are no locks with a coroutine based thing
2020-12-25 11:55:50	doug16k	just don't be dumb enough to switch to another task while holding a lock. solved
2020-12-25 11:56:04	mrvn	doug16k: he is mixing up multithreading workpools and coroutines
2020-12-25 11:56:06	doug16k	then lock becomes redundant and disappears
2020-12-25 11:56:17	tjowers	Are you certain?
2020-12-25 11:56:24	klange	enter character selection on empty line → attempt to delete selection → leads to corruption and later actions, like trying to delete a line selection, crashing with a bad buffer pointer
2020-12-25 11:56:59	doug16k	tjowers, are you trying to solve something and applying this pattern because it is a known-to-be-usually-good solution for that?
2020-12-25 11:57:09	tjowers	The main difference is that no queuing happens -- threads -- instead of yielding to the scheduler -- switch to running the coroutines when they are idle
2020-12-25 11:57:32	tjowers	Or blocking
2020-12-25 11:57:39	doug16k	you use coroutines instead of threads
2020-12-25 11:57:44	mrvn	tjowers: coroutines don't run unless the other routine yields to them. There is never ever a coroutine waiting to run.
2020-12-25 11:58:25	doug16k	nobody is saying that you can't run more than one thread that is using coroutines, but they dont' all content with one another like threads, what would be the point of adding that mess on top of existing locking problems?
2020-12-25 11:58:37	doug16k	contend with one another*
2020-12-25 11:58:57	doug16k	coroutines make sense when you have to wait a lot
2020-12-25 11:59:03	tjowers	Ok so instead of looking at as a coroutine I think what I mean is a userspace system call table; but I'm thinking it would be implemented simliar to coroutines
2020-12-25 11:59:08	tjowers	A shared coroutine
2020-12-25 11:59:11	doug16k	every hundred microseconds you have to wait, yet again
2020-12-25 11:59:27	mrvn	The only use for mixing coroutines and threads and queueing I can see would be to implement a N:M threading model.
2020-12-25 11:59:31	doug16k	interleaving a ton of asynchronous stuff comes to mind
2020-12-25 12:01:06	doug16k	coroutines are for when you keep running into "oh I can't continue, yet" and want to be able to switch among those overlapping operations more efficiently than threads
2020-12-25 12:01:34	doug16k	when you can continue the code naturally continues where it left off - that was simply a function call
2020-12-25 12:02:07	doug16k	it can maintain the "state" for some async operation as simply as a bunch of local variables in one function
2020-12-25 12:02:18	tjowers	The use is when threads share similar workloads, they can attempt offload work to another thread by writing to a memory region a input-vector, they can go about doing their specific tasks, then check the output buffer, if it's empty they check the lock for a coroutine, to see if another is already working on it; otherwise they run the coroutine
2020-12-25 12:02:19	tjowers	themselves
2020-12-25 12:02:19	doug16k	it just keeps stopping in the middle and continuing where it left off
2020-12-25 12:03:02	tjowers	No stop! I don't like thinking in terms of what they are typically used for!
2020-12-25 12:03:25	tjowers	I like to think of what they could do
2020-12-25 12:03:30	mrvn	tjowers: That's called a worker pool and has nothing to do with coroutines.
2020-12-25 12:03:50	tjowers	Am I so off here? Because I don't see that
2020-12-25 12:03:59	mrvn	tjowers: and you don't make it check for the coroutine to be running/finished. You make the coroutine call the remaining code at the end itself.
2020-12-25 12:05:13	tjowers	Ok visualize this for me
2020-12-25 12:05:19	tjowers	Will you?
2020-12-25 12:05:28	tjowers	My taxonomy is probably off
2020-12-25 12:08:47	tjowers	The linker loads the program -- mapping each of the segments; function symbols representing a thread's execution path mixed in; each thread can jump to the other defined functions, but typically they each have their own isolated graph -- imagine with disbelief in suspension; that there is one mecca function block; it burns red hot  --
2020-12-25 12:08:48	tjowers	caddy-cornered with the execution of individual threads
2020-12-25 12:09:44	-->	Goplat (~Goplat@reactos/developer/Goplat) has joined #osdev
2020-12-25 12:10:35	tjowers	The branches for IO; the mecca for processing
2020-12-25 12:11:08	doug16k	lost me at mecca
2020-12-25 12:11:10	mrvn	and now you are describing something completly different
2020-12-25 12:11:25	tjowers	Ok but what am I describing?
2020-12-25 12:11:30	mrvn	doug16k: all threads travel to mecca.
2020-12-25 12:11:36	CrystalMath	so is there a BIOS way to get the bytes per sector of a drive?
2020-12-25 12:11:52	doug16k	CrystalMath, yes
2020-12-25 12:12:03	mrvn	CrystalMath: doubtfull. If it thes boot drive then its 512. otherwise it's a SATA command.
2020-12-25 12:12:14	CrystalMath	INT 13h AH = 08h does not reveal it
2020-12-25 12:12:17	doug16k	https://github.com/doug65536/dgos/blob/master/boot/diskio.cc#L35
2020-12-25 12:12:19	bslsk05	​github.com: dgos/diskio.cc at master · doug65536/dgos · GitHub
2020-12-25 12:12:20	CrystalMath	the diskette parameter table does
2020-12-25 12:12:36	CrystalMath	ah, extended
2020-12-25 12:12:44	CrystalMath	but those might not be present all the time
2020-12-25 12:12:49	doug16k	it will
2020-12-25 12:13:02	CrystalMath	what if you want to support early 80s computers?
2020-12-25 12:13:03	doug16k	how old are these museum computers? under 50MHz or over
2020-12-25 12:13:15	CrystalMath	ummm... 8086 @ ~1 MHz
2020-12-25 12:13:25	CrystalMath	way under 50 MHz
2020-12-25 12:13:31	doug16k	so you are in CHS era
2020-12-25 12:13:39	doug16k	sorry my code doesn't care about CHS
2020-12-25 12:13:39	CrystalMath	50 MHz is like superturbo thunder speed
2020-12-25 12:14:33	doug16k	a 486 would have 0x4800
2020-12-25 12:15:41	doug16k	if you mean some autoconfiguring MFM controller, no that won't work
2020-12-25 12:15:52	tjowers	I suppose a main thread dispatching work in a control loop, with a thread pool; that's very similar -- I'm still trying to make this up -- but imagine the opposite, that you have threads weaving in and out of a control loop -- but control loop isn't the correct way to see it in this concept
2020-12-25 12:16:21	CrystalMath	doug16k: i do test for the int 13h extensions, and if they're present, they're used
2020-12-25 12:16:25	CrystalMath	otherwise i do CHS
2020-12-25 12:16:56	CrystalMath	but i'm not sure about the bytes per sector...
2020-12-25 12:17:00	doug16k	I had a PC XT with MFM and an 80286, genuine IBM ones
2020-12-25 12:17:09	CrystalMath	right now, i use the FAT bytes per sector field
2020-12-25 12:17:14	CrystalMath	but who knows if that is correct
2020-12-25 12:17:30	doug16k	IBM == slow as hell, more stable than you can even imagine
2020-12-25 12:17:53	mrvn	tjowers: that's just worker threads. Nowhere would one thread call another there.
2020-12-25 12:18:12	tjowers	Speaking of interrupt -- a userspace system call table; except instead of jumping to the table, each thread writes to the stack of the table the data it had from IO, for processing
2020-12-25 12:18:22	mrvn	tjowers: it's all a big star with the control loop in the middle and no other connections.
2020-12-25 12:19:32	tjowers	And instead of yielding to the scheduler it yields to the "interrupt" table, reads the stack, does the work, writes to the buffer pointed to, then goes back to it's IO
2020-12-25 12:19:56	tjowers	Yeah I think maybe worker pools might be implemented like that or similarly
2020-12-25 12:20:25	CrystalMath	doug16k: i'll just use the FAT value
2020-12-25 12:20:32	tjowers	Either I'm on to something or I reverse engineered like a boss
2020-12-25 12:20:33	CrystalMath	que sera, sera
2020-12-25 12:21:35	tjowers	Give me anything -- and let me ask my questions; I will reverse engineer it
2020-12-25 12:22:26	tjowers	Feed me
2020-12-25 12:23:18	tjowers	I've so got a hunch that shared coroutines would be amazing
2020-12-25 12:23:59	doug16k	using threads with coroutines at same time can actually cause major problems
2020-12-25 12:24:39	doug16k	if the threading system is not fully aware of the coroutines, then you could end up in a situation where you did switch to another coroutine while holding a lock, and it looks like you are just reentering the lock and you deadlock against yourself
2020-12-25 12:24:51	doug16k	because it is the same thread trying to acquire it again
2020-12-25 12:25:01	doug16k	could become big mess from that
2020-12-25 12:25:20	doug16k	ten digit long number of states
2020-12-25 12:26:40	geist	yah sounds like basicaly the entire guts of Go
2020-12-25 12:26:46	doug16k	hard to do it where the code is on the same screen. not so hard to know that things you call and everything they call are going to do the things right
2020-12-25 12:26:50	geist	(may have been mentioned before, but i aint reading this whole backlog)
2020-12-25 12:27:34	tjowers	You would design the address scheme to be base plus offset -- with the base being on the stack -- so each context sees a different table of locks
2020-12-25 12:28:06	tjowers	Literally, like systemcalls
2020-12-25 12:28:24	doug16k	no table of locks anywhere in my system calls
2020-12-25 12:29:13	doug16k	practically every system call is totally expecting tons of concurrent calls
2020-12-25 12:29:19	doug16k	bring it on
2020-12-25 12:29:23	tjowers	But you write data to the system call's stack and the system call gives you your data or you jump to the system call table and run the system calls -- worst case each thread ends up doing it's own workload
2020-12-25 12:29:49	tjowers	How do you do no locks?
2020-12-25 12:30:03	<--	zaquest (~notzaques@5.128.210.178) has quit (Quit: Leaving)
2020-12-25 12:30:10	doug16k	I do locks only if and where needed
2020-12-25 12:30:31	doug16k	not every system call is going to lock things
2020-12-25 12:30:42	mrvn	tjowers: a system call is not a coroutine.
2020-12-25 12:30:58	doug16k	and if they did, what makes you think the next call didn't need to lock a different thing that could proceed concurrently
2020-12-25 12:31:03	mrvn	tjowers: a system call has no state that it keeps from one call to the next.
2020-12-25 12:31:37	tjowers	Typically
2020-12-25 12:32:07	mrvn	tjowers: can't think of a single one that would.
2020-12-25 12:32:36	tjowers	Is there a fundamental reason for this or is it just authoritative tradition and the originators don't want people in their gardens
2020-12-25 12:32:49	dh`	oh ffs
2020-12-25 12:32:52	tjowers	So I'll call it a shared coroutine table
2020-12-25 12:33:02	-->	zaquest (~notzaques@5.128.210.178) has joined #osdev
2020-12-25 12:33:29	doug16k	there have been (are?) kernels with a "big kernel lock" (worst case) all the way down to fine grained kernels (lots of different locks that try not to content with other concurrent things)
2020-12-25 12:33:34	dh`	I suppose you'd call me one of those gardeners, eh/
2020-12-25 12:35:31	mrvn	tjowers: name one syscall that would benefit from saving state between calls.
2020-12-25 12:35:53	dh`	well to be fair, it would be nice to be able to make atomic transactions out of multiple system calls
2020-12-25 12:35:58	doug16k	my kernel tries to let all the different cpus proceed concurrently when possible, and tries to make data that are modified much have a dedicated separate copy for each cpu
2020-12-25 12:36:09	dh`	but i don't think that's what's being talked about based on the last screenful or two
2020-12-25 12:36:27	mrvn	dh`: not at all
2020-12-25 12:36:47	dh`	I've also heard reasonable proposals for message-based system calls
2020-12-25 12:36:52	tjowers	That's genius
2020-12-25 12:36:56	doug16k	you can't just go nuts all over the data when designing concurrent algorithm
2020-12-25 12:37:05	dh`	but I don't think that's the proposal at hand either
2020-12-25 12:37:10	doug16k	the memory is going to be the key thing that makes it good or not
2020-12-25 12:37:22	mrvn	dh`: how would that work? You start a transaction and then all syscalls register their locks with the transaction and only when you finalize the transaction the locks can be released?
2020-12-25 12:37:30	dh`	mrvn: yeah
2020-12-25 12:37:39	dh`	or sometihng like that
2020-12-25 12:37:58	dh`	and you'd need timeouts and recovery code for processes that begin a transaction and then go suck their thumb
2020-12-25 12:38:06	dh`	stuff like that
2020-12-25 12:38:06	mrvn	dh`: keeping the locks held would be the only way to ensure no other core calls something in the same territory.
2020-12-25 12:38:11	tjowers	Register a context that remembers the previous IO
2020-12-25 12:38:35	tjowers	No register a context containing a series of IO
2020-12-25 12:38:41	dh`	there was a thing called txlinux about ten years ago and I think there's been at least some followup work since
2020-12-25 12:38:55	mrvn	tjowers: then you would frequently call syscall(context1); syscall(context2); syscall(context1); The context is an extra argument and not internal state.
2020-12-25 12:39:17	tjowers	io_uring let's you append a bunch of system calls
2020-12-25 12:39:23	tjowers	In one swoop
2020-12-25 12:39:25	mrvn	dh`: L4 uses message passing
2020-12-25 12:39:48	dh`	yes, but its syscalls are not themselves messages
2020-12-25 12:40:20	mrvn	dh`: all 5 of them :) It uses register for small messages so you could say even they are.
2020-12-25 12:40:51	dh`	no, because they're synchronous, the primary point of message-based syscalls would be that they'd be asynchronous
2020-12-25 12:41:10	dh`	that is, you start a syscall and then go off and do some other work while it chugs away (presumably on another core0
2020-12-25 12:41:38	mrvn	dh`: Some things just make no sense to be async. Like malloc(). The code simply has to wait for the result.
2020-12-25 12:41:39	doug16k	why add the latency and cache coherency traffic
2020-12-25 12:42:12	doug16k	"on another core" isn't free
2020-12-25 12:42:36	doug16k	it's expensive
2020-12-25 12:42:48	tjowers	SYSCALL_DEFINE3(io_xchng, int, dest_fd, void*, val_buffer, void*, return_read_buffer)?
2020-12-25 12:42:48	dh`	malloc isn't a syscall on any normal system either :-p
2020-12-25 12:43:04	mrvn	dh`: My syscalls send messages but they also have flags if they want to wait for a message or not.
2020-12-25 12:43:05	doug16k	possibly have to interfere with the state of a different cpu's scheduler from this cpu
2020-12-25 12:43:27	tjowers	For network maybe -- but can't think of uses
2020-12-25 12:43:50	dh`	"on another core" might be cheaper than throwing away your userspace tlb and cache affinity to run the syscall
2020-12-25 12:43:54	doug16k	send it an IPI to reschedule
2020-12-25 12:44:05	doug16k	and let that get queued and dispatched in its interrupt controller
2020-12-25 12:44:09	dh`	at least for syscalls that do significant amounts of work and not say getpid().
2020-12-25 12:44:10	doug16k	then preempt what it did and handle it
2020-12-25 12:44:24	mrvn	dh`: I think it's better to run the recipient of the message on another core, not the sender.
2020-12-25 12:44:36	dh`	i'm not sure what you mean.
2020-12-25 12:44:37	doug16k	then reschedule and miss everything because that other cpu just pulled everything over there when it wrote it
2020-12-25 12:45:10	mrvn	dh`: I send a "read-file" message. The syscall returns and the process keeps running on the same core. On another core the VFS process wakes up and handles the message.
2020-12-25 12:45:17	doug16k	just saying it is horrible if the amount of work done doesn't justify it
2020-12-25 12:45:25	dh`	I'm talking about you call read(), this posts a message somewhere, the work for read() is done on another core
2020-12-25 12:45:43	mrvn	dh`: ok, then we agree.
2020-12-25 12:45:46	dh`	depending on how it's set up you may not even need to switch to kernel mode on the application's cpu
2020-12-25 12:46:04	dh`	which has a lot of potential advantages even though the cross-call isn't cheap
2020-12-25 12:46:17	mrvn	dh`: Drawback: read copies the data into the output buffer. That puts it in the local CPU cache. When the user process then runs on another core you loose that.
2020-12-25 12:46:44	dh`	true
2020-12-25 12:47:17	dh`	but maybe the modern version of the page-flipping that vintage microkernels do is to issue cache hints to avoid that
2020-12-25 12:47:29	mrvn	dh`: That's where my "wait for it" flag comes in. When you wait for it the same core handles the receiver until it replies.
2020-12-25 12:47:58	mrvn	dh`: the time slice of the sender is also used up.
2020-12-25 12:48:16	dh`	seems reasonable if the kernel is mapped/available on that core
2020-12-25 12:48:19	doug16k	a ring buffer that you both update, like a PCI device ring, can be amazing if you are sending enough data from one cpu to another per second
2020-12-25 12:49:33	mrvn	dh`: When you read a file the FS process uses up your timeslice. So someone just spaming the system with syscalls will get preempted pretty quickly.
2020-12-25 12:50:53	tjowers	Ok -- imagine a shared coroutine where all threads can put an input vector of work on the stack of the target coroutine and specify a timer in a shared control loop -- so threads, when yielding, first test a lock on the control loop to check timers, then if the lock is held, jump to coroutines that have a non-null input-vector; if no thread is
2020-12-25 12:50:53	tjowers	doing the control loop, the thread yields there and checks timeouts and signals coroutines to jump back to their og function; another thread picks back up where it left off
2020-12-25 12:51:33	mrvn	tjowers: why a coroutine? What is the internal state the coroutine keeps between calls?
2020-12-25 12:51:45	mrvn	tjowers: I think you really don't understand what a coroutine is.
2020-12-25 12:52:00	tjowers	A stack that is updateable by threads
2020-12-25 12:52:02	dh`	I think tjowers has been confused by go calling its threads "goroutines"
2020-12-25 12:52:06	tjowers	So any thread can jump to it
2020-12-25 12:52:24	dh`	jumping to a stack isn't an operation I recognize/understand
2020-12-25 12:52:30	tjowers	And any thread can exit, and the next thread can jump to where it left off
2020-12-25 12:52:52	tjowers	Right jumping to the PC with the stack environment at that point
2020-12-25 12:53:07	tjowers	The saved PC somehow
2020-12-25 12:53:17	dh`	so basically you're talking about a thread?
2020-12-25 12:53:32	tjowers	Yes threads that share coroutines
2020-12-25 12:53:39	mrvn	tjowers: that is contrary to you giving an input vector.
2020-12-25 12:53:46	doug16k	it's a context switching mechanism where you explicitly say what to switch to, which suspends the current coroutine
2020-12-25 12:54:20	tjowers	Because they don't have to do the coroutine if they are processing, another yielded thread can do it
2020-12-25 12:54:25	dh`	this stack you're talking about sounds like a thread, not a coroutine.
2020-12-25 12:54:29	doug16k	from a programmer perspective, it's like a function that can stop in the middle of running and continue
2020-12-25 12:54:45	doug16k	there is no preemption
2020-12-25 12:54:48	tjowers	But ultimately, worstcase it will execute like a normal coroutine if the work wasn't done
2020-12-25 12:54:54	doug16k	there is no parallelism
2020-12-25 12:55:10	doug16k	entirely explicit context switches
2020-12-25 12:55:16	doug16k	voluntary
2020-12-25 12:55:24	mrvn	and there is no "lets save this input vector for later"
2020-12-25 12:55:26	doug16k	that isn't a description of threads as far as I know
2020-12-25 12:56:14	tjowers	It's "here's an input vector and an output buffer" if the thread reaches the point where it needs the output, it checks to see if the processing is already being worked on
2020-12-25 12:56:48	doug16k	the contexts you switch between are very much like a thread though yeah
2020-12-25 12:56:51	tjowers	It may have been partially done -- if a timer expired in the control loop
2020-12-25 12:56:53	mrvn	tjowers: that would use worker threads. Not coroutines
2020-12-25 12:57:05	mrvn	tjowers: and might use a concept calles futures and promises.
2020-12-25 12:57:09	tjowers	It's a cothread
2020-12-25 12:57:50	tjowers	It fails to a coroutine, it succeeds as a thread
2020-12-25 12:58:11	tjowers	As in worstcase it's a coroutine -- best case a thread handled it already
2020-12-25 12:58:32	doug16k	mrvn, my time is real	103m30.342s
2020-12-25 12:59:15	mrvn	tjowers: In ocaml with LWT you do your IO by requesting the data. The function gives you pack a promise. Later on you can check if the promise is ready or not. You can wait for it to become ready or force it (not for IO but other promises).
2020-12-25 12:59:52	mrvn	tjowers: The futures and promises concept I think pretty much describes what you want.
2020-12-25 12:59:58	dh`	it seems that tjowers has his own abstraction in mind that's not any standard thing
2020-12-25 13:00:30	tjowers	Ok so that's the interface I suppose -- the implementation is as a multi-threaded coroutine vector table
2020-12-25 13:00:37	mrvn	doug16k: 85 minutes for my own C code and down to 1903000 blocks. Might beat python.
2020-12-25 13:00:39	dh`	so this discussion is going to go nowhere useful unless we can either convince him that it's wrong and he should use standard concepts
2020-12-25 13:00:44	dh`	which is unlikely to happen
2020-12-25 13:00:56	mrvn	tjowers: no, it isn't. you still don't have any coroutines.
2020-12-25 13:01:43	dh`	or unless he can explain it in coherent terms and explain how it relates to the standard concepts such that the rest of us can understand what he's talking bout
2020-12-25 13:02:13	tjowers	Worst-case, a thread didn't handle it, it yeilds to the coroutine and does it's own work -- multiple threads can switch between their execution and a shared execution
2020-12-25 13:02:35	tjowers	That's the idea if it's already done then cool that's the threading model I'm going to work on
2020-12-25 13:02:40	doug16k	why are so may I/Os flying around?
2020-12-25 13:02:45	doug16k	what is this workload?
2020-12-25 13:03:05	doug16k	you have tons of "other" I/O pending to throw at saturated hardware in your program?
2020-12-25 13:04:04	doug16k	almost every time your code (should) say screw it and do it synchronously because it has absolutely nothing better to do than wait
2020-12-25 13:04:34	doug16k	obvious exception to that is a UI thread
2020-12-25 13:05:20	doug16k	if you are juggling tons of I/O on your server backend running amazon, then sure, juggle those I/Os that are backing up in your gigantic pending work item queues
2020-12-25 13:06:54	doug16k	don't make it a thing where it has to go through a more complicated maze to realize, oh, and there are no pending coroutines either, and have to wait anyway
2020-12-25 13:07:17	tjowers	True -- until servers don't have hard disks
2020-12-25 13:07:25	tjowers	They have NVMoF
2020-12-25 13:07:56	tjowers	With their own power supply
2020-12-25 13:09:04	tjowers	So IO is to a flip-flop memory fabric shared between several nodes -- this hasn't came to fruition yet
2020-12-25 13:09:10	tjowers	But it's on the horizon
2020-12-25 13:09:49	dh`	uh huh.
2020-12-25 13:12:00	tjowers	Directly plugged into the memory channel on the motherboard
2020-12-25 13:12:07	tjowers	On several nodes
2020-12-25 13:14:01	dh`	and made of dilithium crystals?
2020-12-25 13:14:57	dh`	anyway, you haven't yet explained your idea in terms anyone else can follow
2020-12-25 13:15:04	tjowers	Alcubierre Warp Drive?
2020-12-25 13:15:36	dh`	if you want to be able to talk to anyone about it, you need to figure out how to do that
2020-12-25 13:15:52	doug16k	I prefer Chroniton Waves. they can destroy the planet at the end if you don't dissipate it right. how cool is that?!
2020-12-25 13:15:53	superleaf1995	Do you want to thread other thread's coroutines?
2020-12-25 13:17:35	doug16k	oops the machine didnt do the thing and now the planet isn't there anymore
2020-12-25 13:17:50	<--	superleaf1995 (bdb3c8ca@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.200.202) has quit (Quit: Connection closed)
2020-12-25 13:18:20	dh`	my recommendation would be to understand the standard definitions of terms like 'coroutine' so you can explain how your thing is different (both how it's like and how it's not like the standard concept)
2020-12-25 13:18:21	mrvn	doug16k: 100 minutes for my code and down to 1727000 blocks.
2020-12-25 13:18:43	tjowers	It's only an idea -- but the concept is to have a shared jump table where multiple threads offload work by writing to the stack of the jump table -- individual functions are not executed simultaneously
2020-12-25 13:20:00	dh`	I don't understand what it means for a jump table to have a stack.
2020-12-25 13:20:01	mrvn	tjowers: The Alcubierre Warp Drive collects dust and energy as you fly around and releases that in one big pulse when you stop. So you better hope no aliens will ever come and visit us here with an Alcubierre Warp Drive.
2020-12-25 13:20:28	mrvn	tjowers: That concept is simply called worker threads.
2020-12-25 13:21:06	tjowers	A thread can off load work to a function like "Find the sum of this giant integer array" they write a pointer to that array and an idle/blocking thread may start the work, then a timer times out and another thread can go further, if it isn't finished when the dispatching thread needs the resource it picks up where it was left off
2020-12-25 13:22:05	tjowers	Ok so it's not novel
2020-12-25 13:22:31	mrvn	it's as old as the callback.
2020-12-25 13:22:45	mrvn	you just describe it way more confusingly.
2020-12-25 13:23:06	tjowers	The functions are deterministic
2020-12-25 13:23:23	tjowers	Like a systemcall
2020-12-25 13:24:10	dh`	it sounds to me like you're thinking of some kind of workqueue concept that's gotten mixed up with low-level concerns about context switches
2020-12-25 13:24:49	tjowers	So it's both a "worker thread pool" and a "soft-preemption logical interrupt table"
2020-12-25 13:25:15	doug16k	what's the workload, what's it doing?
2020-12-25 13:25:30	doug16k	it's all hypothetical right?
2020-12-25 13:25:57	doug16k	it's a similar thing when people implement their scheduler
2020-12-25 13:26:09	doug16k	they picture all these threads all in hard execution everywhere
2020-12-25 13:26:24	doug16k	all cpus wanting to run and number crunch infinitely
2020-12-25 13:26:38	doug16k	it's nothing like that usually. it's almost entirely threads that have nothing to do and wait
2020-12-25 13:27:33	doug16k	a large number of really nice threads that wait almost all the time
2020-12-25 13:27:48	tjowers	So use less machines
2020-12-25 13:28:05	doug16k	because humans and I/O are slow compared to insane cpu speed
2020-12-25 13:28:42	doug16k	we have the power we need at peak all the time, so most of the time, we have extremely excessive cpu resources
2020-12-25 13:30:18	tjowers	I'm thinking io_uring(2) will relieve threads of being IO bound, then with that assumption when threads are idle, pack more on the machine, run more workloads
2020-12-25 13:30:49	mrvn	No manual entry for io_uring
2020-12-25 13:31:12	tjowers	https://manpages.debian.org/unstable/liburing-dev/io_uring_enter.2.en.html
2020-12-25 13:31:13	bslsk05	​manpages.debian.org: io_uring_enter(2) — liburing-dev — Debian unstable — Debian Manpages
2020-12-25 13:31:37	dh`	uring my kernelz, stealing my workunitz
2020-12-25 13:32:02	tjowers	I would have a single daemon program take system wide IO submissions
2020-12-25 13:32:16	dh`	quite apart from any other considerations, that's a bad idea
2020-12-25 13:32:29	tjowers	Fault tolerance?
2020-12-25 13:32:32	dh`	gives you both a single point of failure and a cache bottleneck
2020-12-25 13:33:04	mrvn	tjowers: uring looks like a reimplementation and extension of Linux aio
2020-12-25 13:34:00	tjowers	Can aio make socket calls? io_uring can hold a lot of different IO calls
2020-12-25 13:34:08	tjowers	Can you use aio for network?
2020-12-25 13:34:28	mrvn	tjowers: read/write pretty sure. but not connect
2020-12-25 13:34:46	dh`	of course you can, it's a fancy interface to read and write
2020-12-25 13:35:05	mrvn	oh, splice and tee is supported too.
2020-12-25 13:35:42	mrvn	tjowers: The bigger question is: When does the IO become synchronous? Not every read/write with aio actually goes async.
2020-12-25 13:35:46	-->	ransom_ (~c4264035@8.47.12.52) has joined #osdev
2020-12-25 13:36:17	-->	avega (~Thunderbi@94.25.228.213) has joined #osdev
2020-12-25 13:36:23	<--	avega (~Thunderbi@94.25.228.213) has quit (Client Quit)
2020-12-25 13:38:35	doug16k	shouldn't it return EWOULDBLOCK
2020-12-25 13:38:49	mrvn	doug16k: how ever would you read/write then?
2020-12-25 13:39:06	doug16k	only when it wouldn't block
2020-12-25 13:39:23	mrvn	doug16k: the syscall doesn't block. The completion just doesn't happen async. All later submissions wait for the non-async one.
2020-12-25 13:40:17	tjowers	I suppose when the IO queue fills -- I'm trying to figure out what the big idea was, I clearly missed that part -- I wonder if you can map the io_ring into memory and make submissions that way, like packet_mmap
2020-12-25 13:41:02	mrvn	tjowers: the big idea of what?
2020-12-25 13:41:08	doug16k	tjowers, what if they are a comedian and think it would be funny to strcpy "my mom is awesome" all over the ring?
2020-12-25 13:42:10	tjowers	Of io_uring
2020-12-25 13:42:34	mrvn	doug16k: if you copy that into your  struct io_sq_ring you probably get a lot of errors because the request isn't valid.
2020-12-25 13:42:48	mrvn	tjowers: to make tons and tons of IO operations in the background.
2020-12-25 13:43:10	doug16k	ah, io_ring made me picture an actual device ring
2020-12-25 13:43:14	mrvn	With IORING_SETUP_SQPOLL you can even do them without syscalls.
2020-12-25 13:43:18	tjowers	Yup https://unixism.net/loti/low_level.html#low-level -- you can mmap the io_uring with the low-level (regular) interface
2020-12-25 13:43:20	bslsk05	​unixism.net: The Low-level io_uring Interface — Lord of the io_uring  documentation
2020-12-25 13:43:57	<--	ransom_ (~c4264035@8.47.12.52) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2020-12-25 13:44:07	tjowers	So you could minimize system calls further -- especially if you have one interface to all IO, a single thread group
2020-12-25 13:44:35	mrvn	tjowers: uring seems to be pretty complete. Any IO operation that isn't supported?
2020-12-25 13:46:03	mrvn	bugger, no readdir in uring.
2020-12-25 13:46:32	<--	sprocklem (~sprocklem@unaffiliated/sprocklem) has quit (Ping timeout: 272 seconds)
2020-12-25 13:47:24	mrvn	no mkdir, rmdir, rm, mknod either. :(
2020-12-25 13:47:45	tjowers	Has epoll
2020-12-25 13:48:18	tjowers	The standard FS and network IO calls are supported
2020-12-25 13:48:54	tjowers	No mmap
2020-12-25 13:49:09	mrvn	tjowers: mmap doesn't block
2020-12-25 13:49:46	tjowers	Right but a major thing is also that these all execute under a single context without switching
2020-12-25 13:50:03	tjowers	Well it would switch because of the scheduler
2020-12-25 13:51:21	tjowers	Wish there was a sysbatch(2) call -- I could try that later on; not now though
2020-12-25 13:52:44	tjowers	Where it's a variadic system call that calls the system calls without switching back to user space and returns a buffer of the return values appended
2020-12-25 13:53:20	tjowers	Or the side effects etc
2020-12-25 13:55:34	<--	tjowers (c7bc5729@199.188.87.41) has quit (Remote host closed the connection)
2020-12-25 13:56:50	<--	acidx (~leandro@unaffiliated/acidx) has quit (Ping timeout: 260 seconds)
2020-12-25 13:57:23	-->	acidx (~leandro@unaffiliated/acidx) has joined #osdev
2020-12-25 14:01:03	-->	tjowers (c7bc5729@199.188.87.41) has joined #osdev
2020-12-25 14:02:39	mrvn	tjowers: That's basically what uring does. Just for a select few syscalls.
2020-12-25 14:03:46	tjowers	Maybe they could have the submission structures take a function symbol argument rather than hard-coding it
2020-12-25 14:04:15	tjowers	Would the symbol lookup be slow?
2020-12-25 14:04:20	mrvn	doug16k: 150 minutes for my code and still 1164000 blocks left. I loose. :(
2020-12-25 14:04:50	mrvn	tjowers: syscalls aren't symbols, they have numbers.
2020-12-25 14:05:22	tjowers	So it's literally a giant jump table?
2020-12-25 14:05:28	mrvn	indeed
2020-12-25 14:06:01	tjowers	So hash the symbol for the syscall number
2020-12-25 14:06:14	mrvn	that's not how it works.
2020-12-25 14:06:22	tjowers	I know
2020-12-25 14:06:48	tjowers	I'd do it if linux wasn't so awfully organized
2020-12-25 14:07:10	tjowers	I follow the instructions and sometimes it works
2020-12-25 14:08:35	tjowers	Does someone have a link to the instructions for how to both find patches, and then how to apply them?
2020-12-25 14:09:01	tjowers	It's like the code part wouldn't be too hard it's the code base that seems to be the hurdle
2020-12-25 14:10:26	mrvn	find patches for what and where?
2020-12-25 14:12:18	tjowers	I'll do stuff like that later on; for now I'm going to play with some assembly in c++ and see how to combine assembly in class instances -- since it's christmas eve and I can do whatever
2020-12-25 14:17:50	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-25 14:30:42	-->	superleaf1995 (bdb3c8ca@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.200.202) has joined #osdev
2020-12-25 14:33:22	superleaf1995	so i have been thinking of making a thread-safe data structure which is like a tree but each node has a lock that is inherited to the children, and anything below it. How feasible is this? Considering a tree can have many roots and a lock on the root root locks up everyone else.
2020-12-25 14:33:24	-->	Sajesajama (Salsa@gateway/vpn/protonvpn/sajesajama) has joined #osdev
2020-12-25 14:33:52	<--	tjowers (c7bc5729@199.188.87.41) has quit (Remote host closed the connection)
2020-12-25 14:34:00	<--	MDude (~MDude@71.50.47.112) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2020-12-25 14:34:43	doug16k	superleaf1995, what if you lock one node then a descendent of that node. you deadlock/can't?
2020-12-25 14:35:03	doug16k	shouldn't you lock the whole tree at once?
2020-12-25 14:35:13	doug16k	what can you do with a node lock
2020-12-25 14:35:15	superleaf1995	the idea is that many threads can access a tree
2020-12-25 14:35:52	doug16k	sure everyone accesses it all the time without locking - they know their node won't get yanked out from under them
2020-12-25 14:35:55	mrvn	superleaf1995: this is often done but with releasing upper locks as you traverse the tree.
2020-12-25 14:36:18	superleaf1995	hmmm
2020-12-25 14:36:19	mrvn	superleaf1995: otherwise if you start locking at the root the whole tree is simply locked.
2020-12-25 14:36:36	superleaf1995	yeah, but nobody stops process 1 from locking the tree
2020-12-25 14:36:41	mrvn	superleaf1995: you probably might also want read/write locks.
2020-12-25 14:36:54	doug16k	it's changing the tree (inserting/removing) where locking is unavoidable
2020-12-25 14:37:02	superleaf1995	yep
2020-12-25 14:37:15	superleaf1995	everyone by default has read access to everything
2020-12-25 14:37:40	mrvn	superleaf1995: you start by locking the root. The you decide if you need the left or right child and lock that. Then you can release the root and work on the child. Meanwhile the next process can lock the root.
2020-12-25 14:37:53	superleaf1995	ah
2020-12-25 14:38:01	superleaf1995	so you mean i only lock what i use?
2020-12-25 14:38:06	mrvn	superleaf1995: that won't work. If someone deletes a node in the tree while someone else reads it you have a problem.
2020-12-25 14:38:22	superleaf1995	hmmm
2020-12-25 14:38:36	superleaf1995	what about locking the parent and children that a process uses
2020-12-25 14:38:45	superleaf1995	i.e like only what proc uses
2020-12-25 14:38:57	mrvn	So have everyone read-lock the tree and when you need to modify something you write-lock the node you are going to change.
2020-12-25 14:39:33	superleaf1995	the thing is that you cant have write and read locks at the same time
2020-12-25 14:39:35	mrvn	and only keep locks on the parts you are still using.
2020-12-25 14:39:46	superleaf1995	oh
2020-12-25 14:40:01	mrvn	superleaf1995: that is correct. But you can have many read locks. Most processes will only read the root node for example.
2020-12-25 14:40:01	superleaf1995	so
2020-12-25 14:40:41	mrvn	A write-lock will block any read-lock and wait for all existing read-locks to release before it succeeds.
2020-12-25 14:40:42	superleaf1995	in short; i only write lock the children proc uses, read lock party for everyone and no r/w access at same time, gotcha
2020-12-25 15:46:21	superleaf1995	yeah, i think i could spinlock some processes when someone is writing
2020-12-25 15:46:37	--	irc: disconnected from server
2020-12-25 15:47:15	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-25 15:47:16	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-25 15:47:16	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-25 15:47:16	--	Channel #osdev: 274 nicks (1 op, 0 voices, 273 normals)
2020-12-25 15:47:41	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-25 15:51:50	-->	ransom_ (~c4264035@8.47.12.52) has joined #osdev
2020-12-25 15:52:09	<--	ransom_ (~c4264035@8.47.12.52) has quit (Client Quit)
2020-12-25 15:56:11	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-25 15:56:45	-->	ransom_ (~c4264035@8.47.12.52) has joined #osdev
2020-12-26 06:21:47	--	irc: disconnected from server
2020-12-26 06:22:25	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-26 06:22:25	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-26 06:22:25	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-26 06:22:25	--	Channel #osdev: 279 nicks (1 op, 0 voices, 278 normals)
2020-12-26 06:22:31	mrvn	[    2.430572] Failed to execute /init (error -2)
2020-12-26 06:22:35	mrvn	Note the path
2020-12-26 06:22:48	klys	mrvn, that's where I put init...
2020-12-26 06:22:52	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-26 06:23:09	mrvn	hmm, then why sbin/init.c?
2020-12-26 06:23:17	j`ey	klys: link it statically?
2020-12-26 06:23:38	mrvn	add ld.so.cache too
2020-12-26 06:24:21	mrvn	and ld.so.conf.d
2020-12-26 06:24:46	mrvn	what does "chroot /chroot /init" do?
2020-12-26 06:25:30	mrvn	and check if your kernel has devtmpfs + mount on boot. YOur dev might be pointless.
2020-12-26 06:25:48	klys	https://paste.debian.net/1178323/
2020-12-26 06:25:49	bslsk05	​paste.debian.net: debian Pastezone
2020-12-26 06:26:28	klys	wait wrong paste
2020-12-26 06:26:48	mrvn	maybe use a gist so you can update it
2020-12-26 06:27:04	matt|home	yo.
2020-12-26 06:27:26	klys	https://paste.debian.net/1178324/
2020-12-26 06:27:28	bslsk05	​paste.debian.net: debian Pastezone
2020-12-26 06:28:12	mrvn	well, forking /bi/sh failed this time
2020-12-26 06:28:40	mrvn	Just test thjis with chroot. no need to boot a vm every time.-
2020-12-26 06:29:40	klys	https://paste.debian.net/1178326/
2020-12-26 06:29:42	bslsk05	​paste.debian.net: debian Pastezone
2020-12-26 06:30:15	mrvn	klys: is that the dynamic or static init?
2020-12-26 06:30:38	klys	that's statically linked
2020-12-26 06:31:26	klys	not a dynamic executable
2020-12-26 06:31:34	mrvn	You should check the return code of exec and perror
2020-12-26 06:33:46	klys	fail: : No such file or directory
2020-12-26 06:34:01	mrvn	Odd error. Never hat it work in chroot but fail in kernel like that.
2020-12-26 06:36:50	klys	so to run busybox-static you basically need the symlink and /dev/console and that's it?
2020-12-26 06:37:45	-->	ransom_ (~c4264035@8.47.12.52) has joined #osdev
2020-12-26 06:38:16	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 240 seconds)
2020-12-26 06:39:42	mrvn	not sure if you even need /dev/console, the stdin/out/err is already open.
2020-12-26 06:44:47	klys	turns out the actual problem with https://paste.debian.net/1178323/ was on line 61, and is fixed omitting -type f
2020-12-26 06:46:06	mrvn	klys: so no devtmpfs automounting in the kernel?
2020-12-26 06:46:14	mrvn	or no /dev in the initramfs at all?
2020-12-26 06:46:30	klys	basically yes
2020-12-26 06:46:30	mrvn	(both?)
2020-12-26 06:46:34	klys	none of that
2020-12-26 06:46:41	mrvn	all the links where missing too
2020-12-26 06:46:56	mrvn	that will do it :)
2020-12-26 06:47:02	klys	:)
2020-12-26 06:53:20	-->	SkyZ (43538427@ool-43538427.dyn.optonline.net) has joined #osdev
2020-12-26 06:57:26	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-26 06:59:52	superleaf1995	i have been thinking of making an b-tree for my virtual-physical-allocator however i can't find any benefit of doing this, since my algo rn is O(n-1) on worst case and O(1) as best case
2020-12-26 07:00:47	geist	yah that doesn't make a lot of sense
2020-12-26 07:00:51	mrvn	O() and best cae makes no sense.
2020-12-26 07:01:03	mrvn	O() notation is always worst case.
2020-12-26 07:01:09	superleaf1995	ah
2020-12-26 07:01:23	superleaf1995	well then it just iterates 2 times if the thing is good
2020-12-26 07:01:33	mrvn	more importantly than best case or worst case: What is the average case?
2020-12-26 07:01:40	superleaf1995	otherwise iterates o(n)
2020-12-26 07:01:44	superleaf1995	well
2020-12-26 07:02:03	mrvn	And n can be a few millions. So that is really bad.
2020-12-26 07:02:18	superleaf1995	yeah
2020-12-26 07:02:53	superleaf1995	the average is like (2) for each call to malloc IF the last_iter element is correct
2020-12-26 07:02:57	superleaf1995	(firstfit)
2020-12-26 07:03:18	superleaf1995	so 2*n calls
2020-12-26 07:03:48	mrvn	You can do the same for b-tree. Remember the last leaf and just fit the next alloc there.
2020-12-26 07:04:07	superleaf1995	hmm true
2020-12-26 07:04:14	mrvn	Are you doing 32bit or 64bit?
2020-12-26 07:04:24	superleaf1995	64
2020-12-26 07:04:31	superleaf1995	riscv, yknow the usual
2020-12-26 07:05:18	mrvn	It's practically impossible to fill up the whole address space. So you can probably just use the next free address for any mapping for the whole livetime of any programm.
2020-12-26 07:05:55	superleaf1995	alright; btree for each program?, ok.
2020-12-26 07:06:29	mrvn	What I'm trying to say is: It doesn't matter what you do as long as you have a "last_iter".
2020-12-26 07:06:54	superleaf1995	ah
2020-12-26 07:07:36	mrvn	What other operation do you have on your address space? Alloc uses last_iter and will be O(1) basically always. What about free() or mmap() with a fixed address? swapping?
2020-12-26 07:08:12	superleaf1995	when free executes, it takes in account the last size of the last malloc
2020-12-26 07:08:28	superleaf1995	if size is bigger or equal as the before malloc, last iter updates
2020-12-26 07:08:38	superleaf1995	because "hey, meybe someone needs this in the future!"
2020-12-26 07:09:18	mrvn	Huh? a = malloc(1000); b = malloc(1000); free(a); What hasd the last_iter got to do with free?
2020-12-26 07:09:45	superleaf1995	frees the 1000 bytes block and updatees last iter because the block is very big
2020-12-26 07:09:55	superleaf1995	i.e
2020-12-26 07:09:56	<--	pitust (~pitust@37.228.231.89) has quit (Ping timeout: 240 seconds)
2020-12-26 07:10:09	mrvn	don't do that. Just keep going in the address space.
2020-12-26 07:10:16	superleaf1995	ok
2020-12-26 07:10:32	mrvn	but now consider what else free has to do: retrun the physical pages to the memory pool.-
2020-12-26 07:10:49	superleaf1995	yes
2020-12-26 07:10:59	superleaf1995	it creates a entry in the lsit with a free bloc
2020-12-26 07:11:08	mrvn	A btree can look up the physical pages quickly. A list would be O(n).
2020-12-26 07:11:09	superleaf1995	that malloc can see and use if it fits
2020-12-26 07:11:13	superleaf1995	oh
2020-12-26 07:11:40	superleaf1995	true
2020-12-26 07:12:31	mrvn	Note: Most architectures have page tables. That's a b-tree already. I use just that to lookup physical addresses of virtual ones.
2020-12-26 07:13:04	superleaf1995	ye
2020-12-26 07:16:43	mrvn	My last_iter also just points to the page table the last page was added. It's a bit ugly to check if you can fit a N pages block there, have to check every page table entry to see they are all free. So I keep track of how big the current hole at last_iter is as well.
2020-12-26 07:17:24	superleaf1995	Well, i will redesign my entire pmalloc to be more efficient :P
2020-12-26 07:17:33	superleaf1995	possibly implement a cache of most used blocks...
2020-12-26 07:18:14	mrvn	I find it usefull to implement separate physical allocator, virtual allocator and memory mapper.
2020-12-26 07:18:47	superleaf1995	i use pmalloc for phys and virt tho
2020-12-26 07:18:53	-->	gorgonical (~nmg@c-73-154-128-75.hsd1.pa.comcast.net) has joined #osdev
2020-12-26 07:18:59	superleaf1995	because rn you can specify multiple heaps for multiple uses
2020-12-26 07:19:33	mrvn	superleaf1995: I never saw malloc implementations usefull for the kernel itself.
2020-12-26 07:20:24	superleaf1995	well, i need to know where to put my vfs btree at *shrugs*
2020-12-26 07:20:51	superleaf1995	also memory can vary depending on sys
2020-12-26 07:21:15	mrvn	You need page sized objects to handle the memory for processes. And for kernel internal data you only have a bunch of objects below page size in various subsystems. Having a SLUB/SLAB in the subsystem to handle those seems better.
2020-12-26 07:21:59	superleaf1995	probably
2020-12-26 07:22:25	mrvn	You probably want some caching strategy for the VFS. So that will be a different memory allocator than for e.g. struct Thread for the multitasking.
2020-12-26 07:23:07	-->	sprocklem (~sprocklem@unaffiliated/sprocklem) has joined #osdev
2020-12-26 07:23:26	superleaf1995	well i use pmalloc for everything, reserve space for pcie, allocate memory for anything, etc; however i could pack several object nodes inside a "parent" node region
2020-12-26 08:55:32	--	irc: disconnected from server
2020-12-26 08:56:09	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-26 08:56:09	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-26 08:56:09	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-26 08:56:09	--	Channel #osdev: 278 nicks (1 op, 0 voices, 277 normals)
2020-12-26 08:56:36	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-26 09:09:49	mrvn	Poll: jffs2 or f2fs for a 8GB USB2 stick? (4MB/s write, 18MB/s read)
2020-12-26 09:16:48	<--	johnjay (~pi@38.120.10.99) has quit (Read error: Connection reset by peer)
2020-12-26 09:16:54	-->	johnjay (~pi@38.120.10.99) has joined #osdev
2020-12-26 09:26:00	<--	Terlisimo (~Terlisimo@outofband.ozna.net) has quit (Quit: that time again)
2020-12-26 09:26:32	-->	KidBeta (~Kidbeta@hpavc/kidbeta) has joined #osdev
2020-12-26 09:31:19	-->	ransom_ (~c4264035@8.47.12.52) has joined #osdev
2020-12-26 09:35:27	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-26 09:37:19	<--	johnjay (~pi@38.120.10.99) has quit (Quit: WeeChat 2.3)
2020-12-26 09:38:01	<--	KidBeta (~Kidbeta@hpavc/kidbeta) has quit (Ping timeout: 264 seconds)
2020-12-26 09:38:30	-->	johnjay (~pi@38.120.10.99) has joined #osdev
2020-12-26 09:45:54	<--	SkyZ (43538427@ool-43538427.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2020-12-26 09:49:29	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-26 09:53:59	-->	Terlisimo (~Terlisimo@outofband.ozna.net) has joined #osdev
2020-12-26 10:01:54	-->	gioyik_ (gioyik@gateway/vpn/privateinternetaccess/gioyik) has joined #osdev
2020-12-26 10:04:55	-->	gioyik__ (~gioyik@186.112.107.251) has joined #osdev
2020-12-26 10:05:13	<--	gioyik (~gioyik@186.112.107.251) has quit (Ping timeout: 256 seconds)
2020-12-26 10:07:42	<--	gioyik_ (gioyik@gateway/vpn/privateinternetaccess/gioyik) has quit (Ping timeout: 265 seconds)
2020-12-26 10:40:32	<--	ransom_ (~c4264035@8.47.12.52) has quit (Ping timeout: 272 seconds)
2020-12-26 10:59:48	-->	srjek (~srjek@c-73-22-24-228.hsd1.il.comcast.net) has joined #osdev
2020-12-26 11:02:08	<--	srjek|home (~srjek@2601:249:600:b05:15fb:3e0b:893a:6e78) has quit (Ping timeout: 268 seconds)
2020-12-26 11:05:38	-->	srjek|home (~srjek@2601:249:600:247d:dd7e:9e73:9779:a16a) has joined #osdev
2020-12-26 11:06:59	<--	srjek (~srjek@c-73-22-24-228.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2020-12-26 11:35:02	-->	diwyju (~Daohshdy~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-26 11:48:23	<--	diwyju (~Daohshdy~@gateway/tor-sasl/spareproject) has quit (Ping timeout: 240 seconds)
2020-12-26 11:48:52	-->	diwyju (~Daohshdy~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-26 12:02:14	-->	Jayprakash12345 (~jayprakas@wikimedia/Jayprakash12345) has joined #osdev
2020-12-26 12:03:23	<--	Jayprakash12345 (~jayprakas@wikimedia/Jayprakash12345) has quit (Client Quit)
2020-12-26 12:11:12	-->	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has joined #osdev
2020-12-26 12:24:46	-->	trinityblade (~textual@adsl-76-211-177-0.dsl.wlfrct.sbcglobal.net) has joined #osdev
2020-12-26 12:47:23	<--	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has quit (Ping timeout: 240 seconds)
2020-12-26 12:51:17	-->	Jari-- (~vai@83-245-250-242-nat-p.elisa-mobile.fi) has joined #osdev
2020-12-26 12:51:28	Jari--	how are you !
2020-12-26 12:51:33	Jari--	hows your OS projects going on
2020-12-26 12:51:38	Jari--	anyone hitting the Wall Street soon ?
2020-12-26 14:29:17	--	irc: disconnected from server
2020-12-26 14:29:54	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-26 14:29:54	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-26 14:29:54	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-26 14:29:54	--	Channel #osdev: 278 nicks (1 op, 0 voices, 277 normals)
2020-12-26 14:29:57	CrystalMath	otherwise the FAT BPB value is used
2020-12-26 14:29:59	superleaf1995	do not rely on that value for anything; atleast try to not rely on assembly-time values
2020-12-26 14:30:04	doug16k	nvme can be configured like that too
2020-12-26 14:30:21	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-26 14:30:25	superleaf1995	since a bios can handle stuff differently altho...
2020-12-26 14:30:41	superleaf1995	i think you can use 512 for everything anyways and the bios wll handle everything for you
2020-12-26 14:30:51	CrystalMath	i think a FAT is toast if the BIOS reports a different sector size
2020-12-26 14:31:00	CrystalMath	imagine 3 sectors per cluster, 512 bytes per sector
2020-12-26 14:31:04	CrystalMath	and now sectors are 1024
2020-12-26 14:31:05	superleaf1995	unless you stumble upon a SCSI or NVME, in that case write your own drivers
2020-12-26 14:31:06	CrystalMath	it's toast
2020-12-26 14:31:25	CrystalMath	the fat BPB value MUST be correct
2020-12-26 14:31:25	superleaf1995	yeah fat bpb is just ignorable
2020-12-26 14:31:25	CrystalMath	no, it's not
2020-12-26 14:31:36	CrystalMath	because the cluster size refers to that sector size
2020-12-26 14:31:42	CrystalMath	not to what some bios is seeing
2020-12-26 14:31:46	superleaf1995	Different bios does not mean they will handle the same size
2020-12-26 14:31:56	superleaf1995	i.e a floppy can be 4K sectors on some weird bios
2020-12-26 14:32:07	superleaf1995	(40!)
2020-12-26 14:32:17	superleaf1995	cluster size is ok
2020-12-26 14:32:30	doug16k	bpb is where you get root dir location, number of fats, sectors per fat, sectors per cluster, bytes per sector
2020-12-26 14:32:40	CrystalMath	right
2020-12-26 14:32:42	CrystalMath	bytes per sector
2020-12-26 14:32:46	CrystalMath	it's important
2020-12-26 14:33:07	superleaf1995	the bios gives you heads and another value i dont remember
2020-12-26 14:33:10	doug16k	that's the bytes per sector that was used when formatting the device. it's not how you get the sector size right now
2020-12-26 14:33:18	superleaf1995	but yeah, handle everything as if it was 512 bytes
2020-12-26 14:33:25	superleaf1995	OR
2020-12-26 14:33:36	superleaf1995	use extensions of bios when possible and query correct size
2020-12-26 14:33:47	CrystalMath	so you think the fallback should be always 512?
2020-12-26 14:33:50	doug16k	your block layer driver didn't get the sector size long, long before anyone even thought of the idea of mounting it?
2020-12-26 14:33:52	superleaf1995	yes
2020-12-26 14:34:21	doug16k	oh this is a bios thing, right
2020-12-26 14:34:25	superleaf1995	yes
2020-12-26 14:34:27	superleaf1995	real mode
2020-12-26 14:34:37	CrystalMath	and very very old PCs
2020-12-26 14:34:40	CrystalMath	pre-LBA
2020-12-26 14:34:41	superleaf1995	you rely on bios for stuff, dont have to write own drivers unless you like to kiss SCSI
2020-12-26 14:35:25	CrystalMath	there is driver support, specifically msdos driver support
2020-12-26 14:35:35	doug16k	what's the point of learning that now though
2020-12-26 14:35:46	doug16k	I feel like most of what I know about DOS programming is garbage now
2020-12-26 14:35:53	doug16k	pointless
2020-12-26 14:35:55	CrystalMath	well i already wrote a DOS emulator once
2020-12-26 14:36:01	superleaf1995	I think its a starting point for osdev
2020-12-26 14:36:04	CrystalMath	and a full PC emulator
2020-12-26 14:36:12	CrystalMath	and i already wrote a 64-bit memory manager
2020-12-26 14:36:19	superleaf1995	then you can move to more cool arches like arm or riscv or protected x86
2020-12-26 14:36:20	CrystalMath	two even, but neither is completely done
2020-12-26 14:36:32	CrystalMath	i wrote my first protected mode x86 OS when i was 15
2020-12-26 14:36:47	doug16k	yeah I made a kernel when I was a teenager too
2020-12-26 14:36:48	CrystalMath	that was 12 years ago
2020-12-26 14:36:53	superleaf1995	you gotta love CPUID
2020-12-26 14:37:04	mrvn	can one read video/audio CDs with odd block size with the normal LBA interface or do you have to talk raw to it?
2020-12-26 14:37:04	CrystalMath	i think for that kind of stuff i require 486+
2020-12-26 14:37:30	CrystalMath	superleaf1995: but now i want to make a new DOS that will specifically focus on extremely outdated stuff
2020-12-26 14:37:37	CrystalMath	the more outdated and obscure, the better
2020-12-26 14:37:56	superleaf1995	yeah i also code stuff for dos
2020-12-26 14:38:07	superleaf1995	get ahold of bios extensiosn and other stuff
2020-12-26 14:38:18	CrystalMath	when i'm done with this, or more realistically, as soon as i'm bored with this, i will do something with m68k
2020-12-26 14:38:48	doug16k	you use MSF address (minutes:seconds:frame)
2020-12-26 14:39:21	CrystalMath	and patch int 13 to support it?
2020-12-26 14:39:22	CrystalMath	:P
2020-12-26 14:39:33	doug16k	oh sorry I was replying mrvn
2020-12-26 14:40:04	CrystalMath	but you're right, i don't care about audio CDs
2020-12-26 14:40:10	CrystalMath	i care about audio cassettes
2020-12-26 14:40:22	CrystalMath	but those don't require any specific support
2020-12-26 14:40:25	CrystalMath	:)
2020-12-26 14:40:29	superleaf1995	ah yes, PCjr time
2020-12-26 14:40:45	<--	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has quit (Quit: adu)
2020-12-26 14:40:54	CrystalMath	AFSK :)
2020-12-26 14:41:02	superleaf1995	wath
2020-12-26 14:41:03	CrystalMath	300 baud
2020-12-26 14:41:10	CrystalMath	audio frequency shift keying
2020-12-26 14:41:11	superleaf1995	ah
2020-12-26 14:41:16	superleaf1995	cassete driver
2020-12-26 14:41:21	superleaf1995	ok ok
2020-12-26 14:41:22	CrystalMath	just remembered hat
2020-12-26 14:41:24	CrystalMath	*that
2020-12-26 14:41:26	CrystalMath	i'm a bit sleepy
2020-12-26 14:41:34	CrystalMath	so i just said something as soon as i remembered it
2020-12-26 14:41:41	CrystalMath	without any context
2020-12-26 14:41:50	superleaf1995	when you interact with stuff retry it many times because old stuff tends to break
2020-12-26 14:42:07	superleaf1995	like retry 3 resets and then give up for the tape controller
2020-12-26 14:42:24	superleaf1995	(i think pcjr has a separate itnerface for tape? i dont know, but i think so)
2020-12-26 14:42:53	superleaf1995	+
2020-12-26 14:46:40	CrystalMath	i still think that if the BIOS sector size isn't the same as the FAT one, it's better to just self-destruct
2020-12-26 14:46:43	-->	no112_ (~no112@27.96.207.94) has joined #osdev
2020-12-26 14:47:12	superleaf1995	hmm
2020-12-26 14:47:22	superleaf1995	you could try to use the extensions for support
2020-12-26 14:47:28	CrystalMath	unless the cluster size must be a power of 2
2020-12-26 14:47:44	superleaf1995	i.e, check for extensions, use them if available, otherwise fallback to standard 512 bps and try to read media anyways
2020-12-26 14:47:57	CrystalMath	well there's more, actually
2020-12-26 14:48:03	CrystalMath	you forgot that diskettes have a DPT
2020-12-26 14:48:10	CrystalMath	at the INT 0x1E vector
2020-12-26 14:48:12	CrystalMath	:)
2020-12-26 14:48:18	superleaf1995	yeah
2020-12-26 14:48:24	superleaf1995	but some systemds does not support it
2020-12-26 14:48:25	CrystalMath	but hard disks don't :(
2020-12-26 14:48:29	superleaf1995	(ps/1?)
2020-12-26 14:48:38	superleaf1995	yeah you could use it for floppy disks tho
2020-12-26 14:49:23	superleaf1995	OR you could yeet the entire BIOS out and write your own drivers, reclaim the memory taken by the BIOS and support everything without relyinng on obscure extensions :P
2020-12-26 14:49:55	CrystalMath	still, some code needs to load the drivers
2020-12-26 14:50:09	CrystalMath	i can do that later
2020-12-26 14:50:12	doug16k	CrystalMath, make sure you don't screwup PIT channel 1, that's memory refresh on really old machines
2020-12-26 14:50:27	CrystalMath	i wasn't intending to
2020-12-26 14:50:52	CrystalMath	"oh what's a good place to keep the bytes per sector? perhaps i can use the PIT channel 1 reload value as scratch RAM"
2020-12-26 14:50:59	CrystalMath	:P
2020-12-26 14:51:11	superleaf1995	laughs in `mscratch` register
2020-12-26 14:52:49	doug16k	those are fun because you can leakdown test your ram on that, find out how much ram changes if you pause refresh for longer and longer intervals
2020-12-26 14:53:07	doug16k	I did that, and figured out how low a rate it could still hold values
2020-12-26 14:53:30	doug16k	the default is pretty paranoid
2020-12-26 14:54:15	doug16k	you have to hlt and do nothing during that time too, otherwise the instruction fetches will cause some refreshing
2020-12-26 14:55:18	doug16k	I wish it were that easy to control refresh now
2020-12-26 14:55:54	superleaf1995	yep
2020-12-26 15:05:10	CompanionCube	has anyone posted the submission of a new port of linux...to the n64?
2020-12-26 15:07:42	mrvn	doug16k: the default is paranoid because it has to work all the time, even when you rowhammer. You are only testing some sane case.
2020-12-26 15:07:43	doug16k	seems so: https://www.phoronix.com/scan.php?page=news_item&px=Nintendo-64-Linux-2020-Port
2020-12-26 15:07:44	bslsk05	​www.phoronix.com: It's 2020: Linux Kernel Sees New Port To The Nintendo 64 - Phoronix
2020-12-26 15:08:01	CompanionCube	doug16k: i mean *in this channel* but it seems not.
2020-12-26 15:08:06	doug16k	oh
2020-12-26 15:09:07	doug16k	apparently it's mostly almost out of memory
2020-12-26 15:12:27	mrvn	as long as it still has cheese
2020-12-26 15:12:40	<--	MDude (~MDude@71.50.47.112) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2020-12-26 15:14:21	CrystalMath	mrvn: btw, MUL can't 32-bit divide on 8086
2020-12-26 15:14:52	CrystalMath	unless you do many MULs
2020-12-26 15:14:58	CrystalMath	at which point it's worse than DIV
2020-12-26 15:15:06	mrvn	CrystalMath: sure it can, you just have to emulate it with lots of 8*8=16 muls.
2020-12-26 15:15:12	CrystalMath	yes but :P
2020-12-26 15:15:16	CrystalMath	DIV is not that much worse
2020-12-26 15:15:18	CrystalMath	it's 150 cycles
2020-12-26 15:15:25	CrystalMath	mul is 120
2020-12-26 15:15:29	mrvn	8086 has DIV?
2020-12-26 15:15:31	CrystalMath	yes
2020-12-26 15:15:35	CrystalMath	and even IDIV
2020-12-26 15:15:47	mrvn	thought that came later when you had an FPU.
2020-12-26 15:15:58	CrystalMath	no this is an integer operation
2020-12-26 15:16:02	mrvn	so?
2020-12-26 15:16:12	CrystalMath	it didn't require an FPU
2020-12-26 15:16:15	CrystalMath	not even on a 386
2020-12-26 15:16:18	CrystalMath	it never required an FPU
2020-12-26 15:16:19	doug16k	8086 could mul and imul and div and idiv
2020-12-26 15:16:23	doug16k	from day 1
2020-12-26 15:16:36	CrystalMath	but it couldn't shift by more than 1 at once
2020-12-26 15:16:38	CrystalMath	:P
2020-12-26 15:16:43	mrvn	some integer operation on cpus borrow the mantisse part of the FPU to do their work.
2020-12-26 15:16:50	mrvn	or vice versa.
2020-12-26 15:17:00	superleaf1995	32bit support on 8086 is astronomically limited
2020-12-26 15:17:10	superleaf1995	oh oops
2020-12-26 15:17:15	CrystalMath	yes but imagine you need to do 64-bit division
2020-12-26 15:17:16	doug16k	CrystalMath, you can shift with cl count
2020-12-26 15:17:17	CrystalMath	:P
2020-12-26 15:17:22	mrvn	CrystalMath: could it shift at all or just add the register to itself?
2020-12-26 15:17:23	CrystalMath	doug16k: that takes CL + 8 cycles
2020-12-26 15:17:26	doug16k	can't multiword shift though
2020-12-26 15:17:31	superleaf1995	you can do math per chunks
2020-12-26 15:17:34	superleaf1995	like gmp
2020-12-26 15:17:36	doug16k	CrystalMath, yeah so?
2020-12-26 15:17:40	superleaf1995	and have infinite(tm) math
2020-12-26 15:17:41	CrystalMath	doug16k: the chip itself cannot shift by more than 1 in a cycle
2020-12-26 15:17:45	CrystalMath	that's what i meant
2020-12-26 15:17:48	CrystalMath	no barrel shifter
2020-12-26 15:17:57	doug16k	everything takes cycles because it is so starved for insn fetch bandwidth that insns might as well use the cycles
2020-12-26 15:18:02	mrvn	barrel shifter are a pain to build. too many crossings.
2020-12-26 15:18:28	CrystalMath	meh we did it on an FPGA
2020-12-26 15:18:38	CrystalMath	back in college
2020-12-26 15:18:45	CrystalMath	it was an early exercise
2020-12-26 15:19:53	mrvn	I'm still trying to do a 16bit barrel shifter (lsr, lsl, asr) with 74xxx chips on a 10cm x 10cm board but I can't quite fir the routing.
2020-12-26 15:20:43	mrvn	2 layers with through holes.
2020-12-26 15:21:43	doug16k	I love routing pcbs
2020-12-26 15:21:48	doug16k	most fun puzzle game ever
2020-12-26 15:22:14	<--	srjek|home (~srjek@2601:249:600:1a:2511:865:65e2:1cd) has quit (Ping timeout: 272 seconds)
2020-12-26 15:23:11	doug16k	you have a netlist and using CAD pcb routing software right?
2020-12-26 15:23:15	mrvn	doug16k: each chip has 4 multiplexer. I think if I switch around which mux is used for what I can reduce the number of vias and shorten the traces so it still fits on a 10x10 board. But it's realy tight.
2020-12-26 15:23:27	mrvn	doug16k: eagle
2020-12-26 15:26:15	superleaf1995	hmm
2020-12-26 15:26:17	doug16k	yeah, sometimes the routing can feed back into revising the original schematic and make the route drastically better
2020-12-26 15:27:00	<--	CrystalMath (~coderain@reactos/developer/theflash) has quit (Quit: May we live long and die out | http://vhemt.org/)
2020-12-26 15:27:57	mrvn	doug16k: one big problem is the first and last row of multiplexers for the reveral of all bits (switch between left and right shift). The inputs are all 16 bit straight and all 16 bits reversed. That's too many crossings.
2020-12-26 15:29:06	mrvn	The middle rows only have 8, 4, 2 and 1 crossing which is much simpler
2020-12-26 15:30:12	-->	tiggster79 (~stephen@pa49-197-232-100.pa.qld.optusnet.com.au) has joined #osdev
2020-12-26 15:31:41	klys	https://www.ebay.com/sch/i.html?_from=R40&_nkw=PLCC+44+TO+DIP+44&_sacat=0&LH_BIN=1&_sop=15  https://www.digikey.com/en/products/filter/embedded-cplds-complex-programmable-logic-devices/695?s=N4IgjCBcpgbFoDGUBmBDANgZwKYBoQB7KAbRACZzYwAOAVhAMroE4wAGRi89gZnIhMeVAOwgAugQAOAFyggAyjIBOASwB2AcxABfAmHJsEIZJHTZ8RUt3YAWOoJv3yXSnbq3XVPvEkhZ8kpqWrr6vLwsxqbmuATEkGQ8NLAskUzsqbYQfgGQiioa2nrgLDSR0CaomLFWCSCcOXJ5QYW6xS51iFIYACYSOkA
2020-12-26 15:31:42	bslsk05	​www.ebay.com: PLCC 44 TO DIP 44 | eBay
2020-12-26 15:31:44	bslsk05	​www.digikey.com: Integrated Circuits (ICs) | Embedded - CPLDs (Complex Programmable Logic Devices) | DigiKey
2020-12-26 15:31:50	mrvn	doug16k: One thing I have considered but not really thought through is messing with the data bus. Maybe rearanging which trace on the bus is which bit could reduce the routing for the barrel shifter.
2020-12-26 15:33:14	mrvn	klys: geist and me already ordered some of those
2020-12-26 15:33:20	klys	cool
2020-12-26 15:33:33	mrvn	but that's cheating.
2020-12-26 15:33:40	klys	:)
2020-12-26 15:34:23	klys	is using a larger board cheating?
2020-12-26 15:34:55	mrvn	klys: Just like I searched a lot to create https://electronics.stackexchange.com/a/369736/121365 instead of using a premade chip.
2020-12-26 15:34:57	bslsk05	​electronics.stackexchange.com: 7segmentdisplay - 7 segment binary to hex - Electrical Engineering Stack Exchange
2020-12-26 15:35:22	mrvn	klys: a) the free eagle version I have doesn't allow biger. b) above 10x10 costs a lot more.
2020-12-26 15:35:53	klys	kicad?
2020-12-26 15:36:26	mrvn	klys: still too expensive.
2020-12-26 15:37:04	klys	what kind of algorithm do they use?
2020-12-26 15:37:15	mrvn	klys: who?
2020-12-26 15:37:22	klys	pcb cad processing
2020-12-26 15:37:35	mrvn	lots and trade secrets
2020-12-26 15:37:39	doug16k	not allowed to use QFN or anything? has to be DIP?
2020-12-26 15:37:56	-->	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has joined #osdev
2020-12-26 15:37:58	doug16k	QFP
2020-12-26 15:38:20	mrvn	doug16k: All the chips I have are for breadboards and I want to use the same for boards too
2020-12-26 15:38:48	klys	is this for a 4-bit barrell shifter or an 8-bit or larger?
2020-12-26 15:39:00	mrvn	doug16k: and I want something I can solder myself.
2020-12-26 15:39:07	mrvn	klys: 16bit.
2020-12-26 15:39:13	klys	whoosh
2020-12-26 15:39:17	doug16k	smd is easy though
2020-12-26 15:39:30	doug16k	you are getting prototype service pcb with solder mask right?
2020-12-26 15:39:38	mrvn	no. mask is extra
2020-12-26 15:39:46	doug16k	oh come on, get the mask
2020-12-26 15:39:54	doug16k	it makes life so much easier
2020-12-26 15:40:05	mrvn	mask for through hole?
2020-12-26 15:40:31	klys	good question
2020-12-26 15:40:46	doug16k	did you say you were getting 10"x10" 2-layer pcb?
2020-12-26 15:41:05	mrvn	doug16k: 10cm x 10cm single layer double sided.
2020-12-26 15:41:15	klys	that's why it's still in the computer
2020-12-26 15:41:26	mrvn	doug16k: That's ~12EUR for 5-6 boards last I checked.
2020-12-26 15:42:28	mrvn	5cm x 5cm isn't cheaper but larger gets expensive.
2020-12-26 15:43:22	klys	are there places that talk about such algorithms?
2020-12-26 15:43:36	geist	mrvn: re: eagle, you'll want to give up on it
2020-12-26 15:43:45	geist	its dead, all the hobby stuff has switched to kicad
2020-12-26 15:44:07	mrvn	geist: does it do any better routing?
2020-12-26 15:44:20	geist	autodesk killed eagle basically, so no point using it
2020-12-26 15:44:36	geist	actually i think so now. one thing that eagle never got IIRC was push routing, and i think kicad eventually did
2020-12-26 15:44:41	klys	I want to see a hobby project that looks like eagle cad yet simpler and perhaps more active
2020-12-26 15:44:47	mrvn	yeah, their monthly subscription totally killed it. I still have the last version before that.
2020-12-26 15:44:47	doug16k	jclpcb says $2 for 5 10x10cm boards
2020-12-26 15:45:07	geist	yah and secondarily i was going to point out that jclpcb is great
2020-12-26 15:45:08	mrvn	doug16k: wow, that'c gotten cheaper since I last ordered.
2020-12-26 15:45:11	geist	and cheap as heck
2020-12-26 15:45:14	superleaf1995	oh nice
2020-12-26 15:45:16	superleaf1995	that is cheap
2020-12-26 15:45:19	geist	right... it's kinda a game changer
2020-12-26 15:45:48	mrvn	Damns, 4 layer boards for 2$ for x-mas and I'm not ready.
2020-12-26 15:46:08	doug16k	oh $7 for 4-layer
2020-12-26 15:46:21	geist	yah 4 layer is definitely pricier no matter how you do it
2020-12-26 15:46:27	geist	but still obtainable
2020-12-26 15:46:36	mrvn	doug16k: 2$ as long as it's still the 25th in US? or wherever they are.
2020-12-26 15:47:08	geist	friend of mine has used them a few times and predictably for smaller batches you'll pay more for DHL or whatnot than the boards themselves
2020-12-26 15:47:15	doug16k	imagine you told someone in 1992 that you can get 5 10x10cm plated through, drilled, soldermasked, silkscreened PCB for $7? they would think maybe you were having a stroke or something
2020-12-26 15:47:18	geist	but i think he had very little other complaints
2020-12-26 15:47:52	mrvn	doug16k: did they even have custom made 4 layer boards in 1992?
2020-12-26 15:47:52	geist	turnaround for like 2 days from now is still of course exponentially more expensive, at least in the US
2020-12-26 15:48:01	doug16k	mrvn, for a fortune yeah
2020-12-26 15:48:16	doug16k	they probably setup a panel just for you and nail you with entire cost
2020-12-26 15:48:22	doug16k	set up*
2020-12-26 15:48:30	geist	basically yah
2020-12-26 15:48:38	-->	lucid_0x80 (~lucid_0x8@188.253.226.172) has joined #osdev
2020-12-26 15:49:34	mrvn	doug16k: back then they had to do expensive masks for everything. Nowadays I think they skip a lot of that and just print directly onto the board.
2020-12-26 15:50:01	doug16k	this will be the next one: http://www.icproto.com/cap-proto.html
2020-12-26 15:50:01	bslsk05	​www.icproto.com: Quick Turn IC Prototyping | Semiconductor Prototyping | Fast IC Assembly | Quik-Pak
2020-12-26 15:51:14	superleaf1995	sonic speed shipments
2020-12-26 15:51:19	geist	https://youtu.be/ljOoGyCso8s has a little random video where you can scrub around and see some of the insides of the jclpcb thing
2020-12-26 15:51:25	klys	engr fee: 4.00 + large size 17.40 + board 35.40 = 56.80 for 5 1 ft. square 2-layer pcb's c/o jlcpcb,
2020-12-26 15:51:46	klys	s/lc/cl/
2020-12-26 15:52:01	mrvn	doug16k: what's the price there?
2020-12-26 15:52:37	geist	also iirc you can also get jclpcb to install some components for you, with a fee
2020-12-26 15:53:11	mrvn	geist: The problem I usualy run into there is that they don't have 74xx chips.
2020-12-26 15:53:27	geist	right. but then 74xx are eas to solder yourself
2020-12-26 15:53:35	geist	i'd use it if i could for like a BGA part of something
2020-12-26 15:53:55	mrvn	I could maybe make all the condensators to stabilize power for each chip a SMD and get them soldered on.
2020-12-26 15:54:00	geist	also SMT 74xxes maybe, but if you want you can learn how to do it
2020-12-26 15:54:33	<--	janemba (~janemba@unaffiliated/janemba) has quit (Quit: WeeChat 3.1-dev)
2020-12-26 15:54:53	doug16k	they are just beginning to apply the idea to ICs, they call it a "multi-project wafer" where they make one die with multiple designs and divide out costs
2020-12-26 15:55:15	mrvn	geist: try if they can mount you 4 74181 and a 74182.
2020-12-26 15:55:26	-->	janemba (~janemba@unaffiliated/janemba) has joined #osdev
2020-12-26 15:56:12	doug16k	when I priced it it was hundreds of thousands of dollars to get a small custom prototype die made, 72nm iirc
2020-12-26 15:56:12	mrvn	doug16k: having only one chip per wafer sure cuts down the cost. But you still need a bunch of wafers to spread the cost for the masks I bet.
2020-12-26 15:57:16	mrvn	doug16k: I bet it will be a long time till fpga for IC prototyping stops beeing the cheapest.
2020-12-26 15:57:21	doug16k	now they are starting to apply the idea that they use for PCBs and making "multi-project wafers" where they put multiple things on one die
2020-12-26 15:57:26	geist	doug16k: unrelate but ther'es a lull in the conversatoin. i dunno if you caught that i managed to reformat one of my nvmes as 4k sectors
2020-12-26 15:57:45	geist	works like a champ, just needed one with firmware that would allow it. in this case a western digital blue
2020-12-26 15:58:08	doug16k	nice
2020-12-26 15:58:13	<--	adu (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) has quit (Quit: adu)
2020-12-26 15:58:29	mrvn	Digit: giving you more ECC than 512byte blocks?
2020-12-26 15:58:32	geist	used the 'nvme' linux command, if you hvane't fiddled with it
2020-12-26 15:58:35	mrvn	geist: ^^
2020-12-26 15:58:51	geist	i dunno. it's just one of the formats the drive claims to have
2020-12-26 15:59:42	doug16k	it would be pretty bad if it didn't provide the same amount of ecc
2020-12-26 15:59:44	geist	there's a whole mechanism in nvme to report multiple LBA formats and rank them according to preference
2020-12-26 15:59:59	geist	so in this case it says it has 512 and 4k, and the 4k is preferred, but of course it comes preformatted in 512
2020-12-26 15:59:59	doug16k	for flash they can't afford to screw around - it needs the ecc
2020-12-26 16:00:36	mrvn	doug16k: With small chips you probably had 1000 chips on a wafer. If you get enough customers you now get 100 customes on a wafer and then do 1000 wafers with the mask at 1/1000th the price of the mask for each,.
2020-12-26 16:00:47	mrvn	s/100/1000/
2020-12-26 16:00:58	geist	presumably the low level format isn't really much different but it changes the amount of wear level redirection tables
2020-12-26 16:01:31	mrvn	geist: 8 times more blocks if it really handles 512 byte blocks.
2020-12-26 16:02:11	mrvn	geist: can you still boot from it with 4k blocks?
2020-12-26 16:02:19	geist	presumbaly, dont see why not
2020-12-26 16:02:32	mrvn	because bios can't handle 4k blocks.
2020-12-26 16:02:43	doug16k	what bios
2020-12-26 16:02:50	mrvn	pretty much every bios
2020-12-26 16:02:52	doug16k	it'd probably be uefi
2020-12-26 16:03:09	geist	it happens to be in a riscv machine, so that particular test isnt happening ye
2020-12-26 16:03:15	doug16k	ah
2020-12-26 16:03:24	mrvn	geist: does linux now show 4k logical and 4k physical blocks?
2020-12-26 16:03:42	geist	but, next time i get a chance i'll try to do that. main reaosn it hsan't come up is i have generaly been using samsung nvmes and for whatever reason i havne't encountered a samsung nve that lets you use 4k sectors
2020-12-26 16:03:48	geist	mrvn: yes
2020-12-26 16:03:57	geist	and the gpt table has that in it, etc etc
2020-12-26 16:04:01	mrvn	geist: and before that is was 512/512 or 512/4k?
2020-12-26 16:04:22	geist	i think 512/4k
2020-12-26 16:04:37	<--	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has quit (Quit: WeeChat 3.0)
2020-12-26 16:04:51	-->	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has joined #osdev
2020-12-26 16:04:58	mrvn	geist: then it shouldn't change anything in the drive. 512/4k means if you write 512 byte it reads 4k, modifies the 512bytes and writes it back.
2020-12-26 16:05:06	doug16k	it only changed the interpretation of LBA and sector count fields
2020-12-26 16:05:23	doug16k	in command interface
2020-12-26 16:05:27	mrvn	just changed the sector/size -> chip calculations
2020-12-26 16:05:33	geist	possible
2020-12-26 16:05:40	geist	though i dunno if it was 512/4k or not
2020-12-26 16:05:51	<--	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has quit (Remote host closed the connection)
2020-12-26 16:05:53	geist	but anyway, of course it doesn't seem to really change anything, but just saying you can do it
2020-12-26 16:06:00	geist	as in i've now personally seen it i the 'wild'
2020-12-26 16:06:14	-->	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has joined #osdev
2020-12-26 16:06:42	mrvn	geist: if it just changed the address calculations then I'm not that surprised. thats a few lines in the firmware to change. Going from 512/512 to 4k/4k would be a huge change.
2020-12-26 16:07:13	mrvn	did you loose the data on change?
2020-12-26 16:07:36	geist	yes
2020-12-26 16:07:56	geist	you must do a complete reformat. i just takes a second, but it by definition wipes out the translation table
2020-12-26 16:08:00	mrvn	hmm, 512/4k -> 4k/4k could work without data loss.
2020-12-26 16:08:28	geist	maybe it wasnt 512/4k. honeslty i dont remember
2020-12-26 16:08:40	mrvn	geist: sounds more and more likely. Any speed changes?
2020-12-26 16:08:45	doug16k	what is the command to show nvme info?
2020-12-26 16:08:45	geist	not that i can tell
2020-12-26 16:09:05	doug16k	id-ns should be it right?
2020-12-26 16:09:14	klys	geist: dd if=/dev/nvmedisk of=file.stp bs=512 count=1; xxd -g 1 -seek 0x1c5 -l 8 file.stp
2020-12-26 16:09:14	geist	somehting like 'nvme id-ns' and then something like 'nvme info-ns'
2020-12-26 16:09:37	geist	there was a switch in there that says 'return human readable data' in the info one
2020-12-26 16:09:41	geist	which adds some additional info
2020-12-26 16:10:02	<--	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has quit (Remote host closed the connection)
2020-12-26 16:10:16	-->	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has joined #osdev
2020-12-26 16:10:32	geist	klys: it's complicated. its on a riscv machine. i tried it and it seems to get around 80MB/sec capped either way
2020-12-26 16:10:39	geist	point is the nvme aint the bottleneck :)
2020-12-26 16:10:45	klys	geist, size in sectors?
2020-12-26 16:11:02	geist	this precisely why i bought at cheapo ($45) nvme drive for this. i just wanted a nvme, not a good one
2020-12-26 16:11:09	geist	but was pleased to see that it could do 4k sectors
2020-12-26 16:11:37	klys	geist, the above command will tell me the size in sectors reported by protective mbr
2020-12-26 16:11:56	ZombieChicken	what advantage is there to 4k blocks on flash? I'm kind of in-and-out, so I think I missed that part
2020-12-26 16:12:14	geist	i can do it in a bit. machine isn't booted right now
2020-12-26 16:12:20	klys	kk
2020-12-26 16:12:31	geist	and yeah cna't test booting on it in bios because it's not x86
2020-12-26 16:12:39	klys	right ofc
2020-12-26 16:13:41	geist	ZombieChicken: well that's kinda it to be honest. for somethig lke nvme that has a very powerful and flexible interface, not a lot
2020-12-26 16:13:57	geist	it's obviously helpful if the drive is faster, and potentially it is, but it doesn't really change the game
2020-12-26 16:14:06	geist	*except* from an osdev point of view you should be prepared to handle it
2020-12-26 16:14:43	ZombieChicken	so not much of a diff, other than giving you something new to test against?
2020-12-26 16:16:54	doug16k	it doesn't make any real difference other than making you need a full 64-bit LBA value with a smaller drive than if the sectors were larger.
2020-12-26 16:17:39	doug16k	if you support 64-bit lba, then you could withstand 1-byte sectors and hardly even feel any difference
2020-12-26 16:18:06	geist	doug16k: does nvme always do full 64bit lba in its transfer descriptors?
2020-12-26 16:18:06	ZombieChicken	k
2020-12-26 16:18:20	doug16k	it can't cross 64KB boundaries right?
2020-12-26 16:18:34	doug16k	oh sorry I see what you mean
2020-12-26 16:18:42	doug16k	let me look
2020-12-26 16:19:10	geist	curious if it is like SCSI in that it has N different transfer descriptors based on smaller ranges of your addressing
2020-12-26 16:19:11	doug16k	full thing is there
2020-12-26 16:19:57	doug16k	https://github.com/doug65536/dgos/blob/master/kernel/device/nvme/nvme.cc#L107
2020-12-26 16:19:59	bslsk05	​github.com: dgos/nvme.cc at master · doug65536/dgos · GitHub
2020-12-26 16:20:15	doug16k	let me check spec. I doubt I'd have slapped it all there without mask if it weren't all that
2020-12-26 16:20:36	geist	yah that makes sense
2020-12-26 16:20:41	geist	i figured it out, just curious
2020-12-26 16:21:33	geist	well i figured it did, not figured it out
2020-12-26 16:22:13	doug16k	yeah it is 63:0 Starting LBA
2020-12-26 16:22:30	doug16k	section 6.9 figure 170
2020-12-26 16:23:28	doug16k	they also spell out that command dword 10 is low half, command dword 11 is high half
2020-12-26 16:26:41	geist	which means you could technically blat it out on a LE machine
2020-12-26 16:26:45	geist	as a single 64 bit write
2020-12-26 16:26:52	doug16k	yes
2020-12-26 16:27:09	doug16k	I do what the spec says if I can
2020-12-26 16:27:42	doug16k	as long as it doesn't say to do UB or something
2020-12-26 16:28:19	doug16k	I wouldn't be completely comfortable reinterpreting that "dword 10" as a qword
2020-12-26 16:28:33	doug16k	even though I "know" it would be aligned
2020-12-26 16:28:47	geist	actually i bet the compiler can do that anyway
2020-12-26 16:29:07	geist	if it's not volatile and whatnot i think it can safely write combine multiple fieldslike that in any order
2020-12-26 16:29:09	doug16k	yeah, most likely
2020-12-26 16:29:19	geist	so doing what you're doing makes the most sense anyway
2020-12-26 16:33:07	doug16k	same thing in my realmode->pmode->longmode->pmode->pmode16->rmode code. I could cheat right past some of it, but the manual says to do it gradually
2020-12-26 16:33:38	doug16k	so I do it gradually
2020-12-26 16:36:07	doug16k	some hardware will implement it so it doesn't even work right when you deviate from the initialization procedure in the spec
2020-12-26 16:37:02	doug16k	if you go off their script at the wrong point the state machine is hangs
2020-12-26 16:41:57	mrvn	geist: wouldn't the cpu caches write combine the write?
2020-12-26 16:42:02	doug16k	on the topic of funny disk formats, ever used those formats with extra metadata storage you could use for databases or filesystems or something?
2020-12-26 16:42:25	mrvn	doug16k: only write intent bitmaps for raid
2020-12-26 16:42:44	mrvn	doug16k: or lustre which has servers for data and metadata
2020-12-26 16:44:58	doug16k	geist, is there SGL support on that cheap nvme? that would be funny
2020-12-26 16:45:13	doug16k	scatter-gather list
2020-12-26 16:46:15	doug16k	everything is PRP only afaik
2020-12-26 16:47:53	geist	well it's not uber cheap. it's a standard sandisk nvme controller
2020-12-26 16:47:59	geist	western digial blue are pretty good
2020-12-26 16:48:03	doug16k	right I mostly meant non-high-end
2020-12-26 16:48:07	geist	but it's just not high end
2020-12-26 16:48:31	doug16k	you said cheap so I used the noun for consistency
2020-12-26 16:48:43	doug16k	cheap nvme I mean
2020-12-26 16:49:02	doug16k	I think
2020-12-26 16:50:00	doug16k	I think it would be funny if that had 4k sector format and SGL and is not high end and my samsung pro nvme is 512 PRP only
2020-12-26 16:50:27	geist	hmm, where would you notice the SGL, is it called out in the nvme info stuff?
2020-12-26 16:50:34	doug16k	capabilities
2020-12-26 16:50:45	doug16k	not sure now the `nvme` command shows it
2020-12-26 16:51:33	doug16k	it should mention either "scatter" or "SGL" at least
2020-12-26 16:52:05	doug16k	if it supported it
2020-12-26 16:52:42	mrvn	doug16k: isn't it using the SGL to bunch 4 512byte writes into a 4k block?
2020-12-26 16:53:21	geist	no SGL no
2020-12-26 16:54:20	geist	nvme id-ctrl -H is what you generally want
2020-12-26 16:55:29	doug16k	on PRP, the starting address can have an offset, but it must begin at offset 0 of all of the subsequent pages in the range
2020-12-26 16:55:39	doug16k	SGL has no such restriction. scatter to whatever in pieces
2020-12-26 16:55:58	-->	pitust (~pitust@37.228.231.89) has joined #osdev
2020-12-26 17:01:14	doug16k	SGL means be more like a nice NIC and not like a clunky block device controller
2020-12-26 17:02:18	geist	sdhci has somthing like that too iirc
2020-12-26 17:02:24	doug16k	nice NIC can assemble a frame from fragments
2020-12-26 17:02:28	geist	two different dma modes and nothig really implements the more powerful version
2020-12-26 17:04:13	doug16k	probably because PRP is good enough when you are already prepared for, and expecting, some form of page alignment limitations
2020-12-26 17:05:19	doug16k	you could squeeze out some zero-copy with SGLs though, if you put your mind to it
2020-12-26 17:05:35	doug16k	at filesystem level
2020-12-26 17:05:57	doug16k	pointless if most block devices can't do it though
2020-12-26 17:06:07	geist	maybe SGL is more like for some one byte aligned memory device or something
2020-12-26 17:07:21	<--	ZombieChicken (~weechat@gateway/tor-sasl/forgottenwizard) has quit (Quit: WeeChat 3.0)
2020-12-26 17:08:48	klange	I finally sat down and actually started coding while reading through Crafting Interpreters's latter half.
2020-12-26 17:09:15	klange	Well on my way to having my own little knock-off Python-esque interpreter to embed in stuff.
2020-12-26 17:09:27	klange	Probably should have paid more attention in my compilers class back in uni.
2020-12-26 17:09:34	doug16k	instead of requiring you to always use the rest of some starting page, and always start at beginning of next page, you can say, put 80 bytes here, and put 150 bytes here, and put 5000 bytes here
2020-12-26 17:10:02	doug16k	up to 16MB-1 at a time
2020-12-26 17:13:15	<--	Goplat (~Goplat@reactos/developer/Goplat) has quit (Remote host closed the connection)
2020-12-26 17:18:27	mrvn	-1? seriously? Come on, size 0 should mean 16MB.
2020-12-26 17:21:13	geist	a lot of nvme is optimized out the wazoo. i wouldn't be urprised if there wasn't a contingent that says the -1 is extra overhead
2020-12-26 17:21:27	geist	or test for wrap
2020-12-26 17:22:28	mrvn	does it do 1 byte granularity? blocks? PCIe bus width?
2020-12-26 17:23:10	<--	Xark (~Xark@unaffiliated/xark) has quit (Ping timeout: 265 seconds)
2020-12-26 17:28:11	-->	Xark (~Xark@unaffiliated/xark) has joined #osdev
2020-12-26 17:41:41	<--	sprocklem (~sprocklem@unaffiliated/sprocklem) has quit (Ping timeout: 272 seconds)
2020-12-26 17:44:02	-->	GeDaMo (~GeDaMo@unaffiliated/gedamo) has joined #osdev
2020-12-26 17:45:45	<--	gioyik__ (~gioyik@186.112.107.251) has quit (Quit: WeeChat 3.0)
2020-12-26 17:57:35	<--	Mikaku (~Mikaku@pdpc/supporter/active/mikaku) has quit (Quit: server maintenance ...)
2020-12-26 18:04:28	<--	superleaf1995 (bdb3c8ca@gateway/web/cgi-irc/kiwiirc.com/ip.189.179.200.202) has quit (Quit: Connection closed)
2020-12-26 18:04:39	-->	Mikaku (~Mikaku@pdpc/supporter/active/mikaku) has joined #osdev
2020-12-26 18:28:55	doug16k	mrvn,  There is no alignment requirement for the data buffer. An SGL contains one or more SGL segments. The total length of the Data Block and Bit Bucket descriptors in an SGL shall be equal to or exceed the amount of data required by the number of logical blocks transferred.
2020-12-26 18:29:05	doug16k	^ spec section 4.4
2020-12-26 18:33:25	-->	sangoma (~zeus@154.227.60.28) has joined #osdev
2020-12-26 18:36:13	doug16k	0 means transfer no data
2020-12-26 18:36:46	doug16k	you can also have "bit bucket" descriptors that throw away so much data instead of transferring it by DMA
2020-12-26 18:36:49	geist	yah i thin kthat's actually value
2020-12-26 18:37:14	geist	right. basically lets you read say LBA 0, 2, 3, 4 in a single transction by skipping 1 in the dma descriptor right?
2020-12-26 18:37:21	doug16k	yeah
2020-12-26 18:37:36	geist	i was gonna say i think there was some reason why 0 is valid in nvme, but i didn't know for sure
2020-12-26 18:38:27	doug16k	they have a length too though. I thought it is so you could have a 0 in there and not have to shift everything up and close the gap
2020-12-26 18:38:47	doug16k	just leave the descriptor there, 0 length
2020-12-26 18:39:04	geist	yah nvme is one of those specs that's especially clever once you grok it
2020-12-26 18:39:41	doug16k	I like it
2020-12-26 18:40:36	geist	side note: re the LBA format. if your device supports multiple logical runs presumably they can be independently formatted
2020-12-26 18:40:46	geist	so i guess yo ucould hvae a 512 byte boot drive
2020-12-26 18:40:48	doug16k	the namespaces? yeah
2020-12-26 18:40:55	geist	have fun bios dealing with multiple namespaces though
2020-12-26 18:41:08	doug16k	I support them
2020-12-26 18:41:09	geist	also havne't checked to see if consumer devices bother suppotring namespaces. will piddle with this one in a bit
2020-12-26 18:41:37	geist	i'm guessing qemu lets you dial up these things at least though
2020-12-26 18:46:11	doug16k	you do it with commands. I wonder how it could represent that with a disk image
2020-12-26 18:47:00	doug16k	maybe there is a way to do it on the command line, I don't see anything in -device nvme,help though
2020-12-26 18:47:31	geist	yah i wonder if its one of those things where you have to create a bus and controller and then attach namespaces to it
2020-12-26 18:47:40	geist	the way yo uwould if you're doing SCSI for example
2020-12-26 18:47:48	doug16k	I should try to get multiple namespace emulated though, so I can test my enumerating and mounting with actually more than one there
2020-12-26 18:48:44	doug16k	I do try to handle it pretty elaborately though
2020-12-26 18:49:23	geist	do each namespace get pretty much a top level queue and whatnot, or is it more freeform?
2020-12-26 18:49:32	geist	ie, any given queue can transfer stuff for any namespace?
2020-12-26 18:49:46	geist	or maybe a combination, since you can i think do virtualizatoin stuff with namespace
2020-12-26 18:53:20	geist	i could see it just being an id associated with each transfer, but then maybe some way to restrict it per queue so you can map a queue into a virtual machine?
2020-12-26 18:54:34	geist	though maybe the virtualization feature shows up differenlty, with some sort of published separate function id thats limited to particular namespaces
2020-12-26 18:54:44	geist	like 'take namespace 2 and 3 and make a new PCI function for this'
2020-12-26 18:56:00	doug16k	you tag commands with namespace number
2020-12-26 18:57:03	doug16k	they can be different sector format - like one of those extra metadata formats
2020-12-26 18:57:36	doug16k	I think they are for that too yeah - idk anything about using it on some big san
2020-12-26 18:59:51	geist	yah i'd assume it'd be a feature of enterprise stuff
2020-12-26 19:00:04	geist	also woul dhave to be tagged under a different iommu context to work for virtualization anyway
2020-12-26 19:00:11	geist	so probably would have to virtualize it at the PCI level like that
2020-12-26 19:01:38	geist	that eminds me, i should write some code to sniff out some of the SMMU stuff on qemu
2020-12-26 19:01:51	geist	iirc qemu 5 added SMMU emulation now. that's ARM's IOMMU spec
2020-12-26 19:10:59	<--	janemba (~janemba@unaffiliated/janemba) has quit (Ping timeout: 272 seconds)
2020-12-26 19:30:52	<--	rorx (~rorx@tserver.truestep.com) has quit (Ping timeout: 268 seconds)
2020-12-26 19:39:44	--	lucid_0x80 is now known as suskun
2020-12-26 19:46:11	doug16k	yes. there is a concept of VFs (virtual functions) with SR-IOV
2020-12-26 19:46:42	doug16k	each virtual function can have one or more namespaces attached
2020-12-26 19:46:48	doug16k	for pass thru
2020-12-26 19:47:14	doug16k	kick ass ones can even share a namespace across VFs
2020-12-26 19:52:55	doug16k	I can do that with my i350-T4 quad port gigabit NIC. it even makes SR-IOV light up in my bios and I can enable it. not sure what to do exactly, to forward an individual function
2020-12-26 19:53:49	doug16k	oh reminds me, I can enable full time memory encryption on my 3950x
2020-12-26 19:54:10	doug16k	I compared mbw and it's about 1%
2020-12-26 19:57:25	doug16k	that means approximately half the bits in my ram are ones, doesn't it?
2020-12-26 19:58:24	doug16k	having full memory encryption on I mean
2020-12-26 19:59:35	<--	sangoma (~zeus@154.227.60.28) has quit (Ping timeout: 240 seconds)
2020-12-26 20:01:05	doug16k	I wonder if that could have a miniscule beneficial or detrimental effect to dram
2020-12-26 20:01:41	doug16k	on average bus drivers would drive only half the bits to one?
2020-12-26 20:05:47	-->	sortie (~sortie@D470948F.rev.sefiber.dk) has joined #osdev
2020-12-26 20:09:41	mrvn	it should toggle as many 0 bits to 1 as it toggles 1 bits to 0.
2020-12-26 20:10:19	mrvn	Only places I think it should make a relevant difference is when you transmit blocks of zero.
2020-12-26 20:10:52	mrvn	(or ones, e.g. when your screen background is white)
2020-12-26 20:10:57	doug16k	to it will sprinke ones into blocks of zeros and it will sprinkle zeros into blocks of ones, so about half are 1
2020-12-26 20:12:39	mrvn	you could have data with 0 and 1 bits that then ends up all 0.
2020-12-26 20:13:30	doug16k	of course
2020-12-26 20:13:50	doug16k	but that would have a chance 1/keysize
2020-12-26 20:13:53	mrvn	just unlikely while unencrypted big blocks of 0 or 1 are quite likely.
2020-12-26 20:14:08	doug16k	er, 1/2^keybits
2020-12-26 20:14:09	-->	diwyjukj (~XJOaeLHx~@gateway/tor-sasl/spareproject) has joined #osdev
2020-12-26 20:14:49	doug16k	wait not key
2020-12-26 20:14:55	doug16k	it would be by block size
2020-12-26 20:15:14	doug16k	the odds of that whole block in the symmetric algo being same as data
2020-12-26 20:16:13	doug16k	if you ran a spectrum analysis of my ram contents, it would be evenly distributed across all frequencies, right?
2020-12-26 20:16:18	mrvn	is that key static or does it reencrypt ram every time it does a refresh?
2020-12-26 20:16:38	doug16k	it's per boot I think
2020-12-26 20:17:22	doug16k	when it stores to ram it encrypts, when it comes back into the cpu it decrypts
2020-12-26 20:17:41	doug16k	dma will get encrypted/decrypted transparently
2020-12-26 20:18:11	mrvn	What's the ides behind that? Someone freezing the ram and steeling it?
2020-12-26 20:18:30	doug16k	yes, if you rip out the memory sticks and put them in a refresher, the majority of the contents are fine
2020-12-26 20:18:46	doug16k	most ram lasts over ten seconds with no refresh
2020-12-26 20:18:52	doug16k	in a given stick
2020-12-26 20:19:11	doug16k	it's the worst cells that leak like a sieve that need the 64ms
2020-12-26 20:19:29	-->	Tazmainian (~Tazmain@unaffiliated/tazmain) has joined #osdev
2020-12-26 20:19:40	mrvn	sure. But if you can do that you can do so many other things.
2020-12-26 20:19:54	doug16k	but that can be sooo good
2020-12-26 20:21:11	mrvn	.oO(plug in a firewire device and just DMA the whole ram content to a flash drive.
2020-12-26 20:21:14	mrvn	)
2020-12-26 20:21:53	doug16k	on my machine the key changed and it's all garbage
2020-12-26 20:22:21	mrvn	when you plug in a firewire device?
2020-12-26 20:22:26	doug16k	no when you reboot
2020-12-26 20:22:36	mrvn	sure. don't do that
2020-12-26 20:22:37	doug16k	you mean cold boot attack?
2020-12-26 20:22:49	mrvn	no, hot plug
2020-12-26 20:23:08	doug16k	if you have that much permission then sure
2020-12-26 20:23:13	doug16k	you put the private key in probably
2020-12-26 20:23:40	mrvn	no need for permission. iirc firewire has DMA access, period.
2020-12-26 20:24:03	doug16k	I mean sneaking in through a pitiful card-access security thing into some office and doing a thing to locked workstation
2020-12-26 20:24:24	mrvn	well, the premise was you can open up the case and steal the memory sticks.
2020-12-26 20:24:25	doug16k	if you rebooted onto flash drive my ram is all garbage
2020-12-26 20:24:49	mrvn	you don't reboot.
2020-12-26 20:24:55	doug16k	it's locked though
2020-12-26 20:25:01	doug16k	the dude presses Win+L
2020-12-26 20:25:28	mrvn	instead of stealing the ram you plug in a firewire device that DMAs the whole ram contents to itself and saves it.
2020-12-26 20:25:28	doug16k	devs are pretty reliable about that in my experience
2020-12-26 20:25:44	doug16k	screen saver auto-annoys into it
2020-12-26 20:26:30	doug16k	you have a universal memory attacker that goes right through, for instance, amd's usb controller?
2020-12-26 20:26:51	mrvn	firewire
2020-12-26 20:27:50	doug16k	is iommu enabled?
2020-12-26 20:28:33	mrvn	that could probably save your bacon.
2020-12-26 20:29:25	doug16k	someone mentioned a similarly vulnerable wlan card recently
2020-12-26 20:29:31	doug16k	that's pretty scary with no iommu
2020-12-26 20:29:44	mrvn	If someone sane had designed it each devcies DMA engine would also have to be initialized with the crypto key.
2020-12-26 20:33:20	doug16k	if you cleared bus master pci config space bit, wouldn't the root complex really block it even if it tried to bus master?
2020-12-26 20:33:32	doug16k	in a modern actual case
2020-12-26 20:33:47	doug16k	you should be able to turn it off hard enough
2020-12-26 20:35:42	doug16k	I agree with you that it's funny that the device can just demand bus master whenever it feels like it with no permission whatsoever
2020-12-26 20:37:14	doug16k	thankfully pci thought of the idea of an access failing and it will target abort the cycle
2020-12-26 20:37:31	doug16k	er, it could target abort it
2020-12-26 20:41:22	doug16k	so yeah it's oddly stupid enough to let you just bus master whenever, but cool enough to say "that didn't work" if you don't like the bus master operation it attempted
2020-12-26 20:46:06	doug16k	I think pci is pretty good
2020-12-26 20:46:13	doug16k	it tries pretty hard
2020-12-26 20:46:58	<--	tiggster79 (~stephen@pa49-197-232-100.pa.qld.optusnet.com.au) has quit (Ping timeout: 260 seconds)
2020-12-26 20:48:10	doug16k	it doesn't waste cycles just in case
2020-12-26 20:49:07	doug16k	the actual bus protocol is moot now, mostly
2020-12-26 20:49:24	doug16k	but even the old actual bus protocol is pretty straightforward
2020-12-26 20:53:24	<--	kleinweby (~kleinweby@unaffiliated/kleinweby) has quit (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
2020-12-26 20:54:33	-->	kleinweby (~kleinweby@unaffiliated/kleinweby) has joined #osdev
2020-12-26 21:02:20	<--	Tazmainian (~Tazmain@unaffiliated/tazmain) has quit (Quit: Leaving)
2020-12-26 21:05:19	<--	kleinweby (~kleinweby@unaffiliated/kleinweby) has quit (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
2020-12-26 21:06:38	-->	kleinweby (~kleinweby@unaffiliated/kleinweby) has joined #osdev
2020-12-26 21:07:23	<--	CWiz (~cipherwiz@216.21.169.52) has quit (Ping timeout: 260 seconds)
2020-12-26 21:08:08	-->	CWiz (~cipherwiz@216.21.169.52) has joined #osdev
2020-12-26 21:12:49	<--	raggi (~raggi@lin.rag.pub) has quit (Remote host closed the connection)
2020-12-26 21:14:23	<--	mikecrdev (~mike@li1014-251.members.linode.com) has quit (Ping timeout: 260 seconds)
2020-12-27 09:05:28	--	irc: disconnected from server
2020-12-27 09:06:24	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-27 09:06:24	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-27 09:06:24	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-27 09:06:24	--	Channel #osdev: 279 nicks (1 op, 0 voices, 278 normals)
2020-12-27 09:06:27	gog	possibly, but if so it's an eerie coincidence
2020-12-27 09:06:27	geist	so you want to be able to input your preferences in the form of like/dislike and tune it for you
2020-12-27 09:06:47	mrvn	geist: me too. Which maske it suck when they recommend stuff I already know. I want new stuff.
2020-12-27 09:06:50	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-27 09:07:10	mrvn	geist: I guess you should rate products for that
2020-12-27 09:07:26	geist	indeed. there's some sort of secondary thing on kinde called Goodreads that i think is associated with amazon
2020-12-27 09:07:47	geist	that does have a way to mark books you've already read that you didn't buy
2020-12-27 09:07:47	geist	and it's own set of recommendations, FWIW
2020-12-27 09:07:47	graphitemaster	I thew out my Google home mini because we were talking about lemurs one day (we don't have one, know anyone who has one, or ever googled this period) just was discussing zoboomafoo show (from the 90s) and none of us even said "hello google" to start it, next day nothing but lemur and zoboomafoo crap on Google suggested ads.
2020-12-27 09:07:59	graphitemaster	Freaked me out
2020-12-27 09:08:12	mrvn	geist: saw that in the browser, an "I already own this book" button. But not on kindle and not for kindle unlimited "I have read this"
2020-12-27 09:08:37	geist	it's on my kindle, which is odd. maybe it's a US/german market difference thing
2020-12-27 09:08:47	geist	i dont remember installing it on my kindle. it kinda integrates with its ui sort of
2020-12-27 09:09:08	mrvn	graphitemaster: didn't you read the small print? They always listen and the recording it listened to by real people for quality ensurence purposes.
2020-12-27 09:09:17	geist	that's 100% not true
2020-12-27 09:09:27	graphitemaster	geist, https://github.com/littlekernel/lk/blob/master/kernel/semaphore.c#L34
2020-12-27 09:09:28	bslsk05	​github.com: lk/semaphore.c at master · littlekernel/lk · GitHub
2020-12-27 09:09:33	graphitemaster	LIES
2020-12-27 09:10:00	geist	graphitemaster: interesting yes. well, i also didn't write that implementation
2020-12-27 09:10:16	geist	in fact i have a few bugs against it i need to clean up
2020-12-27 09:10:29	graphitemaster	Why is the thread locked by sem_destroy lol
2020-12-27 09:10:35	graphitemaster	Don't answer
2020-12-27 09:10:45	geist	wait_queue_destroy()
2020-12-27 09:10:51	geist	can release other threads waiting in i
2020-12-27 09:10:54	graphitemaster	Not having a lock-free queue SMH
2020-12-27 09:11:07	geist	hard to do lock free on all arches. remember LK is mostly for embedded stuff
2020-12-27 09:11:13	graphitemaster	Ah right
2020-12-27 09:11:29	geist	it's sort of 'growing up' as i add more hgher end stuff to it, but i'm specifically keeping it simple
2020-12-27 09:11:31	-->	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has joined #osdev
2020-12-27 09:11:32	geist	hence 'little kernel'
2020-12-27 09:11:50	geist	things like lock free or complex SMP algorithsm are tough to justify on a microcontroller
2020-12-27 09:11:53	gog	lk was the basis for haiku kernel right?
2020-12-27 09:11:54	geist	at least without a #ifdef
2020-12-27 09:11:59	geist	gog: no, that was newos
2020-12-27 09:12:03	gog	oh right
2020-12-27 09:12:08	geist	lk is the basis for fuchsia/zircon
2020-12-27 09:12:10	graphitemaster	geist, I hope purple OS has LF
2020-12-27 09:12:22	geist	graphitemaster: we've been talking about it. have any suggestions?
2020-12-27 09:12:33	geist	there are lots of algorithms, but some of them had patent hazards
2020-12-27 09:12:33	mrvn	geist: I really see no point in lock free for kernel stuff. If you don't have contention then a anything works. And if you have contention you just waste memory bandwith doing the work multiple times instead of waiting on the lock.
2020-12-27 09:12:41	geist	and then some of them rely on double atomic acquire/release
2020-12-27 09:12:57	graphitemaster	geist, I still think the proper way to do waiters it to just encode it into the lock value itself.
2020-12-27 09:13:03	geist	mrvn: kinda my point. i'm faaaar more interesting in measure, evaulatue, interate
2020-12-27 09:13:11	graphitemaster	Like how futex works
2020-12-27 09:13:17	geist	graphitemaster: sure. we do that for fuchsia yes
2020-12-27 09:13:18	mrvn	Especially the "Oh, someone else has the lock, lets do their work as well so we don't have to wait for them" kind of lock free algorithms.
2020-12-27 09:13:28	geist	what we dont yet do is a lot of lock free linked lists or whatnot
2020-12-27 09:13:38	geist	some of those were also patent encumbered for a while
2020-12-27 09:14:01	mrvn	Where that sort of code works is with user threads where a thread might hold a lock and is not running.
2020-12-27 09:14:36	graphitemaster	I think if you can make something lock free without diminishing returns in performance it's worth it.
2020-12-27 09:14:48	geist	gotta be a bit more specific though
2020-12-27 09:14:53	graphitemaster	But it's harder to prove correctness of LF
2020-12-27 09:14:55	geist	what specific lock free classes are we talking about?
2020-12-27 09:14:57	mrvn	graphitemaster: and how would that ever work?
2020-12-27 09:15:37	graphitemaster	You can still put the thread to sleep in LF
2020-12-27 09:15:48	graphitemaster	lock free != wait free
2020-12-27 09:16:01	mrvn	lock free == garantied progress
2020-12-27 09:16:08	mrvn	for someone
2020-12-27 09:16:21	graphitemaster	Yes, schedule another thread
2020-12-27 09:16:25	graphitemaster	That makes progress
2020-12-27 09:16:45	geist	but now of course you have priority inversion to eal with
2020-12-27 09:16:48	geist	and cross cpu stuff
2020-12-27 09:16:57	mrvn	generally those algorithms involve doing the work and then at the end do an atomic switch and retry when it fails.
2020-12-27 09:17:02	geist	we're currently teching up the fuchsia scheduler with more of that
2020-12-27 09:17:24	geist	we had fairly good priority inheritance working until we added another set of scheduling classes: deadline vs fair-scheduled thrads
2020-12-27 09:17:26	graphitemaster	geist, Like calculating physical distance of cores and trying to prevent thread migrations when the core is physically farther away :P
2020-12-27 09:17:27	<--	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has quit (Remote host closed the connection)
2020-12-27 09:17:32	geist	and now we have a PI issue with deadline threads and fair
2020-12-27 09:17:38	geist	graphitemaster: yes that too
2020-12-27 09:17:44	graphitemaster	Doesn't purple OS have a CFS now
2020-12-27 09:17:44	mrvn	I can't see "retry" to ever be better than waiting nicely for a lock for kernel/core stuff.
2020-12-27 09:17:58	geist	yes, that's the 'fair' scheduling class. that's CFS based
2020-12-27 09:18:35	graphitemaster	Wild stuff.
2020-12-27 09:18:44	geist	most of it is in https://fuchsia.googlesource.com/fuchsia/+/refs/heads/master/zircon/kernel/kernel/scheduler.cc
2020-12-27 09:18:47	bslsk05	​fuchsia.googlesource.com: zircon/kernel/kernel/scheduler.cc - fuchsia - Git at Google
2020-12-27 09:19:21	geist	and it's corresponding header files https://fuchsia.googlesource.com/fuchsia/+/refs/heads/master/zircon/kernel/include/kernel/scheduler.h
2020-12-27 09:19:22	bslsk05	​fuchsia.googlesource.com: zircon/kernel/include/kernel/scheduler.h - fuchsia - Git at Google
2020-12-27 09:20:17	graphitemaster	As an aside I think OS schedulers are all kind off terrible for games. Pretty much everyone squeezing every last inch of performance out of game consoles these days are fighting the OS scheduler constantly. I predict in the next 5-10 years that every major AAA game will be doing some insane user-space cooperative scheduling (fibers, stackful coros) ontop of all threads, all threads pinned, and all locking primitives in user-space
2020-12-27 09:20:18	graphitemaster	(spinlock based) just burning everything. With a high performance IO thread for any blocking stuff.
2020-12-27 09:20:45	graphitemaster	Since that's where many already ARE
2020-12-27 09:20:48	geist	kinda agreed, though i dont have anything to back it up
2020-12-27 09:21:05	geist	i'm fairly leery of the CFS style schedulers, but i admit i'm also kinda Old Skool
2020-12-27 09:21:22	geist	but it's also why we added a deadline scheduling class, which mostly trumps the fair scheduler
2020-12-27 09:21:42	geist	deadline actually solves for 'find a cpu with enough time to run this' and hard assigns the thread, etc
2020-12-27 09:23:37	geist	i think where we're struggling is trying to communicate all this priority stuff through IPC
2020-12-27 09:23:54	graphitemaster	What I find very interesting is that the user-space scheduling folks who did fiber engines in the games industry tried several different scheduler algorithms for how fibers are scheduled and the results are extremely interesting. Want to find the link for you but they concluded (at least for them, so ymmv) that first come, first serve is bad, priority scheduling is bad (never proved if it was just them misusing priorities though),
2020-12-27 09:23:55	graphitemaster	round-robin was really poor, multilevel queues were okay, but what was the _best_ was a work-conserving scheduler
2020-12-27 09:24:06	geist	which is what i expected. the fuchsia IPC ssystem is for better or worse highly asychronous, so it's direclty hard to pass intent through the kernel
2020-12-27 09:24:20	graphitemaster	they also did cfs, was poor
2020-12-27 09:24:27	mrvn	geist: are you trying t0o cver both server loads and mobile devices?
2020-12-27 09:24:48	geist	generally more of the latter, i believe
2020-12-27 09:25:16	graphitemaster	I'm not even sure how you write a scheduler that is work-conserving tbh.
2020-12-27 09:25:23	geist	wat's had to visualize is once you get a few hundred processes and a few thousand threads it gets hard to visualize whats going on
2020-12-27 09:25:40	geist	tracing it is fascinating, but it's a completely complex dance of threads
2020-12-27 09:25:46	mrvn	mobile devices are supposed to be idle and conserve energy. So there should always be lots of free cpu time to just preempt and be done with it and go back to sleep.
2020-12-27 09:25:56	graphitemaster	I guess for games it's easy because there's always constant work to do.
2020-12-27 09:25:59	graphitemaster	There's no idle time
2020-12-27 09:26:01	doug16k	yeah stepping a scheduler is pretty fascinating
2020-12-27 09:26:03	mrvn	graphitemaster: what's work conserving?
2020-12-27 09:26:18	geist	mrvn: yah sure but for a highly threaded and async system like fuchsia you end up with short periods of a shitton of threads running at the same time, exceeding the number of cpus
2020-12-27 09:26:26	graphitemaster	work-conserving scheduler is a scheduler that always tries to keep all resources busy all the time, with absolutely no idle time.
2020-12-27 09:26:32	geist	so you still have all these short term decisions about what to run where based on what you thin its going to do in the near future
2020-12-27 09:26:57	graphitemaster	Basically a "perfect" work conserving scheduler would have all CPUs at 100% all the time
2020-12-27 09:27:09	geist	i think we generally err on the side of that in fuchsia
2020-12-27 09:27:20	geist	as in if there's an idle cpu it'll probably get a thread
2020-12-27 09:27:28	geist	though we have some biases to try to avoid bouncing things around a lot
2020-12-27 09:27:41	geist	but a lot of the IPC involves lots of cross process scheduling
2020-12-27 09:28:06	-->	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has joined #osdev
2020-12-27 09:28:08	graphitemaster	With fiber stuff you can really cut work granularity really thin too. Like imagine a fiber per particle in a particle simulation. So you can have tens of thousands of pieces of work schedules just for that.
2020-12-27 09:28:17	graphitemaster	In just one frame
2020-12-27 09:28:30	graphitemaster	So it's actually feasible to really saturate everything
2020-12-27 09:28:31	geist	yah a lot of the PS3 era tech was around doing a bunch of that stuff on the SPUs
2020-12-27 09:28:46	mrvn	graphitemaster: but does it matter in what order you do them? just round-robin.
2020-12-27 09:28:50	geist	but a lot of that was involving building up a queue of things to do on this frame and then slamming it out
2020-12-27 09:30:28	graphitemaster	The problem is it's not enough to just pick some other piece of work when something goes to sleep and run it. That cannot guarantee saturation
2020-12-27 09:30:29	doug16k	reminds me of a gpu when I think of trying to throw enough work at something to even fully utilize it
2020-12-27 09:30:50	graphitemaster	Yeah it's very GPU like
2020-12-27 09:32:35	graphitemaster	The largest problem we face I think is that programming languages just do threading poorly. The threads and locks model that Rust makes less error prone is nice but the actual approach of threads and locks just doesn't scale or work. What Google did with Go is actually a better model of concurrency but there's obvious problems with Go's design that are ill-suited for realtime high-performance things (GC, Channels, etc)
2020-12-27 09:33:43	graphitemaster	The model we need for a future language that actually _works_ for tons of threads and cores is something with stackful coroutines that run on a bunch of kernel threads that are pinned with anything blocking being done on a reactor thread.
2020-12-27 09:33:56	graphitemaster	Go is so close :(
2020-12-27 09:34:01	<--	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has quit (Remote host closed the connection)
2020-12-27 09:34:14	<--	dude12312414 (~test@gateway/tor-sasl/dude12312414) has quit (Remote host closed the connection)
2020-12-27 09:35:02	graphitemaster	We also need a language that manipulates data layout too.
2020-12-27 09:35:36	graphitemaster	C and C++ do not perform automatic data transformations because the order of structure elements and arrays need to be fixed due to ABI and because of how people synthesize pointers into it.
2020-12-27 09:35:43	doug16k	good aosoa support that is trivially vectorizable would be nice
2020-12-27 09:35:47	graphitemaster	That model does not work for fully saturating CPUs.
2020-12-27 09:36:06	-->	aethlas (~aethlas@45.86.202.95) has joined #osdev
2020-12-27 09:36:42	geist	i figure the new gen of consoles will drag a lot of game makers kicking and screaming into finally using more than 2 or 3 threads
2020-12-27 09:37:23	geist	since both of them are 8 core zen 2s, and i assume SMT is enabled
2020-12-27 09:37:27	graphitemaster	Yes, but that doesn't mean they'll use them well :P
2020-12-27 09:37:43	geist	not for a while, but the good ones will and will generally trickle down
2020-12-27 09:38:01	graphitemaster	Games on the Nintendo Switch actually have better CPU utilization on average than games on the PS4 based on my preliminary tests.
2020-12-27 09:38:07	geist	i generally just think they need the ubiquitous hardware in front of them or they wont bother
2020-12-27 09:38:17	geist	since there will always be some loest common denominator they'll design for
2020-12-27 09:38:58	-->	mbomba (~mbomba@bras-base-toroon2719w-grc-53-142-114-5-26.dsl.bell.ca) has joined #osdev
2020-12-27 09:39:08	graphitemaster	The Switch's OS is really quick at thread preemption and context switches. Almost 8x faster than the PS4 base model despite the fact the PS4 has an insanely faster CPU
2020-12-27 09:39:13	graphitemaster	This really comes down to the OS design.
2020-12-27 09:39:35	graphitemaster	I think ARM is just generally easier to save and restore context too
2020-12-27 09:39:42	graphitemaster	x86_64 has a shit ton of register state
2020-12-27 09:39:43	geist	absolutely. also i have no idea how or if sony has tuned their freebsd kernel for gaming stuff
2020-12-27 09:39:50	graphitemaster	Plus the console has fuckin' side channel attack mitigations now
2020-12-27 09:39:57	geist	:(
2020-12-27 09:39:58	graphitemaster	I don't know why
2020-12-27 09:40:05	geist	yah for jaguar i'm surprised
2020-12-27 09:40:14	doug16k	windows has x86_64 xmm5-xmm15 callee saved
2020-12-27 09:40:19	geist	but also keep that in mind, PS4 is a jaguar core, which is roughtly Fast Atom class anyway
2020-12-27 09:40:23	doug16k	so even a fiber would need to switch it
2020-12-27 09:40:24	klange	Almost done chugging through Crafting Interpreters and have managed to squeeze out a Python-style syntax. Indentation-based blocks were not too bad to implement, mostly some parser wackiness.
2020-12-27 09:40:33	geist	anyway gotta go do stuff for a bit
2020-12-27 09:40:36	geist	ttyl
2020-12-27 09:40:38	doug16k	er, xmm6-xmm15
2020-12-27 09:40:43	graphitemaster	geist, Nice talking, see ya :)
2020-12-27 09:41:37	graphitemaster	doug16k, Not necessarily. Only if you interface with that ABI. I know a game on Windows that uses the SysV ABI to avoid this specific issue with their fibers
2020-12-27 09:41:46	graphitemaster	It's a game released not long ago. Compiled with a retargeted clangg
2020-12-27 09:41:59	graphitemaster	They have shims for calling WinAPI stuff
2020-12-27 09:42:07	graphitemaster	But yeah that's a lot of work
2020-12-27 09:42:29	doug16k	I do that in my uefi bootloader variation. it's sysv calling __attribute__((__ms_api__)) things
2020-12-27 09:42:39	doug16k	__ms_abi__*
2020-12-27 09:42:54	graphitemaster	I'll give you a hint what engine is is. It starts with a D and it's used in two games on PC now. One of which is a strand-like
2020-12-27 09:43:01	graphitemaster	XD
2020-12-27 09:43:59	graphitemaster	klange, Why would you use indentation-based blocks. Do you hate programmers
2020-12-27 09:44:10	klange	I like Python.
2020-12-27 09:45:07	doug16k	I'm obsessed with indentation anyway, python is just more of the same
2020-12-27 09:45:52	doug16k	can you leave a source line 380 characters long?
2020-12-27 09:46:40	doug16k	then you go to fix that abomination and the other guy says "do you think we should touch it?"
2020-12-27 09:47:23	klange	I did the block indentation thing by jumping through a few hoops to parse spaces at the start of a line as a special token, then examining the one before block statements to figure out when to stop compiling lines as part of that block
2020-12-27 09:48:26	klange	some desk-banging to work around things like blank lines, comments, etc., fighting with weird nesting siutations, and now I'm through the chapter on functions so I have a reasonably useful little bytecode vm I could shove into my editor for scripting.
2020-12-27 09:48:48	graphitemaster	Wait until you encounter \r\n\t\r\t\r\t\r
2020-12-27 09:49:31	klange	tabs: not valid indentation; \r: go away I only speak unix line endings (or I did I include a line from the book that skipped \r as whitespace... I don't remember, it was last night and I was tired)
2020-12-27 09:50:15	klange	I want to replace the syntax highlighters - which are currently C functions, speedy but annoying to extend, and not exactly the most suitable language for the matching in all cases - with this.
2020-12-27 09:51:38	klange	Need to finish the stuff in the book, add subscript syntax and arrays/hashes, clean up the source into a single file, probably redo all the styling and wording which I've tried to keep mostly consistent with the book for ease of following it...
2020-12-27 09:52:20	klange	Then write up a ton of bindings for the syntax engine, rip out my existing config system, embed the VM, and I can rewrite all the highlighters and see how they perform.
2020-12-27 09:52:23	doug16k	so you are making a compiler and using IL as bytecode?
2020-12-27 09:52:57	klange	If you've not read Crafting Interpreters, the second half of the book builds a bytecode VM / compiler from scratch in C.
2020-12-27 09:53:39	klange	The language it implements is a typical brace-y, dynamic thing with classes, first-class functions, some basic value types.
2020-12-27 09:54:25	doug16k	could do transpiler backend and generate C from IL
2020-12-27 09:54:28	klange	There are a few "challenges" at the end of each chapter that the book's included sources don't do, suggestions for things to do on your own, etc. I wish it had been finished (or, uh, started, even) when I was still in school...
2020-12-27 09:54:57	klange	My uni compilers course was taught by _Vikram Adve_.
2020-12-27 09:55:09	klange	I missed a golden opportunity because it was just so fucking boring I couldn't pay attention.
2020-12-27 09:55:35	klange	Adve just... wasn't a great undergrad course instructor.
2020-12-27 09:55:59	doug16k	I think the scanning and parsing part is really boring compared to AST and semantic analysis and IR optimizations
2020-12-27 09:56:08	<--	mbomba (~mbomba@bras-base-toroon2719w-grc-53-142-114-5-26.dsl.bell.ca) has quit (Quit: WeeChat 3.0)
2020-12-27 09:56:12	geist	yah my university ended up picking up bjarne stroustrup as a prof after i graduated
2020-12-27 09:56:15	doug16k	I bet some courses bore people to death with the scanning
2020-12-27 09:56:20	geist	but i think i heard it's a pretty good teacher
2020-12-27 09:56:25	klange	The first half of the book does a tree-walk in Java and does a few AST things.
2020-12-27 09:58:07	<--	Belxjander (~Belxjande@sourcemage/Mage/Abh-Elementalist) has quit (Ping timeout: 246 seconds)
2020-12-27 09:58:17	klange	The approach for the C half of CI is an interesting single-pass top-down parser, it's been really straight-forward to work with.
2020-12-27 10:00:13	-->	c2a1 (~u0_a100@70.127.211.140) has joined #osdev
2020-12-27 10:00:15	klange	Notably the book was released in chapters over a couple of years, and while I know we've discussed it here before and I was following it eagerly since before it even got the C stage, I wasn't actually _following_ it - just reading each chapter as it came out.
2020-12-27 10:00:34	klange	This is the first time I've sat down and opened an editor and done the implementation.
2020-12-27 10:01:09	klange	Considering my shell is the closest I've come to writing a "language", this is a considerable step up.
2020-12-27 10:05:29	jimbzy	I have returned.
2020-12-27 10:07:27	graphitemaster	I've been working on a very low level language for awhile now
2020-12-27 10:07:42	-->	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has joined #osdev
2020-12-27 10:07:42	graphitemaster	It's extremely different and wild though.
2020-12-27 10:07:48	graphitemaster	So I'm not sure anyone will like it.
2020-12-27 10:12:41	doug16k	functional or imperative?
2020-12-27 10:13:38	<--	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has quit (Remote host closed the connection)
2020-12-27 10:16:44	graphitemaster	Extremely imperative
2020-12-27 10:17:18	doug16k	I guess it might be because you'd want it highly optimizable and controllable
2020-12-27 10:17:35	doug16k	s/might/must/
2020-12-27 10:17:41	graphitemaster	This is an old design document
2020-12-27 10:17:42	graphitemaster	https://gist.github.com/graphitemaster/f20e3c7ecb7ad72f19d6476d6d8b9ccb
2020-12-27 10:17:43	bslsk05	​gist.github.com: IMBUE.md · GitHub
2020-12-27 10:19:53	doug16k	looks nice
2020-12-27 10:20:19	doug16k	reminds me of serialization
2020-12-27 10:20:41	superleaf1995	ah records
2020-12-27 10:20:42	superleaf1995	nice
2020-12-27 10:21:42	doug16k	ah, kind of overlaps C++ concepts too
2020-12-27 10:21:54	doug16k	but not really
2020-12-27 10:21:56	superleaf1995	and COBOL too
2020-12-27 10:22:06	graphitemaster	I don't have a `sizeof` `viewof` and `alignof` or `dataof` anymore. I have a simple infix `of` operator with the left hand side being any property-exposed constant with `size` `align` and `view` being defaults, you can also define your own :)
2020-12-27 10:22:09	superleaf1995	(the record structure is like cobol)
2020-12-27 10:22:27	graphitemaster	But yes this is a language built around set theory rather than type theory
2020-12-27 10:22:33	graphitemaster	Which is very different and unique
2020-12-27 10:22:48	graphitemaster	I don't know if it will pan out, but I've been enjoying it so far
2020-12-27 10:22:59	graphitemaster	Since this is how I already write code and thing about C / C++
2020-12-27 10:23:10	graphitemaster	s/thing/think/
2020-12-27 10:23:49	doug16k	you can tell it's pretty good just by how briefly you can explain it in that readme
2020-12-27 10:24:35	-->	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has joined #osdev
2020-12-27 10:24:45	<--	gog (~ada@nova-046-182-189-142.nat.nova.is) has quit (Ping timeout: 240 seconds)
2020-12-27 10:26:29	graphitemaster	Yeah it's a pretty simple language
2020-12-27 10:26:44	graphitemaster	I think our idea of type systems were the incorrect approach
2020-12-27 10:27:22	graphitemaster	I think this because that's now how CPUs work. CPUs do not have notion of types. They have instructions that assume the contents of data is in some specified format.
2020-12-27 10:27:29	graphitemaster	It's a data modeling thing.
2020-12-27 10:27:34	graphitemaster	Types violate this.
2020-12-27 10:27:43	graphitemaster	s/now/not/
2020-12-27 10:28:27	graphitemaster	So being able to describe the type of data with these properties, rather than just picking some type and being locked into all this implicit set of operations by the type, you get more flexibility (and safety I think)
2020-12-27 10:28:47	graphitemaster	And it just seems generally simpler to me to reason about
2020-12-27 10:28:59	graphitemaster	It also opens up generics for free almost
2020-12-27 10:29:12	-->	ransom (~c4264035@8.47.12.52) has joined #osdev
2020-12-27 10:29:28	graphitemaster	Like C++ concepts or Rust traits, here the property is the same thing but it works at both a low-level and high-level at the same time
2020-12-27 10:29:31	graphitemaster	One mechanism for all.
2020-12-27 10:31:22	<--	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has quit (Remote host closed the connection)
2020-12-27 10:34:35	klange	https://klange.dev/bim/test.krk.htm
2020-12-27 10:34:36	bslsk05	​klange.dev: test.krk
2020-12-27 10:35:38	graphitemaster	Looks nice.
2020-12-27 10:35:59	graphitemaster	I'd say kill octal literals
2020-12-27 10:36:44	<--	Affliction (affliction@2400:8907::f03c:92ff:feb0:8be2) has quit (Remote host closed the connection)
2020-12-27 10:36:48	klange	As long as they are behind 0o I don't see a reason not to have them.
2020-12-27 10:36:58	klange	Useful for those pesky unix permission bits.
2020-12-27 10:37:05	-->	Affliction (affliction@2400:8907::f03c:92ff:feb0:8be2) has joined #osdev
2020-12-27 10:37:24	graphitemaster	One thing you may find useful. I did a lot of research into looking for visually pleasing sigils and what not (I tried 500 different programming fonts) when I arrived to this
2020-12-27 10:37:25	graphitemaster	https://media.discordapp.net/attachments/572508882316951563/792566634714890270/2020-12-26-203555_1226x169_scrot.png?width=1103&height=152
2020-12-27 10:38:26	mrvn	klange: that's what c++ custom literals are for.
2020-12-27 10:38:43	mrvn	klange: create one so you can give permissions with rwx
2020-12-27 10:39:05	graphitemaster	Basically, I think ^, :, | and . should be off limits in programming languages
2020-12-27 10:39:21	graphitemaster	I've been trying really hard to arrive to characters that work even for dylexic people and people with OCD
2020-12-27 10:39:23	klange	frankly, that sounds like a font issue
2020-12-27 10:39:41	mrvn	graphitemaster: why? ^ is the vector cross product giving you a vector at right angles to the 2 inputs.
2020-12-27 10:39:44	graphitemaster	Of the 500 fonts I tested, those characters don't look or behave the way they should more than 50% of the time
2020-12-27 10:39:50	graphitemaster	So it's just not good IMHO
2020-12-27 10:40:18	klange	Okay so more than 50% of fonts suck. That makes sense. There's only a handful of actually good fonts.
2020-12-27 10:40:59	graphitemaster	They never works correctly in fonts designed for dyslexic people
2020-12-27 10:41:03	graphitemaster	s/works/worked
2020-12-27 10:41:08	-->	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has joined #osdev
2020-12-27 10:41:12	graphitemaster	Which is a larger issue I think
2020-12-27 10:41:22	c2a1	Helvetica
2020-12-27 10:41:28	c2a1	*echo*
2020-12-27 10:41:33	klange	Though you might like to hear my brief reasoning for hating those damn coding ligature fonts that have become popular: Absolutely screw the idea of displaying glyphs in a way where I can't figure out what the actual component characters are.
2020-12-27 10:41:48	graphitemaster	Ligatures can be good
2020-12-27 10:41:56	klange	Though there are several that do stuff like := to address your alignment concern.
2020-12-27 10:41:58	klange	_That's_ nice.
2020-12-27 10:42:00	c2a1	what is ligature
2020-12-27 10:42:07	klange	But turning => into a single glyph... ew.
2020-12-27 10:42:09	graphitemaster	:= just looks bad
2020-12-27 10:42:39	graphitemaster	={ also looks bad and I dislike C and C++ for aggregate initializers
2020-12-27 10:42:42	klange	c2a1: Ligatures are glyphs that replace multiple characters with a single one.
2020-12-27 10:42:46	c2a1	pascal programmers would like to have a word with you
2020-12-27 10:42:57	graphitemaster	=[ also looks bad
2020-12-27 10:43:07	graphitemaster	The best method for aggregate initialization is just constructor calls'
2020-12-27 10:43:08	klange	=[ looks sad, we should use it for sad things
2020-12-27 10:43:15	graphitemaster	GLSL got this right
2020-12-27 10:43:20	c2a1	klange: sounds unorthodox
2020-12-27 10:43:21	doug16k	klange, you normalize the string to handle that nonsense
2020-12-30 19:38:47	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-30 19:38:47	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-30 19:38:47	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-30 19:38:47	--	Channel #osdev: 288 nicks (1 op, 0 voices, 287 normals)
2020-12-30 19:39:14	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-30 19:41:37	doug16k	direct memory access
2020-12-30 19:42:12	doug16k	example is a hard drive controller reading from RAM and sending that to drive for a write command
2020-12-30 19:43:47	Guest20	cool
2020-12-30 19:44:09	doug16k	if they write syscall with a large buffer and it's direct I/O it might have to tell the disk controller to read a lot of little fragments for one write, when it could have been fewer
2020-12-30 19:44:16	<--	brettgilio (~brettgili@brettgilio.com) has quit (Ping timeout: 240 seconds)
2020-12-30 19:44:30	doug16k	because the write buffer is in virtual memory, potentially fragmented
2020-12-30 19:44:40	doug16k	...in physical memory
2020-12-30 19:45:09	doug16k	a driver will have limits on how many fragments it can withstand
2020-12-30 19:45:30	doug16k	or it will need to shatter it into a manageable sequence of commands
2020-12-30 19:47:00	Guest20	doug16k oh ok
2020-12-30 19:47:47	klange	my head hurts
2020-12-30 19:48:32	-->	brettgilio (~brettgili@brettgilio.com) has joined #osdev
2020-12-30 19:50:11	-->	knebulae (~nebulae@c-73-145-147-252.hsd1.mi.comcast.net) has joined #osdev
2020-12-30 20:05:23	-->	meandrain (~meandrain@78.96.16.74) has joined #osdev
2020-12-30 20:06:06	SkyZ	We could just iterate
2020-12-30 20:07:23	SkyZ	290 people here
2020-12-30 20:07:25	SkyZ	!
2020-12-30 20:07:44	<--	sangoma (~zeus@197.239.4.153) has quit (Ping timeout: 260 seconds)
2020-12-30 20:08:44	SkyZ	Can someone help me get plan 9 running?
2020-12-30 20:10:06	j`ey	SkyZ: https://9p.io/wiki/plan9/installation_instructions/index.html there u go
2020-12-30 20:10:07	bslsk05	​9p.io: Installation instructions (Plan 9 wiki)
2020-12-30 20:10:16	SkyZ	I got to the terminal
2020-12-30 20:10:20	SkyZ	not the desktop
2020-12-30 20:11:36	j`ey	when I tried the 9front iso, it took me directly to the desktop
2020-12-30 20:18:21	SkyZ	no
2020-12-30 20:21:19	SkyZ	https://imgur.com/a/O4eZS4L
2020-12-30 20:21:19	bslsk05	​imgur.com: Imgur: The magic of the Internet
2020-12-30 20:21:42	-->	sangoma (~zeus@154.230.143.37) has joined #osdev
2020-12-30 20:22:31	SkyZ	9front
2020-12-30 20:24:07	SkyZ	downloading now
2020-12-30 20:25:07	SkyZ	i like the propoganda
2020-12-30 20:25:53	SkyZ	http://9front.org/propaganda/
2020-12-30 20:25:56	bslsk05	​9front.org: PROPAGANDA
2020-12-30 20:26:16	j`ey	9front is funny
2020-12-30 20:26:42	SkyZ	ha
2020-12-30 20:26:47	SkyZ	:)
2020-12-30 20:32:18	<--	jayvbe (~jayvbe@2601:647:4800:1475:805a:3a94:9f31:e15e) has quit (Remote host closed the connection)
2020-12-30 20:32:32	-->	jayvbe (~jayvbe@2601:647:4800:1475:23cf:a5a1:be4:25cb) has joined #osdev
2020-12-30 20:35:40	-->	CrystalMath (~coderain@reactos/developer/theflash) has joined #osdev
2020-12-30 20:35:40	<--	snowball (~rhcake@2a02:610:7501:feff:97eb:fb29:5269:b07c) has quit (Read error: Connection reset by peer)
2020-12-30 20:36:07	-->	snowball (~rhcake@2a02:610:7501:feff:97eb:fb29:5269:b07c) has joined #osdev
2020-12-30 20:40:28	-->	sortie (~sortie@D4709737.rev.sefiber.dk) has joined #osdev
2020-12-30 20:40:54	<--	SkyZ (43538427@ool-43538427.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2020-12-30 20:44:35	<--	sangoma (~zeus@154.230.143.37) has quit (Read error: Connection reset by peer)
2020-12-30 20:55:36	-->	sangoma (~zeus@h1102.n1.ips.mtn.co.ug) has joined #osdev
2020-12-30 20:58:43	<--	iola (~iolar@gateway/tor-sasl/iola) has quit (Remote host closed the connection)
2020-12-30 20:58:59	-->	iola (~iolar@gateway/tor-sasl/iola) has joined #osdev
2020-12-30 21:08:14	<--	sangoma (~zeus@h1102.n1.ips.mtn.co.ug) has quit (Ping timeout: 256 seconds)
2020-12-30 21:09:17	<--	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has quit (Read error: No route to host)
2020-12-30 21:12:05	-->	random_yanek (~random_ya@2a01:118f:822:9c00:ce49:1330:eb01:6547) has joined #osdev
2020-12-30 21:15:32	-->	gog (~ada@nova-046-182-189-142.nat.nova.is) has joined #osdev
2020-12-30 21:15:39	 *	gog meows
2020-12-30 21:23:52	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 260 seconds)
2020-12-30 21:28:01	<--	bauen1 (~bauen1@aftr-62-216-207-249.dynamic.mnet-online.de) has quit (Ping timeout: 246 seconds)
2020-12-30 21:35:00	-->	bauen1 (~bauen1@aftr-62-216-207-249.dynamic.mnet-online.de) has joined #osdev
2020-12-30 21:43:04	-->	regreg (~regreg@2a02:2f01:8815:3700:ddf3:d319:ad65:d6d6) has joined #osdev
2020-12-30 21:49:43	sham1	gog: are you expecting ear rubs or something?
2020-12-30 21:50:42	gog	literally always
2020-12-30 21:53:54	 *	FireFly pets gog
2020-12-30 21:57:01	-->	yalue (184ac872@cpe-24-74-200-114.ec.res.rr.com) has joined #osdev
2020-12-30 22:05:23	<--	regreg (~regreg@2a02:2f01:8815:3700:ddf3:d319:ad65:d6d6) has quit (Remote host closed the connection)
2020-12-30 22:05:44	-->	regreg (~regreg@2a02:2f01:8815:3700:9955:8b15:e9da:e57b) has joined #osdev
2020-12-30 22:06:10	<--	regreg (~regreg@2a02:2f01:8815:3700:9955:8b15:e9da:e57b) has quit (Read error: Connection reset by peer)
2020-12-30 22:18:02	<--	Guest20 (~textual@103.215.168.1) has quit (Quit: ZZZzzz…)
2020-12-30 22:21:23	-->	dennis95 (~dennis95@mue-88-130-62-205.dsl.tropolys.de) has joined #osdev
2020-12-30 22:29:26	<--	KidBeta (~Kidbeta@hpavc/kidbeta) has quit (Ping timeout: 264 seconds)
2020-12-30 22:40:32	<--	dumenci (~lucid_0x8@188.253.237.243) has quit (Ping timeout: 256 seconds)
2020-12-30 22:42:10	-->	lucid_0x80 (~lucid_0x8@188.253.235.104) has joined #osdev
2020-12-31 07:49:37	--	irc: disconnected from server
2020-12-31 07:50:17	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-31 07:50:17	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-31 07:50:17	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-31 07:50:17	--	Channel #osdev: 298 nicks (1 op, 0 voices, 297 normals)
2020-12-31 07:50:30	tjowers	Yeah there's fault-tolerance mechanisms in their protocol which I haven't been briefed on
2020-12-31 07:50:44	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-31 07:50:54	tjowers	Not in the protocol but in the control plane
2020-12-31 07:52:02	doug16k	if one out of 300 packets were dropped I'd say that's just great
2020-12-31 07:53:37	doug16k	try just ping -f from one to other and leave it and see how many drops occur
2020-12-31 07:54:37	tjowers	I've done a lot with af_packet sockets -- I've figured out a lot of the details of why packets are dropped and mitigated them -- that's why they want to see what I could figure out on the driver level
2020-12-31 07:54:47	doug16k	if the row of dots doesn't grow, it isn't dropping
2020-12-31 09:21:23	--	irc: disconnected from server
2020-12-31 09:21:59	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2020-12-31 09:21:59	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2020-12-31 09:21:59	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2020-12-31 09:21:59	--	Channel #osdev: 298 nicks (1 op, 0 voices, 297 normals)
2020-12-31 09:22:26	--	Channel created on Sun, 26 Nov 2006 15:42:59
2020-12-31 09:22:56	tjowers	Ok so it serves mostly as a voltage regulator?
2020-12-31 09:23:16	<--	gog (~ada@nova-046-182-189-142.nat.nova.is) has quit (Quit: bye)
2020-12-31 09:23:23	mrvn	tjowers: no, it acts as the power switch on your system.
2020-12-31 09:23:26	tjowers	You wouldn't ever want to deliberated power something off unless their was a voltage issue
2020-12-31 09:23:38	mrvn	but instead of being mechanical it's electrical.
2020-12-31 09:23:50	tjowers	Does each switch connect to a redundant power supply?
2020-12-31 09:24:02	mrvn	tjowers: no. just the power pins on the mainboard.
2020-12-31 09:24:17	<--	sortie (~sortie@D4709737.rev.sefiber.dk) has quit (Quit: Leaving)
2020-12-31 09:24:31	tjowers	In what cases would you need to power off a particular partition of the system?
2020-12-31 09:24:38	tjowers	Containment
2020-12-31 09:24:40	mrvn	tjowers: That's a 5V signal by the way. It's not interacting with the 230V at all.
2020-12-31 09:24:45	tjowers	Breach containment
2020-12-31 09:25:20	tjowers	What does that mean?
2020-12-31 09:25:33	mrvn	tjowers: you power it off when you aren't running tests to save power. Or in HA when it becomes unresponsive.
2020-12-31 09:26:08	mrvn	tjowers: what? the 5V? It makes the electronics far easier to work with. Cheaper components. No risk of shocking yourself, ...
2020-12-31 09:26:10	tjowers	Ah right for redundant systems -- didn't cross my mind
2020-12-31 09:27:00	mrvn	I could actually produce and sell this solution. For a 230V thing I would have to be certified.
2020-12-31 09:27:08	tjowers	But you wouldn't want to keep the other systems on for fail over? Or you shut off the failing system to prevent corruption from spreading?
2020-12-31 09:27:50	mrvn	tjowers: you turn of the unresponsive system to make sure it doesn't do anything. You can't know if for example the mariaDB on it still runs and only the NIC failed.
2020-12-31 09:30:52	mrvn	tjowers: Note that this is only for unresponsive systems. All the communication links failed. If it still has communictaion links you can do a proper handoff if something fails.
2020-12-31 09:32:03	mrvn	basically when the kernel panics you turn the power off and on.
2020-12-31 09:32:04	tjowers	Are you high up at that company? What do they do; maybe my CEO would be interested in chatting with yours -- if it made sense; not as a client but as a partner -- we made real good friends with algo-logic; they are in with a lot of the fintech companies; but we aren't super businessy about it, they do have agreements but we work pretty closely and
2020-12-31 09:32:04	tjowers	openly, like one of our dudes works over there now temporarily to oversee the FPGA development
2020-12-31 09:32:58	tjowers	We zoom pretty often
2020-12-31 09:33:32	mrvn	tjowers: we write management software for cluster. That power thing is a one-off design I made for <50E because any bought solution is like 500E and past experience was bad.
2020-12-31 09:34:40	mrvn	tjowers: It's out test system. If it fails we don't loose money but then someone has to reset it the next work day (or drive into the office with COVID now).
2020-12-31 09:34:46	tjowers	So "general datacenter reliability consulting and solutions"
2020-12-31 09:34:48	tjowers	?
2020-12-31 09:35:09	mrvn	tjowers: https://q-leap.de/
2020-12-31 09:35:09	bslsk05	​q-leap.de: www.q-leap.com
2020-12-31 09:50:46	tjowers	That's kind of perfect -- how close are you guys with intel?
2020-12-31 09:51:45	tjowers	https://www.earthcomputing.io
2020-12-31 09:51:46	bslsk05	​www.earthcomputing.io: Home | Earth Computing
2020-12-31 09:55:25	mrvn	no closer than anyone else
2020-12-31 09:57:40	tjowers	Right, they'll come around eventually; I'll see if my CEO, paul, wants to chat with you're CEO; on the about-us page I'm not there, because I have no credits -- straight to the NBA for me lol
2020-12-31 09:58:54	<--	remby (~remby@2607:fea8:2c62:8800::84ed) has quit (Quit: remby)
2020-12-31 10:00:39	tjowers	Tomorrow though, I want to work on this driver for now, and maybe look at that OS you guys have
2020-12-31 10:01:52	tjowers	Is it basically a stripped down Linux distribution with common HPC software included?
2020-12-31 10:06:22	mrvn	less the stripped down and plus management software for the server.
2020-12-31 10:06:23	tjowers	The license says title is owned by you guys -- with the "cannot provide turnkey solutions with it" do you mean I cannot sell a platform running this system? I wouldn't want to do that regardless because I don't know the in and outs of it so if something were to break etc
2020-12-31 10:06:24	<--	isaacwoods (~isaac@host109-146-213-228.range109-146.btcentralplus.com) has quit (Quit: WeeChat 3.0)
2020-12-31 10:07:42	tjowers	Who's bought your full system before?
2020-12-31 10:07:51	tjowers	Server included?
2020-12-31 10:08:51	<--	dir76e3q (~klFvhLnL~@gateway/tor-sasl/spareproject) has quit (Remote host closed the connection)
2020-12-31 10:09:41	mrvn	We don't sell hardware but we have partners that do. There should be some info on the pages who baught our solution and wants the world to know about it.
2020-12-31 10:10:35	-->	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has joined #osdev
2020-12-31 10:11:56	tjowers	Security wise -- how good are you guys with security? We are a bit lacking right now in that area
2020-12-31 10:13:10	<--	miskitveel (60094334@gateway/web/cgi-irc/kiwiirc.com/ip.96.9.67.52) has quit (Quit: Ping timeout (120 seconds))
2020-12-31 10:14:21	<--	Lucretia (~Luke@pdpc/supporter/active/lucretia) has quit (Quit: Konversation terminated!)
2020-12-31 10:16:35	mrvn	tjowers: we follow the usual listes
2020-12-31 10:18:34	<--	Piraty (~irc@unaffiliated/piraty) has quit (Quit: ---)
2020-12-31 10:20:00	-->	Piraty (~irc@unaffiliated/piraty) has joined #osdev
2020-12-31 10:20:59	tjowers	German engineering -- that has to be one of our investor sound bytes lmao
2020-12-31 10:21:07	tjowers	Are you from germany?
2020-12-31 10:26:17	-->	trinityblade (~textual@adsl-76-211-177-0.dsl.wlfrct.sbcglobal.net) has joined #osdev
2020-12-31 10:27:48	mrvn	yes
2020-12-31 10:28:45	tjowers	Pauls from england
2020-12-31 10:42:14	<--	ransom (~c4264035@8.47.12.52) has quit (Read error: Connection reset by peer)
2020-12-31 10:43:06	<--	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has quit (Quit: remby)
2020-12-31 10:49:45	-->	dude12312414 (~test@gateway/tor-sasl/dude12312414) has joined #osdev
2020-12-31 10:51:12	<--	vdamewood (~vdamewood@unaffiliated/vdamewood) has quit (Ping timeout: 260 seconds)
2020-12-31 10:54:54	-->	vdamewood (~vdamewood@unaffiliated/vdamewood) has joined #osdev
2020-12-31 11:01:46	<--	regreg (~regreg@2a02:2f01:8903:ee00:51db:89fe:9e00:be42) has quit (Quit: Leaving)
2020-12-31 11:04:37	<--	mahmutov (~milisman@unaffiliated/mahmutov) has quit (Ping timeout: 260 seconds)
2020-12-31 11:11:19	-->	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has joined #osdev
2020-12-31 11:23:46	superleaf1995	I have been reading about PCI-to-PCI bridges, The spec says "The BIOS [in this case, the kernel] must assign PCI bus numbers to each bridge in the system. In what order they are assigned and when assignaments are made is not specified."
2020-12-31 11:23:59	superleaf1995	does this eman, pci to bus allocator? :D
2020-12-31 11:25:13	-->	peterbb (~peterbb@cm-84.215.74.172.getinternet.no) has joined #osdev
2020-12-31 11:25:49	<--	peterbb (~peterbb@cm-84.215.74.172.getinternet.no) has quit (Remote host closed the connection)
2020-12-31 11:26:11	geist	yah
2020-12-31 11:26:24	superleaf1995	yay
2020-12-31 11:27:31	geist	that's why i'm saying what you're havint to do here is pretty substantial
2020-12-31 11:27:49	geist	you're havint to do a full pci configure for a system, which is non trivial
2020-12-31 11:28:27	geist	assigning bars is just part of it, you also need to assign bus numbers and device numbers and whatnot
2020-12-31 11:28:34	geist	there's a whole scheme for taht in the PCI spec
2020-12-31 11:28:50	superleaf1995	yeah im taking big eyes on it but
2020-12-31 11:29:30	geist	thankfully qeu will probably be pretty tolerant of mistakes you make
2020-12-31 11:29:44	superleaf1995	yeah just noticed
2020-12-31 11:29:45	geist	it's possible you can skip some steps and it'll Just Work
2020-12-31 11:30:02	geist	whereas real hardware would be very picky about how you configure stuff
2020-12-31 11:30:17	mrvn	would be nice if qemu had a mode where it warns when you skip something.
2020-12-31 11:30:18	geist	especially with the whole bridges and how irqs are routed and if the bridges have the right apertures set
2020-12-31 11:30:42	superleaf1995	yeah the bridges are crazy
2020-12-31 11:30:54	superleaf1995	in one scheme the entire transmission thing was skewed
2020-12-31 11:31:00	geist	and they're even odder in PCIe
2020-12-31 11:31:28	geist	in PCI bridges were more rare, they did pretty much what you think they do and only showed up if youliterally were trying to multiply a single PCI card into multiple ones
2020-12-31 11:31:48	geist	PCIe bridges are more of a essential part, and most PCIe devices sit behind a bridge
2020-12-31 11:32:04	geist	so you end up with lots of bridges with one bus behind each and one device per bus
2020-12-31 11:32:10	superleaf1995	yeah that is why im looking at this madness
2020-12-31 11:32:39	-->	Goplat (~Goplat@reactos/developer/Goplat) has joined #osdev
2020-12-31 11:32:43	geist	a modern PC it's not uncommon to have say 10-15 busses with a corresponding number of bridges
2020-12-31 11:33:33	superleaf1995	right
2020-12-31 11:33:42	superleaf1995	and each bus can be behind a bus, behind another and so on
2020-12-31 11:33:56	geist	for classic PCI you'd probably just have most of the devices, bult in or in slots, on bus 0
2020-12-31 11:34:25	geist	right, the bus decoding happens in the same subtractive way. a bridge device has a range of busses its responsible for
2020-12-31 11:34:39	superleaf1995	yeah
2020-12-31 11:34:52	superleaf1995	the secondary bus and the other bus field i forgot its name
2020-12-31 11:35:20	superleaf1995	so pci-to-pci bridges with multiple buses exists
2020-12-31 11:35:31	superleaf1995	subordinate
2020-12-31 11:36:15	geist	right
2020-12-31 11:36:49	geist	the subordinate bus and address decoding i get, but what i really dont understand is how the legacy IRQ routing works
2020-12-31 11:37:14	geist	ie, each bus has 4 IRQs (ABCD) and there's a whole mechanism to route subordinate IRQs and somehow map that to the parent busses, etc
2020-12-31 11:37:28	geist	i really dont get that. MSI skips most of that, but even PCIe has to handle legagy IRQs
2020-12-31 11:37:35	superleaf1995	interrupt status could possibly tell me what is going on
2020-12-31 11:37:45	superleaf1995	but it's way too slow and i have to reescan everything
2020-12-31 11:38:24	mrvn	geist: is't so that DOS can boot
2020-12-31 11:38:28	superleaf1995	and then acpi and motherboard manufactures balancing the interrupts does not help at all, but since im not x86 i can skip over that for now.
2020-12-31 11:39:05	-->	aquijoule__ (~richbridg@213-225-15-90.nat.highway.a1.net) has joined #osdev
2020-12-31 11:40:00	superleaf1995	i think pci-to-pci bridges just serve irqs to their respective forms (abcd) and you have to manually fetch them. but im not sure i haven't got to that part yet.
2020-12-31 11:41:25	<--	aquijoule_ (~richbridg@213-225-1-68.nat.highway.a1.net) has quit (Ping timeout: 240 seconds)
2020-12-31 11:42:10	superleaf1995	Im wrong
2020-12-31 11:43:51	superleaf1995	It seems the bridge is device+bus atleast for INT#AB
2020-12-31 11:44:10	superleaf1995	and device-bus for INT#CD
2020-12-31 11:44:28	superleaf1995	device-bus+'A' = letter of int ifint is not > 'C'
2020-12-31 11:44:45	superleaf1995	but i could be wrong ofc this document does nto explain it in detail
2020-12-31 11:45:48	superleaf1995	Im wrong again.
2020-12-31 11:48:46	-->	SkyZ (43538427@ool-43538427.dyn.optonline.net) has joined #osdev
2020-12-31 11:49:28	SkyZ	Can we get manufacturers to write drivers for us?
2020-12-31 11:49:45	SkyZ	@geist ?
2020-12-31 11:50:26	-->	ransom (~c4264035@2a09:bac0:72::82f:c34) has joined #osdev
2020-12-31 11:52:21	mrvn	last chance to be wrong this year
2020-12-31 11:52:47	superleaf1995	yep
2020-12-31 11:55:13	geist	hah
2020-12-31 11:56:44	<--	remby (~remby@cpe989d5dea0184-cm989d5dea0182.cpe.net.cable.rogers.com) has quit (Quit: remby)
2020-12-31 11:57:03	-->	tjowers35 (c7bc5729@199.188.87.41) has joined #osdev
2020-12-31 11:57:39	tjowers35	I'm too lazy to unlogin from the other computer
2020-12-31 11:58:00	tjowers35	Also I lay when I program
2020-12-31 11:58:06	tjowers35	On my stomach
2020-12-31 11:58:09	tjowers35	I hate sitting
2020-12-31 11:58:17	tjowers35	But it causes my neck to cramp
2020-12-31 12:05:55	<--	SkyZ (43538427@ool-43538427.dyn.optonline.net) has quit (Remote host closed the connection)
2020-12-31 12:07:59	tjowers35	PCIe dumps out interrupt lines entirely and emulates APIC?
2020-12-31 12:08:14	tjowers35	Or APIC system still exists
2020-12-31 12:08:55	tjowers35	IE is the APIC bus removed?
2020-12-31 12:08:57	--	irc: disconnected from server
2021-01-01 11:08:09	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2021-01-01 11:08:09	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2021-01-01 11:08:09	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2021-01-01 11:08:09	--	Channel #osdev: 289 nicks (2 ops, 0 voices, 287 normals)
2021-01-01 11:08:16	geist	you need an march that picks it up
2021-01-01 11:08:35	geist	since it's not part of the base x86-64 isa
2021-01-01 11:08:37	--	Channel created on Sun, 26 Nov 2006 15:42:59
2021-01-01 11:09:09	doug16k	yes: https://www.godbolt.org/z/oWo6cr
2021-01-01 11:09:10	bslsk05	​www.godbolt.org: Compiler Explorer
2021-01-01 11:09:28	doug16k	the call one was probably using a global lock eh?
2021-01-01 11:09:52	geist	yah probably so
2021-01-01 11:11:46	geist	https://godbolt.org/z/PMG5eW all the variants
2021-01-01 11:11:47	bslsk05	​godbolt.org: Compiler Explorer
2021-01-01 11:11:49	geist	anyway, there ya go
2021-01-01 11:12:37	doug16k	not relaxed at all, interestingly
2021-01-01 11:12:47	doug16k	it could have dropped "lock" prefix
2021-01-01 11:13:05	<--	sortie (~sortie@D4709737.rev.sefiber.dk) has quit (Quit: Leaving)
2021-01-01 11:13:30	doug16k	you can even cmpxchg register,register
2021-01-01 11:13:38	<--	Piraty (~irc@unaffiliated/piraty) has quit (Remote host closed the connection)
2021-01-01 11:13:52	geist	https://godbolt.org/z/x48dP3 are the new arm atomics, with a direct cas instruction
2021-01-01 11:13:53	bslsk05	​godbolt.org: Compiler Explorer
2021-01-01 11:14:07	-->	Piraty (~irc@unaffiliated/piraty) has joined #osdev
2021-01-01 11:15:46	doug16k	TCG gets cmpxchg reg,reg wrong too - doesn't zeroupper correctly
2021-01-01 11:15:55	doug16k	32 bit one
2021-01-01 11:16:07	geist	huh. interesting
2021-01-01 11:16:24	doug16k	when I pointed it out to #qemu they were all surprised that cmpxchg reg,reg even existed :D
2021-01-01 11:16:47	doug16k	I doubt anyone ever uses it
2021-01-01 11:17:09	geist	i was just about to say the same thing
2021-01-01 11:17:18	geist	like, huh didn't know it existed and probably cause nothing uses it
2021-01-01 11:17:25	geist	i mean, does it proeprly emulate ENTER and LEAVE?
2021-01-01 11:17:39	geist	or, say, argument copying on interrupt (actually that does, i fiddled with it directly once)
2021-01-01 11:18:33	doug16k	leave is pretty easy. enter with nonzero parameter is more iffy
2021-01-01 11:23:13	<--	gog (~ada@nova-046-182-189-142.nat.nova.is) has quit (Ping timeout: 268 seconds)
2021-01-01 11:23:45	doug16k	x86_64 should never leave, they shouldn't be using rbp frame pointer at all
2021-01-01 11:23:57	doug16k	and never enter either
2021-01-01 11:27:14	-->	jayvbe (~jayvbe@c-107-3-141-32.hsd1.ca.comcast.net) has joined #osdev
2021-01-01 11:34:15	geist	not even sure those two are implemented in 64bit
2021-01-01 15:21:35	--	irc: disconnected from server
2021-01-01 15:22:14	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2021-01-01 15:22:14	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2021-01-01 15:22:14	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2021-01-01 15:22:14	--	Channel #osdev: 288 nicks (2 ops, 0 voices, 286 normals)
2021-01-01 15:22:41	--	Channel created on Sun, 26 Nov 2006 15:42:59
2021-01-01 15:29:06	<--	benjif (~benjif@cpe-24-211-187-168.nc.res.rr.com) has quit (Quit: Leaving)
2021-01-01 15:31:11	--	irc: disconnected from server
2021-01-12 23:09:42	-->	jungdongho (~jungdongh@115.23.138.101) has joined #osdev
2021-01-12 23:09:42	--	Topic for #osdev is "Operating System Development || Don't ask to ask---just ask! || For 3+ LoC, use a pastebin (for example https://gist.github.com/) || Channel logs: http://osdev-logs.qzx.com || Today's log: https://freenode.logbot.info/osdev/ || Visit https://wiki.osdev.org and https://forum.osdev.org || Books: https://wiki.osdev.org/Books"
2021-01-12 23:09:42	--	Topic set by sortie (~sortie@D4709725.rev.sefiber.dk) on Sun, 30 Sep 2018 07:35:39
2021-01-12 23:09:42	--	Channel #osdev: 285 nicks (1 op, 0 voices, 284 normals)
2021-01-12 23:10:10	--	Channel created on Sun, 26 Nov 2006 15:42:59
2021-01-12 23:26:22	--	irc: disconnected from server
